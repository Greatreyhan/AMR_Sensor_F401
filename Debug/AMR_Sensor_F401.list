
AMR_Sensor_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c9c  08004c9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c9c  08004c9c  00014c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca4  08004ca4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca4  08004ca4  00014ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  2000000c  08004cb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08004cb8  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123d2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002859  00000000  00000000  00032451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00034cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cef  00000000  00000000  00035d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185da  00000000  00000000  00036a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013974  00000000  00000000  0004f001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bf0c  00000000  00000000  00062975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045c8  00000000  00000000  000fe884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00102e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004c50 	.word	0x08004c50

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004c50 	.word	0x08004c50

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <BNO08X_GetData>:
#include "BNO08X.h"

static uint8_t RX_Data[19];
static UART_HandleTypeDef huart;

void BNO08X_GetData(BNO08X_Typedef *sensorData){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    sensorData->header = RX_Data[0];
 80004d8:	4b34      	ldr	r3, [pc, #208]	; (80005ac <BNO08X_GetData+0xdc>)
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	701a      	strb	r2, [r3, #0]
    sensorData->index = RX_Data[2];
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <BNO08X_GetData+0xdc>)
 80004e2:	789a      	ldrb	r2, [r3, #2]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	705a      	strb	r2, [r3, #1]
    sensorData->yaw = (int16_t)((RX_Data[4] << 8) | RX_Data[3]);
 80004e8:	4b30      	ldr	r3, [pc, #192]	; (80005ac <BNO08X_GetData+0xdc>)
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	021b      	lsls	r3, r3, #8
 80004ee:	b21a      	sxth	r2, r3
 80004f0:	4b2e      	ldr	r3, [pc, #184]	; (80005ac <BNO08X_GetData+0xdc>)
 80004f2:	78db      	ldrb	r3, [r3, #3]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b21a      	sxth	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	805a      	strh	r2, [r3, #2]
    sensorData->pitch = (int16_t)((RX_Data[6] << 8) | RX_Data[5]);
 80004fe:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <BNO08X_GetData+0xdc>)
 8000500:	799b      	ldrb	r3, [r3, #6]
 8000502:	021b      	lsls	r3, r3, #8
 8000504:	b21a      	sxth	r2, r3
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <BNO08X_GetData+0xdc>)
 8000508:	795b      	ldrb	r3, [r3, #5]
 800050a:	b21b      	sxth	r3, r3
 800050c:	4313      	orrs	r3, r2
 800050e:	b21a      	sxth	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	809a      	strh	r2, [r3, #4]
    sensorData->roll = (int16_t)((RX_Data[8] << 8) | RX_Data[7]);
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <BNO08X_GetData+0xdc>)
 8000516:	7a1b      	ldrb	r3, [r3, #8]
 8000518:	021b      	lsls	r3, r3, #8
 800051a:	b21a      	sxth	r2, r3
 800051c:	4b23      	ldr	r3, [pc, #140]	; (80005ac <BNO08X_GetData+0xdc>)
 800051e:	79db      	ldrb	r3, [r3, #7]
 8000520:	b21b      	sxth	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b21a      	sxth	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	80da      	strh	r2, [r3, #6]
    sensorData->x_acceleration = (int16_t)((RX_Data[10] << 8) | RX_Data[9]);
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <BNO08X_GetData+0xdc>)
 800052c:	7a9b      	ldrb	r3, [r3, #10]
 800052e:	021b      	lsls	r3, r3, #8
 8000530:	b21a      	sxth	r2, r3
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <BNO08X_GetData+0xdc>)
 8000534:	7a5b      	ldrb	r3, [r3, #9]
 8000536:	b21b      	sxth	r3, r3
 8000538:	4313      	orrs	r3, r2
 800053a:	b21a      	sxth	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	811a      	strh	r2, [r3, #8]
    sensorData->y_acceleration = (int16_t)((RX_Data[12] << 8) | RX_Data[11]);
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <BNO08X_GetData+0xdc>)
 8000542:	7b1b      	ldrb	r3, [r3, #12]
 8000544:	021b      	lsls	r3, r3, #8
 8000546:	b21a      	sxth	r2, r3
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <BNO08X_GetData+0xdc>)
 800054a:	7adb      	ldrb	r3, [r3, #11]
 800054c:	b21b      	sxth	r3, r3
 800054e:	4313      	orrs	r3, r2
 8000550:	b21a      	sxth	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	815a      	strh	r2, [r3, #10]
    sensorData->z_acceleration = (int16_t)((RX_Data[14] << 8) | RX_Data[13]);
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <BNO08X_GetData+0xdc>)
 8000558:	7b9b      	ldrb	r3, [r3, #14]
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	b21a      	sxth	r2, r3
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <BNO08X_GetData+0xdc>)
 8000560:	7b5b      	ldrb	r3, [r3, #13]
 8000562:	b21b      	sxth	r3, r3
 8000564:	4313      	orrs	r3, r2
 8000566:	b21a      	sxth	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	819a      	strh	r2, [r3, #12]

    // MI, MR, Reserved bytes
    for (int i = 0; i < 3; i++) {
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e00c      	b.n	800058c <BNO08X_GetData+0xbc>
        sensorData->mi_mr_reserved[i] = RX_Data[15 + i];
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	330f      	adds	r3, #15
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <BNO08X_GetData+0xdc>)
 8000578:	5cd1      	ldrb	r1, [r2, r3]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	330e      	adds	r3, #14
 8000582:	460a      	mov	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b02      	cmp	r3, #2
 8000590:	ddef      	ble.n	8000572 <BNO08X_GetData+0xa2>
    }

    sensorData->checksum = RX_Data[18];
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <BNO08X_GetData+0xdc>)
 8000594:	7c9a      	ldrb	r2, [r3, #18]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	745a      	strb	r2, [r3, #17]

    HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 800059a:	2213      	movs	r2, #19
 800059c:	4903      	ldr	r1, [pc, #12]	; (80005ac <BNO08X_GetData+0xdc>)
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <BNO08X_GetData+0xe0>)
 80005a0:	f003 fde5 	bl	800416e <HAL_UART_Receive_DMA>
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000028 	.word	0x20000028
 80005b0:	2000003c 	.word	0x2000003c

080005b4 <BNO08X_Init>:

void BNO08X_Init(UART_HandleTypeDef *huart_instance){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	huart = *huart_instance;
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <BNO08X_Init+0x2c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4610      	mov	r0, r2
 80005c2:	4619      	mov	r1, r3
 80005c4:	2348      	movs	r3, #72	; 0x48
 80005c6:	461a      	mov	r2, r3
 80005c8:	f004 fb34 	bl	8004c34 <memcpy>
	HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 80005cc:	2213      	movs	r2, #19
 80005ce:	4905      	ldr	r1, [pc, #20]	; (80005e4 <BNO08X_Init+0x30>)
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <BNO08X_Init+0x2c>)
 80005d2:	f003 fdcc 	bl	800416e <HAL_UART_Receive_DMA>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000003c 	.word	0x2000003c
 80005e4:	20000028 	.word	0x20000028

080005e8 <VoltCurrent_Init>:
//static float const_voltage = 1.488;
static float const_voltage = 1.035;

ADC_HandleTypeDef hadc;

void VoltCurrent_Init(ADC_HandleTypeDef *hadc_config){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	hadc = *hadc_config;
 80005f0:	4a05      	ldr	r2, [pc, #20]	; (8000608 <VoltCurrent_Init+0x20>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4610      	mov	r0, r2
 80005f6:	4619      	mov	r1, r3
 80005f8:	2348      	movs	r3, #72	; 0x48
 80005fa:	461a      	mov	r2, r3
 80005fc:	f004 fb1a 	bl	8004c34 <memcpy>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000dc 	.word	0x200000dc

0800060c <komunikasi_ctrl_init>:
static uint8_t rxbuf_get_ctrl[16];
static uint8_t rx_buf_holder[16];

//******************************************** COMMUNICATION TO CONTROL **********************************************//

void komunikasi_ctrl_init(UART_HandleTypeDef* uart_handler){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	huart_ctrl = uart_handler;
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <komunikasi_ctrl_init+0x1c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000138 	.word	0x20000138

0800062c <checksum_ctrl_generator>:

uint8_t checksum_ctrl_generator(uint8_t* arr, uint8_t size){
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	uint8_t chksm = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; i++) chksm += arr[i];
 800063c:	2300      	movs	r3, #0
 800063e:	73bb      	strb	r3, [r7, #14]
 8000640:	e009      	b.n	8000656 <checksum_ctrl_generator+0x2a>
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	4413      	add	r3, r2
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	7bbb      	ldrb	r3, [r7, #14]
 8000652:	3301      	adds	r3, #1
 8000654:	73bb      	strb	r3, [r7, #14]
 8000656:	7bba      	ldrb	r2, [r7, #14]
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	429a      	cmp	r2, r3
 800065c:	d3f1      	bcc.n	8000642 <checksum_ctrl_generator+0x16>
	return (chksm & 0xFF);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <tx_ctrl_send_BNO08X>:

	if(HAL_UART_Transmit(huart_ctrl, ping, 16, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

bool tx_ctrl_send_BNO08X(BNO08X_Typedef BNO08x){
 800066c:	b084      	sub	sp, #16
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	f107 0c18 	add.w	ip, r7, #24
 8000678:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t steady[] = {0xA5, 0x5A, 0x02, ((BNO08x.yaw >> 8) & 0XFF), ((BNO08x.yaw) & 0XFF), ((BNO08x.pitch >> 8) & 0XFF), ((BNO08x.pitch) & 0XFF), ((BNO08x.roll >> 8) & 0XFF), ((BNO08x.roll) & 0XFF), ((BNO08x.x_acceleration >> 8) & 0XFF), ((BNO08x.x_acceleration) & 0XFF), ((BNO08x.y_acceleration >> 8) & 0XFF), ((BNO08x.y_acceleration) & 0XFF), ((BNO08x.z_acceleration >> 8) & 0XFF), ((BNO08x.z_acceleration) & 0XFF), 0x00};
 800067c:	23a5      	movs	r3, #165	; 0xa5
 800067e:	703b      	strb	r3, [r7, #0]
 8000680:	235a      	movs	r3, #90	; 0x5a
 8000682:	707b      	strb	r3, [r7, #1]
 8000684:	2302      	movs	r3, #2
 8000686:	70bb      	strb	r3, [r7, #2]
 8000688:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800068c:	121b      	asrs	r3, r3, #8
 800068e:	b21b      	sxth	r3, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	70fb      	strb	r3, [r7, #3]
 8000694:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	713b      	strb	r3, [r7, #4]
 800069c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80006a0:	121b      	asrs	r3, r3, #8
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	717b      	strb	r3, [r7, #5]
 80006a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	71bb      	strb	r3, [r7, #6]
 80006b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006b4:	121b      	asrs	r3, r3, #8
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	723b      	strb	r3, [r7, #8]
 80006c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006c8:	121b      	asrs	r3, r3, #8
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	727b      	strb	r3, [r7, #9]
 80006d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	72bb      	strb	r3, [r7, #10]
 80006d8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80006dc:	121b      	asrs	r3, r3, #8
 80006de:	b21b      	sxth	r3, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	72fb      	strb	r3, [r7, #11]
 80006e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	733b      	strb	r3, [r7, #12]
 80006ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80006f0:	121b      	asrs	r3, r3, #8
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	737b      	strb	r3, [r7, #13]
 80006f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	73bb      	strb	r3, [r7, #14]
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]
	steady[15] = checksum_ctrl_generator(steady, 16);
 8000704:	463b      	mov	r3, r7
 8000706:	2110      	movs	r1, #16
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff8f 	bl	800062c <checksum_ctrl_generator>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]

	if(HAL_UART_Transmit(huart_ctrl, steady, 16, TIMEOUT_SEND) == HAL_OK) return true;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <tx_ctrl_send_BNO08X+0xd0>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	4639      	mov	r1, r7
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2210      	movs	r2, #16
 800071c:	f003 fc9c 	bl	8004058 <HAL_UART_Transmit>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <tx_ctrl_send_BNO08X+0xbe>
 8000726:	2301      	movs	r3, #1
 8000728:	e000      	b.n	800072c <tx_ctrl_send_BNO08X+0xc0>
	else return false;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000736:	b004      	add	sp, #16
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000138 	.word	0x20000138

08000740 <rx_ctrl_start_get>:

void rx_ctrl_start(void){
	HAL_UART_Receive_DMA(huart_ctrl,rxbuf_ctrl, 3);
}

void rx_ctrl_start_get(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_ctrl,rxbuf_get_ctrl, 16);
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <rx_ctrl_start_get+0x18>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2210      	movs	r2, #16
 800074a:	4904      	ldr	r1, [pc, #16]	; (800075c <rx_ctrl_start_get+0x1c>)
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fd0e 	bl	800416e <HAL_UART_Receive_DMA>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000138 	.word	0x20000138
 800075c:	2000013c 	.word	0x2000013c

08000760 <rx_ctrl_get>:
		else if(rxbuf_pc[2] == 0x05) fed->req = true;
	}
	HAL_UART_Receive_DMA(huart_ctrl,rxbuf_ctrl, 3);
}

void rx_ctrl_get(com_ctrl_get_t* get){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 16; i++){
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e377      	b.n	8000e5e <rx_ctrl_get+0x6fe>
		if((rxbuf_get_ctrl[0] == 0xA5) && (rxbuf_get_ctrl[1] == 0x5A)){
 800076e:	4b93      	ldr	r3, [pc, #588]	; (80009bc <rx_ctrl_get+0x25c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2ba5      	cmp	r3, #165	; 0xa5
 8000774:	f040 8370 	bne.w	8000e58 <rx_ctrl_get+0x6f8>
 8000778:	4b90      	ldr	r3, [pc, #576]	; (80009bc <rx_ctrl_get+0x25c>)
 800077a:	785b      	ldrb	r3, [r3, #1]
 800077c:	2b5a      	cmp	r3, #90	; 0x5a
 800077e:	f040 836b 	bne.w	8000e58 <rx_ctrl_get+0x6f8>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000786:	488e      	ldr	r0, [pc, #568]	; (80009c0 <rx_ctrl_get+0x260>)
 8000788:	f002 fc6f 	bl	800306a <HAL_GPIO_TogglePin>
			// Check for ping
			if(rxbuf_get_ctrl[i+2] == 0x01){
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3302      	adds	r3, #2
 8000790:	4a8a      	ldr	r2, [pc, #552]	; (80009bc <rx_ctrl_get+0x25c>)
 8000792:	5cd3      	ldrb	r3, [r2, r3]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d115      	bne.n	80007c4 <rx_ctrl_get+0x64>
				get->cmd = 0x01;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2201      	movs	r2, #1
 800079c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				uint8_t txbuf[3] = {0xA5, 0x5A, 0x01};
 80007a0:	4a88      	ldr	r2, [pc, #544]	; (80009c4 <rx_ctrl_get+0x264>)
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	6812      	ldr	r2, [r2, #0]
 80007a8:	4611      	mov	r1, r2
 80007aa:	8019      	strh	r1, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	0c12      	lsrs	r2, r2, #16
 80007b0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(huart_ctrl, txbuf, 3, 1);
 80007b2:	4b85      	ldr	r3, [pc, #532]	; (80009c8 <rx_ctrl_get+0x268>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	f107 0108 	add.w	r1, r7, #8
 80007ba:	2301      	movs	r3, #1
 80007bc:	2203      	movs	r2, #3
 80007be:	f003 fc4b 	bl	8004058 <HAL_UART_Transmit>
 80007c2:	e349      	b.n	8000e58 <rx_ctrl_get+0x6f8>
			}

			// Check for "Move" Instruction Given from Sensor
			else if(rxbuf_get_ctrl[i+2] == 0x15){
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3302      	adds	r3, #2
 80007c8:	4a7c      	ldr	r2, [pc, #496]	; (80009bc <rx_ctrl_get+0x25c>)
 80007ca:	5cd3      	ldrb	r3, [r2, r3]
 80007cc:	2b15      	cmp	r3, #21
 80007ce:	f040 80fd 	bne.w	80009cc <rx_ctrl_get+0x26c>

				if((rxbuf_get_ctrl[i+3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3303      	adds	r3, #3
 80007d6:	4a79      	ldr	r2, [pc, #484]	; (80009bc <rx_ctrl_get+0x25c>)
 80007d8:	5cd3      	ldrb	r3, [r2, r3]
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da10      	bge.n	8000802 <rx_ctrl_get+0xa2>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3303      	adds	r3, #3
 80007e4:	4a75      	ldr	r2, [pc, #468]	; (80009bc <rx_ctrl_get+0x25c>)
 80007e6:	5cd3      	ldrb	r3, [r2, r3]
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3304      	adds	r3, #4
 80007f0:	4972      	ldr	r1, [pc, #456]	; (80009bc <rx_ctrl_get+0x25c>)
 80007f2:	5ccb      	ldrb	r3, [r1, r3]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8000800:	e00f      	b.n	8000822 <rx_ctrl_get+0xc2>
				else get->x_pos = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3303      	adds	r3, #3
 8000806:	4a6d      	ldr	r2, [pc, #436]	; (80009bc <rx_ctrl_get+0x25c>)
 8000808:	5cd3      	ldrb	r3, [r2, r3]
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	b21a      	sxth	r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	3304      	adds	r3, #4
 8000812:	496a      	ldr	r1, [pc, #424]	; (80009bc <rx_ctrl_get+0x25c>)
 8000814:	5ccb      	ldrb	r3, [r1, r3]
 8000816:	b21b      	sxth	r3, r3
 8000818:	4313      	orrs	r3, r2
 800081a:	b21a      	sxth	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3305      	adds	r3, #5
 8000826:	4a65      	ldr	r2, [pc, #404]	; (80009bc <rx_ctrl_get+0x25c>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	b25b      	sxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	da10      	bge.n	8000852 <rx_ctrl_get+0xf2>
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3305      	adds	r3, #5
 8000834:	4a61      	ldr	r2, [pc, #388]	; (80009bc <rx_ctrl_get+0x25c>)
 8000836:	5cd3      	ldrb	r3, [r2, r3]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	b21a      	sxth	r2, r3
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3306      	adds	r3, #6
 8000840:	495e      	ldr	r1, [pc, #376]	; (80009bc <rx_ctrl_get+0x25c>)
 8000842:	5ccb      	ldrb	r3, [r1, r3]
 8000844:	b21b      	sxth	r3, r3
 8000846:	4313      	orrs	r3, r2
 8000848:	b21a      	sxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8000850:	e00f      	b.n	8000872 <rx_ctrl_get+0x112>
				else get->y_pos = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3305      	adds	r3, #5
 8000856:	4a59      	ldr	r2, [pc, #356]	; (80009bc <rx_ctrl_get+0x25c>)
 8000858:	5cd3      	ldrb	r3, [r2, r3]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3306      	adds	r3, #6
 8000862:	4956      	ldr	r1, [pc, #344]	; (80009bc <rx_ctrl_get+0x25c>)
 8000864:	5ccb      	ldrb	r3, [r1, r3]
 8000866:	b21b      	sxth	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b21a      	sxth	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->t_pos = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3307      	adds	r3, #7
 8000876:	4a51      	ldr	r2, [pc, #324]	; (80009bc <rx_ctrl_get+0x25c>)
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	b25b      	sxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	da10      	bge.n	80008a2 <rx_ctrl_get+0x142>
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3307      	adds	r3, #7
 8000884:	4a4d      	ldr	r2, [pc, #308]	; (80009bc <rx_ctrl_get+0x25c>)
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3308      	adds	r3, #8
 8000890:	494a      	ldr	r1, [pc, #296]	; (80009bc <rx_ctrl_get+0x25c>)
 8000892:	5ccb      	ldrb	r3, [r1, r3]
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21a      	sxth	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80008a0:	e00f      	b.n	80008c2 <rx_ctrl_get+0x162>
				else get->t_pos = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3307      	adds	r3, #7
 80008a6:	4a45      	ldr	r2, [pc, #276]	; (80009bc <rx_ctrl_get+0x25c>)
 80008a8:	5cd3      	ldrb	r3, [r2, r3]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3308      	adds	r3, #8
 80008b2:	4942      	ldr	r1, [pc, #264]	; (80009bc <rx_ctrl_get+0x25c>)
 80008b4:	5ccb      	ldrb	r3, [r1, r3]
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->x_vel = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3309      	adds	r3, #9
 80008c6:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <rx_ctrl_get+0x25c>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	da10      	bge.n	80008f2 <rx_ctrl_get+0x192>
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3309      	adds	r3, #9
 80008d4:	4a39      	ldr	r2, [pc, #228]	; (80009bc <rx_ctrl_get+0x25c>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	b21a      	sxth	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	330a      	adds	r3, #10
 80008e0:	4936      	ldr	r1, [pc, #216]	; (80009bc <rx_ctrl_get+0x25c>)
 80008e2:	5ccb      	ldrb	r3, [r1, r3]
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 80008f0:	e00f      	b.n	8000912 <rx_ctrl_get+0x1b2>
				else get->x_vel = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3309      	adds	r3, #9
 80008f6:	4a31      	ldr	r2, [pc, #196]	; (80009bc <rx_ctrl_get+0x25c>)
 80008f8:	5cd3      	ldrb	r3, [r2, r3]
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	b21a      	sxth	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	330a      	adds	r3, #10
 8000902:	492e      	ldr	r1, [pc, #184]	; (80009bc <rx_ctrl_get+0x25c>)
 8000904:	5ccb      	ldrb	r3, [r1, r3]
 8000906:	b21b      	sxth	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	b21a      	sxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

				if((rxbuf_get_ctrl[i+11] & 0x80)) get->y_vel = ((rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12])-(65536);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	330b      	adds	r3, #11
 8000916:	4a29      	ldr	r2, [pc, #164]	; (80009bc <rx_ctrl_get+0x25c>)
 8000918:	5cd3      	ldrb	r3, [r2, r3]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	da10      	bge.n	8000942 <rx_ctrl_get+0x1e2>
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	330b      	adds	r3, #11
 8000924:	4a25      	ldr	r2, [pc, #148]	; (80009bc <rx_ctrl_get+0x25c>)
 8000926:	5cd3      	ldrb	r3, [r2, r3]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	330c      	adds	r3, #12
 8000930:	4922      	ldr	r1, [pc, #136]	; (80009bc <rx_ctrl_get+0x25c>)
 8000932:	5ccb      	ldrb	r3, [r1, r3]
 8000934:	b21b      	sxth	r3, r3
 8000936:	4313      	orrs	r3, r2
 8000938:	b21a      	sxth	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8000940:	e00f      	b.n	8000962 <rx_ctrl_get+0x202>
				else get->y_vel = (rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12];
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	330b      	adds	r3, #11
 8000946:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <rx_ctrl_get+0x25c>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	b21a      	sxth	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	491a      	ldr	r1, [pc, #104]	; (80009bc <rx_ctrl_get+0x25c>)
 8000954:	5ccb      	ldrb	r3, [r1, r3]
 8000956:	b21b      	sxth	r3, r3
 8000958:	4313      	orrs	r3, r2
 800095a:	b21a      	sxth	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

				if((rxbuf_get_ctrl[i+13] & 0x80)) get->t_vel = ((rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14])-(65536);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	330d      	adds	r3, #13
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <rx_ctrl_get+0x25c>)
 8000968:	5cd3      	ldrb	r3, [r2, r3]
 800096a:	b25b      	sxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	da10      	bge.n	8000992 <rx_ctrl_get+0x232>
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	330d      	adds	r3, #13
 8000974:	4a11      	ldr	r2, [pc, #68]	; (80009bc <rx_ctrl_get+0x25c>)
 8000976:	5cd3      	ldrb	r3, [r2, r3]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	b21a      	sxth	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	330e      	adds	r3, #14
 8000980:	490e      	ldr	r1, [pc, #56]	; (80009bc <rx_ctrl_get+0x25c>)
 8000982:	5ccb      	ldrb	r3, [r1, r3]
 8000984:	b21b      	sxth	r3, r3
 8000986:	4313      	orrs	r3, r2
 8000988:	b21a      	sxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8000990:	e00f      	b.n	80009b2 <rx_ctrl_get+0x252>
				else get->t_vel = (rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14];
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	330d      	adds	r3, #13
 8000996:	4a09      	ldr	r2, [pc, #36]	; (80009bc <rx_ctrl_get+0x25c>)
 8000998:	5cd3      	ldrb	r3, [r2, r3]
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	b21a      	sxth	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	330e      	adds	r3, #14
 80009a2:	4906      	ldr	r1, [pc, #24]	; (80009bc <rx_ctrl_get+0x25c>)
 80009a4:	5ccb      	ldrb	r3, [r1, r3]
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
//					rx_buf_holder[j] = rxbuf_get_ctrl[i+j];
//				}
//				HAL_UART_Transmit(huart_pc, rx_buf_holder, 16, TIMEOUT_SEND);
//				#endif

				get->cmd = MOVE;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2203      	movs	r2, #3
 80009b6:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80009ba:	e24d      	b.n	8000e58 <rx_ctrl_get+0x6f8>
 80009bc:	2000013c 	.word	0x2000013c
 80009c0:	40020800 	.word	0x40020800
 80009c4:	08004c78 	.word	0x08004c78
 80009c8:	20000138 	.word	0x20000138

			}

			// Check for "Move" Instruction Given from Sensor
			else if(rxbuf_get_ctrl[i+2] == 0x12){
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3302      	adds	r3, #2
 80009d0:	4a90      	ldr	r2, [pc, #576]	; (8000c14 <rx_ctrl_get+0x4b4>)
 80009d2:	5cd3      	ldrb	r3, [r2, r3]
 80009d4:	2b12      	cmp	r3, #18
 80009d6:	f040 8085 	bne.w	8000ae4 <rx_ctrl_get+0x384>
				if((rxbuf_get_ctrl[i+3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3303      	adds	r3, #3
 80009de:	4a8d      	ldr	r2, [pc, #564]	; (8000c14 <rx_ctrl_get+0x4b4>)
 80009e0:	5cd3      	ldrb	r3, [r2, r3]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	da10      	bge.n	8000a0a <rx_ctrl_get+0x2aa>
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3303      	adds	r3, #3
 80009ec:	4a89      	ldr	r2, [pc, #548]	; (8000c14 <rx_ctrl_get+0x4b4>)
 80009ee:	5cd3      	ldrb	r3, [r2, r3]
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3304      	adds	r3, #4
 80009f8:	4986      	ldr	r1, [pc, #536]	; (8000c14 <rx_ctrl_get+0x4b4>)
 80009fa:	5ccb      	ldrb	r3, [r1, r3]
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8000a08:	e00f      	b.n	8000a2a <rx_ctrl_get+0x2ca>
				else get->x_pos = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	4a81      	ldr	r2, [pc, #516]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a10:	5cd3      	ldrb	r3, [r2, r3]
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	497e      	ldr	r1, [pc, #504]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a1c:	5ccb      	ldrb	r3, [r1, r3]
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3305      	adds	r3, #5
 8000a2e:	4a79      	ldr	r2, [pc, #484]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a30:	5cd3      	ldrb	r3, [r2, r3]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	da10      	bge.n	8000a5a <rx_ctrl_get+0x2fa>
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3305      	adds	r3, #5
 8000a3c:	4a75      	ldr	r2, [pc, #468]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	021b      	lsls	r3, r3, #8
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3306      	adds	r3, #6
 8000a48:	4972      	ldr	r1, [pc, #456]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a4a:	5ccb      	ldrb	r3, [r1, r3]
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8000a58:	e00f      	b.n	8000a7a <rx_ctrl_get+0x31a>
				else get->y_pos = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3305      	adds	r3, #5
 8000a5e:	4a6d      	ldr	r2, [pc, #436]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a60:	5cd3      	ldrb	r3, [r2, r3]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3306      	adds	r3, #6
 8000a6a:	496a      	ldr	r1, [pc, #424]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a6c:	5ccb      	ldrb	r3, [r1, r3]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->orientation = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3307      	adds	r3, #7
 8000a7e:	4a65      	ldr	r2, [pc, #404]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a80:	5cd3      	ldrb	r3, [r2, r3]
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	da10      	bge.n	8000aaa <rx_ctrl_get+0x34a>
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3307      	adds	r3, #7
 8000a8c:	4a61      	ldr	r2, [pc, #388]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a8e:	5cd3      	ldrb	r3, [r2, r3]
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3308      	adds	r3, #8
 8000a98:	495e      	ldr	r1, [pc, #376]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000a9a:	5ccb      	ldrb	r3, [r1, r3]
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 8000aa8:	e00f      	b.n	8000aca <rx_ctrl_get+0x36a>
				else get->orientation = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3307      	adds	r3, #7
 8000aae:	4a59      	ldr	r2, [pc, #356]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	b21a      	sxth	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3308      	adds	r3, #8
 8000aba:	4956      	ldr	r1, [pc, #344]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000abc:	5ccb      	ldrb	r3, [r1, r3]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6

				get->step = rxbuf_get_ctrl[i+10];
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	330a      	adds	r3, #10
 8000ace:	4a51      	ldr	r2, [pc, #324]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000ad0:	5cd3      	ldrb	r3, [r2, r3]
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8

				get->cmd = MOVE;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2203      	movs	r2, #3
 8000ade:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8000ae2:	e1b9      	b.n	8000e58 <rx_ctrl_get+0x6f8>

			}

			// Check for Position
			else if(rxbuf_get_ctrl[i+2] == 0x02){
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000aea:	5cd3      	ldrb	r3, [r2, r3]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	f040 80f4 	bne.w	8000cda <rx_ctrl_get+0x57a>

				if((rxbuf_get_ctrl[i+3] & 0x80)) get->yaw = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3303      	adds	r3, #3
 8000af6:	4a47      	ldr	r2, [pc, #284]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	da10      	bge.n	8000b22 <rx_ctrl_get+0x3c2>
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3303      	adds	r3, #3
 8000b04:	4a43      	ldr	r2, [pc, #268]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3304      	adds	r3, #4
 8000b10:	4940      	ldr	r1, [pc, #256]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b12:	5ccb      	ldrb	r3, [r1, r3]
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 8000b20:	e00f      	b.n	8000b42 <rx_ctrl_get+0x3e2>
				else get->yaw = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3303      	adds	r3, #3
 8000b26:	4a3b      	ldr	r2, [pc, #236]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b28:	5cd3      	ldrb	r3, [r2, r3]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3304      	adds	r3, #4
 8000b32:	4938      	ldr	r1, [pc, #224]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b34:	5ccb      	ldrb	r3, [r1, r3]
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21a      	sxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->pitch = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3305      	adds	r3, #5
 8000b46:	4a33      	ldr	r2, [pc, #204]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b48:	5cd3      	ldrb	r3, [r2, r3]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da10      	bge.n	8000b72 <rx_ctrl_get+0x412>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3305      	adds	r3, #5
 8000b54:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3306      	adds	r3, #6
 8000b60:	492c      	ldr	r1, [pc, #176]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b62:	5ccb      	ldrb	r3, [r1, r3]
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21a      	sxth	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 8000b70:	e00f      	b.n	8000b92 <rx_ctrl_get+0x432>
				else get->pitch = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3305      	adds	r3, #5
 8000b76:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b78:	5cd3      	ldrb	r3, [r2, r3]
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3306      	adds	r3, #6
 8000b82:	4924      	ldr	r1, [pc, #144]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b84:	5ccb      	ldrb	r3, [r1, r3]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->roll = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3307      	adds	r3, #7
 8000b96:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000b98:	5cd3      	ldrb	r3, [r2, r3]
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da10      	bge.n	8000bc2 <rx_ctrl_get+0x462>
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3307      	adds	r3, #7
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	3308      	adds	r3, #8
 8000bb0:	4918      	ldr	r1, [pc, #96]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000bb2:	5ccb      	ldrb	r3, [r1, r3]
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8000bc0:	e00f      	b.n	8000be2 <rx_ctrl_get+0x482>
				else get->roll = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3307      	adds	r3, #7
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000bc8:	5cd3      	ldrb	r3, [r2, r3]
 8000bca:	021b      	lsls	r3, r3, #8
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	4910      	ldr	r1, [pc, #64]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000bd4:	5ccb      	ldrb	r3, [r1, r3]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->x_acceleration = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3309      	adds	r3, #9
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000be8:	5cd3      	ldrb	r3, [r2, r3]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	da13      	bge.n	8000c18 <rx_ctrl_get+0x4b8>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3309      	adds	r3, #9
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000bf6:	5cd3      	ldrb	r3, [r2, r3]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	330a      	adds	r3, #10
 8000c00:	4904      	ldr	r1, [pc, #16]	; (8000c14 <rx_ctrl_get+0x4b4>)
 8000c02:	5ccb      	ldrb	r3, [r1, r3]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 8000c10:	e012      	b.n	8000c38 <rx_ctrl_get+0x4d8>
 8000c12:	bf00      	nop
 8000c14:	2000013c 	.word	0x2000013c
				else get->x_acceleration = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3309      	adds	r3, #9
 8000c1c:	4a97      	ldr	r2, [pc, #604]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c1e:	5cd3      	ldrb	r3, [r2, r3]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	330a      	adds	r3, #10
 8000c28:	4994      	ldr	r1, [pc, #592]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c2a:	5ccb      	ldrb	r3, [r1, r3]
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda

				if((rxbuf_get_ctrl[i+11] & 0x80)) get->y_acceleration = ((rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12])-(65536);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	330b      	adds	r3, #11
 8000c3c:	4a8f      	ldr	r2, [pc, #572]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da10      	bge.n	8000c68 <rx_ctrl_get+0x508>
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	330b      	adds	r3, #11
 8000c4a:	4a8c      	ldr	r2, [pc, #560]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c4c:	5cd3      	ldrb	r3, [r2, r3]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	330c      	adds	r3, #12
 8000c56:	4989      	ldr	r1, [pc, #548]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c58:	5ccb      	ldrb	r3, [r1, r3]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
 8000c66:	e00f      	b.n	8000c88 <rx_ctrl_get+0x528>
				else get->y_acceleration = (rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12];
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	330b      	adds	r3, #11
 8000c6c:	4a83      	ldr	r2, [pc, #524]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c6e:	5cd3      	ldrb	r3, [r2, r3]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	330c      	adds	r3, #12
 8000c78:	4980      	ldr	r1, [pc, #512]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c7a:	5ccb      	ldrb	r3, [r1, r3]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc

				if((rxbuf_get_ctrl[i+13] & 0x80)) get->z_acceleration = ((rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14])-(65536);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	330d      	adds	r3, #13
 8000c8c:	4a7b      	ldr	r2, [pc, #492]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da10      	bge.n	8000cb8 <rx_ctrl_get+0x558>
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	330d      	adds	r3, #13
 8000c9a:	4a78      	ldr	r2, [pc, #480]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000c9c:	5cd3      	ldrb	r3, [r2, r3]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	330e      	adds	r3, #14
 8000ca6:	4975      	ldr	r1, [pc, #468]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000ca8:	5ccb      	ldrb	r3, [r1, r3]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8000cb6:	e0cf      	b.n	8000e58 <rx_ctrl_get+0x6f8>
				else get->z_acceleration = (rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14];
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	330d      	adds	r3, #13
 8000cbc:	4a6f      	ldr	r2, [pc, #444]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	330e      	adds	r3, #14
 8000cc8:	496c      	ldr	r1, [pc, #432]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8000cd8:	e0be      	b.n	8000e58 <rx_ctrl_get+0x6f8>
//				HAL_UART_Transmit(huart_ctrl, txbuf, 3, 1);
//				get->cmd = 0x02;
			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_ctrl[i+2] == 0x13){
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	4a67      	ldr	r2, [pc, #412]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	2b13      	cmp	r3, #19
 8000ce4:	f040 80b8 	bne.w	8000e58 <rx_ctrl_get+0x6f8>
				get->astar_id = (rxbuf_get_ctrl[i+3]);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3303      	adds	r3, #3
 8000cec:	4a63      	ldr	r2, [pc, #396]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000cee:	5cd2      	ldrb	r2, [r2, r3]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				get->astar_length = (rxbuf_get_ctrl[i+4]);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	4a60      	ldr	r2, [pc, #384]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000cfc:	5cd2      	ldrb	r2, [r2, r3]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-4] = (rxbuf_get_ctrl[i+5]);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1d5a      	adds	r2, r3, #5
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3303      	adds	r3, #3
 8000d0c:	495b      	ldr	r1, [pc, #364]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d0e:	5ccb      	ldrb	r3, [r1, r3]
 8000d10:	4619      	mov	r1, r3
 8000d12:	460b      	mov	r3, r1
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	440b      	add	r3, r1
 8000d18:	3b04      	subs	r3, #4
 8000d1a:	4958      	ldr	r1, [pc, #352]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d1c:	5c89      	ldrb	r1, [r1, r2]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-4] = (rxbuf_get_ctrl[i+6]);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1d9a      	adds	r2, r3, #6
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3303      	adds	r3, #3
 8000d2a:	4954      	ldr	r1, [pc, #336]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d2c:	5ccb      	ldrb	r3, [r1, r3]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	460b      	mov	r3, r1
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	3b04      	subs	r3, #4
 8000d38:	4950      	ldr	r1, [pc, #320]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d3a:	5c89      	ldrb	r1, [r1, r2]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	460a      	mov	r2, r1
 8000d42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-3] = (rxbuf_get_ctrl[i+7]);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1dda      	adds	r2, r3, #7
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3303      	adds	r3, #3
 8000d4e:	494b      	ldr	r1, [pc, #300]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d50:	5ccb      	ldrb	r3, [r1, r3]
 8000d52:	4619      	mov	r1, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	440b      	add	r3, r1
 8000d5a:	3b03      	subs	r3, #3
 8000d5c:	4947      	ldr	r1, [pc, #284]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d5e:	5c89      	ldrb	r1, [r1, r2]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-3] = (rxbuf_get_ctrl[i+8]);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f103 0208 	add.w	r2, r3, #8
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3303      	adds	r3, #3
 8000d6e:	4943      	ldr	r1, [pc, #268]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d70:	5ccb      	ldrb	r3, [r1, r3]
 8000d72:	4619      	mov	r1, r3
 8000d74:	460b      	mov	r3, r1
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3b03      	subs	r3, #3
 8000d7c:	493f      	ldr	r1, [pc, #252]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d7e:	5c89      	ldrb	r1, [r1, r2]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	460a      	mov	r2, r1
 8000d86:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-2] = (rxbuf_get_ctrl[i+9]);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f103 0209 	add.w	r2, r3, #9
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3303      	adds	r3, #3
 8000d94:	4939      	ldr	r1, [pc, #228]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000d96:	5ccb      	ldrb	r3, [r1, r3]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	3b02      	subs	r3, #2
 8000da2:	4936      	ldr	r1, [pc, #216]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000da4:	5c89      	ldrb	r1, [r1, r2]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-2] = (rxbuf_get_ctrl[i+10]);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f103 020a 	add.w	r2, r3, #10
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3303      	adds	r3, #3
 8000db4:	4931      	ldr	r1, [pc, #196]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000db6:	5ccb      	ldrb	r3, [r1, r3]
 8000db8:	4619      	mov	r1, r3
 8000dba:	460b      	mov	r3, r1
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3b02      	subs	r3, #2
 8000dc2:	492e      	ldr	r1, [pc, #184]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000dc4:	5c89      	ldrb	r1, [r1, r2]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	460a      	mov	r2, r1
 8000dcc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-1] = (rxbuf_get_ctrl[i+11]);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f103 020b 	add.w	r2, r3, #11
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3303      	adds	r3, #3
 8000dda:	4928      	ldr	r1, [pc, #160]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000ddc:	5ccb      	ldrb	r3, [r1, r3]
 8000dde:	4619      	mov	r1, r3
 8000de0:	460b      	mov	r3, r1
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	440b      	add	r3, r1
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4924      	ldr	r1, [pc, #144]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000dea:	5c89      	ldrb	r1, [r1, r2]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-1] = (rxbuf_get_ctrl[i+12]);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f103 020c 	add.w	r2, r3, #12
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3303      	adds	r3, #3
 8000dfa:	4920      	ldr	r1, [pc, #128]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000dfc:	5ccb      	ldrb	r3, [r1, r3]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	460b      	mov	r3, r1
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	3b01      	subs	r3, #1
 8000e08:	491c      	ldr	r1, [pc, #112]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000e0a:	5c89      	ldrb	r1, [r1, r2]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	460a      	mov	r2, r1
 8000e12:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5-0] = (rxbuf_get_ctrl[i+13]);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f103 020d 	add.w	r2, r3, #13
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3303      	adds	r3, #3
 8000e20:	4916      	ldr	r1, [pc, #88]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000e22:	5ccb      	ldrb	r3, [r1, r3]
 8000e24:	4619      	mov	r1, r3
 8000e26:	460b      	mov	r3, r1
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	4913      	ldr	r1, [pc, #76]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000e2e:	5c89      	ldrb	r1, [r1, r2]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5-0] = (rxbuf_get_ctrl[i+14]);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f103 020e 	add.w	r2, r3, #14
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3303      	adds	r3, #3
 8000e3e:	490f      	ldr	r1, [pc, #60]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000e40:	5ccb      	ldrb	r3, [r1, r3]
 8000e42:	4619      	mov	r1, r3
 8000e44:	460b      	mov	r3, r1
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	490c      	ldr	r1, [pc, #48]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000e4c:	5c89      	ldrb	r1, [r1, r2]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	460a      	mov	r2, r1
 8000e54:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	for(int i = 0; i < 16; i++){
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	f77f ac84 	ble.w	800076e <rx_ctrl_get+0xe>
			}

		}
	}
	HAL_UART_Receive_DMA(huart_ctrl, rxbuf_get_ctrl, 16);
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <rx_ctrl_get+0x720>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	4903      	ldr	r1, [pc, #12]	; (8000e7c <rx_ctrl_get+0x71c>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 f97d 	bl	800416e <HAL_UART_Receive_DMA>
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000013c 	.word	0x2000013c
 8000e80:	20000138 	.word	0x20000138

08000e84 <komunikasi_pc_init>:

//**************************************************** COMMUNICATION TO JETSON NANO *******************************************//

void komunikasi_pc_init(UART_HandleTypeDef* uart_handler){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	huart_pc = uart_handler;
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <komunikasi_pc_init+0x1c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000124 	.word	0x20000124

08000ea4 <rx_pc_start_get>:

void rx_pc_start(void){
	HAL_UART_Receive_DMA(huart_pc,rxbuf_pc, 3);
}

void rx_pc_start_get(void){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_pc,rxbuf_get_pc, 16);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <rx_pc_start_get+0x18>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2210      	movs	r2, #16
 8000eae:	4904      	ldr	r1, [pc, #16]	; (8000ec0 <rx_pc_start_get+0x1c>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 f95c 	bl	800416e <HAL_UART_Receive_DMA>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000124 	.word	0x20000124
 8000ec0:	20000128 	.word	0x20000128

08000ec4 <rx_pc_get>:
		else if(rxbuf_pc[2] == 0x05) fed->req = true;
	}
	HAL_UART_Receive_DMA(huart_pc,rxbuf_pc, 3);
}

void rx_pc_get(com_pc_get_t* get){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 16; i++){
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	e342      	b.n	8001558 <rx_pc_get+0x694>
		if((rxbuf_get_pc[i] == 0xA5) && (rxbuf_get_pc[i+1] == 0x5A)){
 8000ed2:	4a88      	ldr	r2, [pc, #544]	; (80010f4 <rx_pc_get+0x230>)
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2ba5      	cmp	r3, #165	; 0xa5
 8000edc:	f040 8339 	bne.w	8001552 <rx_pc_get+0x68e>
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a83      	ldr	r2, [pc, #524]	; (80010f4 <rx_pc_get+0x230>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	2b5a      	cmp	r3, #90	; 0x5a
 8000eea:	f040 8332 	bne.w	8001552 <rx_pc_get+0x68e>

			// Check for Standby
			if(rxbuf_get_pc[i+2] == 0x11){
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	4a80      	ldr	r2, [pc, #512]	; (80010f4 <rx_pc_get+0x230>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	2b11      	cmp	r3, #17
 8000ef8:	d13d      	bne.n	8000f76 <rx_pc_get+0xb2>
				get->direction = (rxbuf_get_pc[i+3]);
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3303      	adds	r3, #3
 8000efe:	4a7d      	ldr	r2, [pc, #500]	; (80010f4 <rx_pc_get+0x230>)
 8000f00:	5cd2      	ldrb	r2, [r2, r3]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				get->speed = (rxbuf_get_pc[i+4]);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	4a79      	ldr	r2, [pc, #484]	; (80010f4 <rx_pc_get+0x230>)
 8000f0e:	5cd2      	ldrb	r2, [r2, r3]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
				get->distance = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3305      	adds	r3, #5
 8000f1a:	4a76      	ldr	r2, [pc, #472]	; (80010f4 <rx_pc_get+0x230>)
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3306      	adds	r3, #6
 8000f26:	4973      	ldr	r1, [pc, #460]	; (80010f4 <rx_pc_get+0x230>)
 8000f28:	5ccb      	ldrb	r3, [r1, r3]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
				get->cmd = ROTATION;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4

				#ifdef	USE_FORWARDING
				for(int j=0; j<16; j++){
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	e00c      	b.n	8000f60 <rx_pc_get+0x9c>
					rx_buf_holder[j] = rxbuf_get_pc[i+j];
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a69      	ldr	r2, [pc, #420]	; (80010f4 <rx_pc_get+0x230>)
 8000f4e:	5cd1      	ldrb	r1, [r2, r3]
 8000f50:	4a69      	ldr	r2, [pc, #420]	; (80010f8 <rx_pc_get+0x234>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<16; j++){
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	ddef      	ble.n	8000f46 <rx_pc_get+0x82>
				}
				HAL_UART_Transmit(huart_ctrl, rx_buf_holder, 16, TIMEOUT_SEND);
 8000f66:	4b65      	ldr	r3, [pc, #404]	; (80010fc <rx_pc_get+0x238>)
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	4962      	ldr	r1, [pc, #392]	; (80010f8 <rx_pc_get+0x234>)
 8000f70:	f003 f872 	bl	8004058 <HAL_UART_Transmit>
 8000f74:	e2ed      	b.n	8001552 <rx_pc_get+0x68e>
				#endif
			}
			// Check for "Move" Instruction Given from Sensor
			else if(rxbuf_get_pc[i+2] == 0x15){
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	4a5e      	ldr	r2, [pc, #376]	; (80010f4 <rx_pc_get+0x230>)
 8000f7c:	5cd3      	ldrb	r3, [r2, r3]
 8000f7e:	2b15      	cmp	r3, #21
 8000f80:	f040 80fb 	bne.w	800117a <rx_pc_get+0x2b6>

				if((rxbuf_get_pc[i+3] & 0x80)) get->x_pos = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	3303      	adds	r3, #3
 8000f88:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <rx_pc_get+0x230>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da10      	bge.n	8000fb4 <rx_pc_get+0xf0>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3303      	adds	r3, #3
 8000f96:	4a57      	ldr	r2, [pc, #348]	; (80010f4 <rx_pc_get+0x230>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	4954      	ldr	r1, [pc, #336]	; (80010f4 <rx_pc_get+0x230>)
 8000fa4:	5ccb      	ldrb	r3, [r1, r3]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8000fb2:	e00f      	b.n	8000fd4 <rx_pc_get+0x110>
				else get->x_pos = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	3303      	adds	r3, #3
 8000fb8:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <rx_pc_get+0x230>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	494b      	ldr	r1, [pc, #300]	; (80010f4 <rx_pc_get+0x230>)
 8000fc6:	5ccb      	ldrb	r3, [r1, r3]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

				if((rxbuf_get_pc[i+5] & 0x80)) get->y_pos = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3305      	adds	r3, #5
 8000fd8:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <rx_pc_get+0x230>)
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da10      	bge.n	8001004 <rx_pc_get+0x140>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3305      	adds	r3, #5
 8000fe6:	4a43      	ldr	r2, [pc, #268]	; (80010f4 <rx_pc_get+0x230>)
 8000fe8:	5cd3      	ldrb	r3, [r2, r3]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3306      	adds	r3, #6
 8000ff2:	4940      	ldr	r1, [pc, #256]	; (80010f4 <rx_pc_get+0x230>)
 8000ff4:	5ccb      	ldrb	r3, [r1, r3]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8001002:	e00f      	b.n	8001024 <rx_pc_get+0x160>
				else get->y_pos = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	3305      	adds	r3, #5
 8001008:	4a3a      	ldr	r2, [pc, #232]	; (80010f4 <rx_pc_get+0x230>)
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21a      	sxth	r2, r3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	3306      	adds	r3, #6
 8001014:	4937      	ldr	r1, [pc, #220]	; (80010f4 <rx_pc_get+0x230>)
 8001016:	5ccb      	ldrb	r3, [r1, r3]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21a      	sxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

				if((rxbuf_get_pc[i+7] & 0x80)) get->t_pos = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	3307      	adds	r3, #7
 8001028:	4a32      	ldr	r2, [pc, #200]	; (80010f4 <rx_pc_get+0x230>)
 800102a:	5cd3      	ldrb	r3, [r2, r3]
 800102c:	b25b      	sxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	da10      	bge.n	8001054 <rx_pc_get+0x190>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3307      	adds	r3, #7
 8001036:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <rx_pc_get+0x230>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3308      	adds	r3, #8
 8001042:	492c      	ldr	r1, [pc, #176]	; (80010f4 <rx_pc_get+0x230>)
 8001044:	5ccb      	ldrb	r3, [r1, r3]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21a      	sxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8001052:	e00f      	b.n	8001074 <rx_pc_get+0x1b0>
				else get->t_pos = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	3307      	adds	r3, #7
 8001058:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <rx_pc_get+0x230>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	3308      	adds	r3, #8
 8001064:	4923      	ldr	r1, [pc, #140]	; (80010f4 <rx_pc_get+0x230>)
 8001066:	5ccb      	ldrb	r3, [r1, r3]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

				if((rxbuf_get_pc[i+9] & 0x80)) get->x_vel = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	3309      	adds	r3, #9
 8001078:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <rx_pc_get+0x230>)
 800107a:	5cd3      	ldrb	r3, [r2, r3]
 800107c:	b25b      	sxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	da10      	bge.n	80010a4 <rx_pc_get+0x1e0>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3309      	adds	r3, #9
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <rx_pc_get+0x230>)
 8001088:	5cd3      	ldrb	r3, [r2, r3]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	330a      	adds	r3, #10
 8001092:	4918      	ldr	r1, [pc, #96]	; (80010f4 <rx_pc_get+0x230>)
 8001094:	5ccb      	ldrb	r3, [r1, r3]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b21a      	sxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 80010a2:	e00f      	b.n	80010c4 <rx_pc_get+0x200>
				else get->x_vel = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	3309      	adds	r3, #9
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <rx_pc_get+0x230>)
 80010aa:	5cd3      	ldrb	r3, [r2, r3]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	330a      	adds	r3, #10
 80010b4:	490f      	ldr	r1, [pc, #60]	; (80010f4 <rx_pc_get+0x230>)
 80010b6:	5ccb      	ldrb	r3, [r1, r3]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

				if((rxbuf_get_pc[i+11] & 0x80)) get->y_vel = ((rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12])-(65536);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	330b      	adds	r3, #11
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <rx_pc_get+0x230>)
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da16      	bge.n	8001100 <rx_pc_get+0x23c>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	330b      	adds	r3, #11
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <rx_pc_get+0x230>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	330c      	adds	r3, #12
 80010e2:	4904      	ldr	r1, [pc, #16]	; (80010f4 <rx_pc_get+0x230>)
 80010e4:	5ccb      	ldrb	r3, [r1, r3]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80010f2:	e015      	b.n	8001120 <rx_pc_get+0x25c>
 80010f4:	20000128 	.word	0x20000128
 80010f8:	2000014c 	.word	0x2000014c
 80010fc:	20000138 	.word	0x20000138
				else get->y_vel = (rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	330b      	adds	r3, #11
 8001104:	4a80      	ldr	r2, [pc, #512]	; (8001308 <rx_pc_get+0x444>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	330c      	adds	r3, #12
 8001110:	497d      	ldr	r1, [pc, #500]	; (8001308 <rx_pc_get+0x444>)
 8001112:	5ccb      	ldrb	r3, [r1, r3]
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21a      	sxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

				if((rxbuf_get_pc[i+13] & 0x80)) get->t_vel = ((rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14])-(65536);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	330d      	adds	r3, #13
 8001124:	4a78      	ldr	r2, [pc, #480]	; (8001308 <rx_pc_get+0x444>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	da10      	bge.n	8001150 <rx_pc_get+0x28c>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	330d      	adds	r3, #13
 8001132:	4a75      	ldr	r2, [pc, #468]	; (8001308 <rx_pc_get+0x444>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	330e      	adds	r3, #14
 800113e:	4972      	ldr	r1, [pc, #456]	; (8001308 <rx_pc_get+0x444>)
 8001140:	5ccb      	ldrb	r3, [r1, r3]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 800114e:	e00f      	b.n	8001170 <rx_pc_get+0x2ac>
				else get->t_vel = (rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	330d      	adds	r3, #13
 8001154:	4a6c      	ldr	r2, [pc, #432]	; (8001308 <rx_pc_get+0x444>)
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b21a      	sxth	r2, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	330e      	adds	r3, #14
 8001160:	4969      	ldr	r1, [pc, #420]	; (8001308 <rx_pc_get+0x444>)
 8001162:	5ccb      	ldrb	r3, [r1, r3]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21a      	sxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
//					rx_buf_holder[j] = rxbuf_get_pc[i+j];
//				}
//				HAL_UART_Transmit(huart_pc, rx_buf_holder, 16, TIMEOUT_SEND);
//				#endif

				get->cmd = MOVE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8001178:	e1eb      	b.n	8001552 <rx_pc_get+0x68e>

			}

			// Check for "Move" Instruction Given from Jetson Nano
			else if(rxbuf_get_pc[i+2] == 0x12){
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3302      	adds	r3, #2
 800117e:	4a62      	ldr	r2, [pc, #392]	; (8001308 <rx_pc_get+0x444>)
 8001180:	5cd3      	ldrb	r3, [r2, r3]
 8001182:	2b12      	cmp	r3, #18
 8001184:	f040 80c8 	bne.w	8001318 <rx_pc_get+0x454>
				if((rxbuf_get_ctrl[i+3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	3303      	adds	r3, #3
 800118c:	4a5f      	ldr	r2, [pc, #380]	; (800130c <rx_pc_get+0x448>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	b25b      	sxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	da10      	bge.n	80011b8 <rx_pc_get+0x2f4>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3303      	adds	r3, #3
 800119a:	4a5c      	ldr	r2, [pc, #368]	; (800130c <rx_pc_get+0x448>)
 800119c:	5cd3      	ldrb	r3, [r2, r3]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	4959      	ldr	r1, [pc, #356]	; (800130c <rx_pc_get+0x448>)
 80011a8:	5ccb      	ldrb	r3, [r1, r3]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 80011b6:	e00f      	b.n	80011d8 <rx_pc_get+0x314>
				else get->x_pos = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	3303      	adds	r3, #3
 80011bc:	4a53      	ldr	r2, [pc, #332]	; (800130c <rx_pc_get+0x448>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	3304      	adds	r3, #4
 80011c8:	4950      	ldr	r1, [pc, #320]	; (800130c <rx_pc_get+0x448>)
 80011ca:	5ccb      	ldrb	r3, [r1, r3]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	3305      	adds	r3, #5
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <rx_pc_get+0x448>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da10      	bge.n	8001208 <rx_pc_get+0x344>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3305      	adds	r3, #5
 80011ea:	4a48      	ldr	r2, [pc, #288]	; (800130c <rx_pc_get+0x448>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3306      	adds	r3, #6
 80011f6:	4945      	ldr	r1, [pc, #276]	; (800130c <rx_pc_get+0x448>)
 80011f8:	5ccb      	ldrb	r3, [r1, r3]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21a      	sxth	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8001206:	e00f      	b.n	8001228 <rx_pc_get+0x364>
				else get->y_pos = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	3305      	adds	r3, #5
 800120c:	4a3f      	ldr	r2, [pc, #252]	; (800130c <rx_pc_get+0x448>)
 800120e:	5cd3      	ldrb	r3, [r2, r3]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	3306      	adds	r3, #6
 8001218:	493c      	ldr	r1, [pc, #240]	; (800130c <rx_pc_get+0x448>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->orientation = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3307      	adds	r3, #7
 800122c:	4a37      	ldr	r2, [pc, #220]	; (800130c <rx_pc_get+0x448>)
 800122e:	5cd3      	ldrb	r3, [r2, r3]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	da10      	bge.n	8001258 <rx_pc_get+0x394>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3307      	adds	r3, #7
 800123a:	4a34      	ldr	r2, [pc, #208]	; (800130c <rx_pc_get+0x448>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3308      	adds	r3, #8
 8001246:	4931      	ldr	r1, [pc, #196]	; (800130c <rx_pc_get+0x448>)
 8001248:	5ccb      	ldrb	r3, [r1, r3]
 800124a:	b21b      	sxth	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b21a      	sxth	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 8001256:	e00f      	b.n	8001278 <rx_pc_get+0x3b4>
				else get->orientation = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	3307      	adds	r3, #7
 800125c:	4a2b      	ldr	r2, [pc, #172]	; (800130c <rx_pc_get+0x448>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	3308      	adds	r3, #8
 8001268:	4928      	ldr	r1, [pc, #160]	; (800130c <rx_pc_get+0x448>)
 800126a:	5ccb      	ldrb	r3, [r1, r3]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21a      	sxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->orientation = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	3309      	adds	r3, #9
 800127c:	4a23      	ldr	r2, [pc, #140]	; (800130c <rx_pc_get+0x448>)
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	b25b      	sxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	da10      	bge.n	80012a8 <rx_pc_get+0x3e4>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3309      	adds	r3, #9
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <rx_pc_get+0x448>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21a      	sxth	r2, r3
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	330a      	adds	r3, #10
 8001296:	491d      	ldr	r1, [pc, #116]	; (800130c <rx_pc_get+0x448>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21a      	sxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 80012a6:	e00f      	b.n	80012c8 <rx_pc_get+0x404>
				else get->step = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	3309      	adds	r3, #9
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <rx_pc_get+0x448>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	330a      	adds	r3, #10
 80012b8:	4914      	ldr	r1, [pc, #80]	; (800130c <rx_pc_get+0x448>)
 80012ba:	5ccb      	ldrb	r3, [r1, r3]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8

				get->cmd = MOVE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4

				#ifdef	USE_FORWARDING
				for(int j=0; j<16; j++){
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e00c      	b.n	80012f0 <rx_pc_get+0x42c>
					rx_buf_holder[j] = rxbuf_get_pc[i+j];
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	4413      	add	r3, r2
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <rx_pc_get+0x444>)
 80012de:	5cd1      	ldrb	r1, [r2, r3]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <rx_pc_get+0x44c>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	460a      	mov	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<16; j++){
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	ddef      	ble.n	80012d6 <rx_pc_get+0x412>
				}
				HAL_UART_Transmit(huart_ctrl, rx_buf_holder, 16, TIMEOUT_SEND);
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <rx_pc_get+0x450>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	2364      	movs	r3, #100	; 0x64
 80012fc:	2210      	movs	r2, #16
 80012fe:	4904      	ldr	r1, [pc, #16]	; (8001310 <rx_pc_get+0x44c>)
 8001300:	f002 feaa 	bl	8004058 <HAL_UART_Transmit>
 8001304:	e125      	b.n	8001552 <rx_pc_get+0x68e>
 8001306:	bf00      	nop
 8001308:	20000128 	.word	0x20000128
 800130c:	2000013c 	.word	0x2000013c
 8001310:	2000014c 	.word	0x2000014c
 8001314:	20000138 	.word	0x20000138
				#endif
			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_pc[i+2] == 0x13){
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	3302      	adds	r3, #2
 800131c:	4a96      	ldr	r2, [pc, #600]	; (8001578 <rx_pc_get+0x6b4>)
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	2b13      	cmp	r3, #19
 8001322:	f040 80d3 	bne.w	80014cc <rx_pc_get+0x608>
				get->astar_id = (rxbuf_get_pc[i+3]);
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3303      	adds	r3, #3
 800132a:	4a93      	ldr	r2, [pc, #588]	; (8001578 <rx_pc_get+0x6b4>)
 800132c:	5cd2      	ldrb	r2, [r2, r3]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				get->astar_length = (rxbuf_get_pc[i+4]);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3304      	adds	r3, #4
 8001338:	4a8f      	ldr	r2, [pc, #572]	; (8001578 <rx_pc_get+0x6b4>)
 800133a:	5cd2      	ldrb	r2, [r2, r3]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5-4] = (rxbuf_get_pc[i+5]);
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	1d5a      	adds	r2, r3, #5
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3303      	adds	r3, #3
 800134a:	498b      	ldr	r1, [pc, #556]	; (8001578 <rx_pc_get+0x6b4>)
 800134c:	5ccb      	ldrb	r3, [r1, r3]
 800134e:	4619      	mov	r1, r3
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	3b04      	subs	r3, #4
 8001358:	4987      	ldr	r1, [pc, #540]	; (8001578 <rx_pc_get+0x6b4>)
 800135a:	5c89      	ldrb	r1, [r1, r2]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5-4] = (rxbuf_get_pc[i+6]);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	1d9a      	adds	r2, r3, #6
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	3303      	adds	r3, #3
 8001368:	4983      	ldr	r1, [pc, #524]	; (8001578 <rx_pc_get+0x6b4>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	4619      	mov	r1, r3
 800136e:	460b      	mov	r3, r1
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	3b04      	subs	r3, #4
 8001376:	4980      	ldr	r1, [pc, #512]	; (8001578 <rx_pc_get+0x6b4>)
 8001378:	5c89      	ldrb	r1, [r1, r2]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	460a      	mov	r2, r1
 8001380:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5-3] = (rxbuf_get_pc[i+7]);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	1dda      	adds	r2, r3, #7
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	3303      	adds	r3, #3
 800138c:	497a      	ldr	r1, [pc, #488]	; (8001578 <rx_pc_get+0x6b4>)
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	4619      	mov	r1, r3
 8001392:	460b      	mov	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	3b03      	subs	r3, #3
 800139a:	4977      	ldr	r1, [pc, #476]	; (8001578 <rx_pc_get+0x6b4>)
 800139c:	5c89      	ldrb	r1, [r1, r2]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5-3] = (rxbuf_get_pc[i+8]);
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f103 0208 	add.w	r2, r3, #8
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3303      	adds	r3, #3
 80013ac:	4972      	ldr	r1, [pc, #456]	; (8001578 <rx_pc_get+0x6b4>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	4619      	mov	r1, r3
 80013b2:	460b      	mov	r3, r1
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	3b03      	subs	r3, #3
 80013ba:	496f      	ldr	r1, [pc, #444]	; (8001578 <rx_pc_get+0x6b4>)
 80013bc:	5c89      	ldrb	r1, [r1, r2]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	460a      	mov	r2, r1
 80013c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5-2] = (rxbuf_get_pc[i+9]);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f103 0209 	add.w	r2, r3, #9
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3303      	adds	r3, #3
 80013d2:	4969      	ldr	r1, [pc, #420]	; (8001578 <rx_pc_get+0x6b4>)
 80013d4:	5ccb      	ldrb	r3, [r1, r3]
 80013d6:	4619      	mov	r1, r3
 80013d8:	460b      	mov	r3, r1
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	3b02      	subs	r3, #2
 80013e0:	4965      	ldr	r1, [pc, #404]	; (8001578 <rx_pc_get+0x6b4>)
 80013e2:	5c89      	ldrb	r1, [r1, r2]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5-2] = (rxbuf_get_pc[i+10]);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f103 020a 	add.w	r2, r3, #10
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3303      	adds	r3, #3
 80013f2:	4961      	ldr	r1, [pc, #388]	; (8001578 <rx_pc_get+0x6b4>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	4619      	mov	r1, r3
 80013f8:	460b      	mov	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3b02      	subs	r3, #2
 8001400:	495d      	ldr	r1, [pc, #372]	; (8001578 <rx_pc_get+0x6b4>)
 8001402:	5c89      	ldrb	r1, [r1, r2]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	460a      	mov	r2, r1
 800140a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5-1] = (rxbuf_get_pc[i+11]);
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f103 020b 	add.w	r2, r3, #11
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	3303      	adds	r3, #3
 8001418:	4957      	ldr	r1, [pc, #348]	; (8001578 <rx_pc_get+0x6b4>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	4619      	mov	r1, r3
 800141e:	460b      	mov	r3, r1
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3b01      	subs	r3, #1
 8001426:	4954      	ldr	r1, [pc, #336]	; (8001578 <rx_pc_get+0x6b4>)
 8001428:	5c89      	ldrb	r1, [r1, r2]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5-1] = (rxbuf_get_pc[i+12]);
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f103 020c 	add.w	r2, r3, #12
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3303      	adds	r3, #3
 8001438:	494f      	ldr	r1, [pc, #316]	; (8001578 <rx_pc_get+0x6b4>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	4619      	mov	r1, r3
 800143e:	460b      	mov	r3, r1
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3b01      	subs	r3, #1
 8001446:	494c      	ldr	r1, [pc, #304]	; (8001578 <rx_pc_get+0x6b4>)
 8001448:	5c89      	ldrb	r1, [r1, r2]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	460a      	mov	r2, r1
 8001450:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5-0] = (rxbuf_get_pc[i+13]);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f103 020d 	add.w	r2, r3, #13
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3303      	adds	r3, #3
 800145e:	4946      	ldr	r1, [pc, #280]	; (8001578 <rx_pc_get+0x6b4>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	4619      	mov	r1, r3
 8001464:	460b      	mov	r3, r1
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	4943      	ldr	r1, [pc, #268]	; (8001578 <rx_pc_get+0x6b4>)
 800146c:	5c89      	ldrb	r1, [r1, r2]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	54d1      	strb	r1, [r2, r3]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5-0] = (rxbuf_get_pc[i+14]);
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f103 020e 	add.w	r2, r3, #14
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	3303      	adds	r3, #3
 800147c:	493e      	ldr	r1, [pc, #248]	; (8001578 <rx_pc_get+0x6b4>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	4619      	mov	r1, r3
 8001482:	460b      	mov	r3, r1
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	493b      	ldr	r1, [pc, #236]	; (8001578 <rx_pc_get+0x6b4>)
 800148a:	5c89      	ldrb	r1, [r1, r2]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	460a      	mov	r2, r1
 8001492:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

				#ifdef	USE_FORWARDING
				for(int j=0; j<16; j++){
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	e00c      	b.n	80014b6 <rx_pc_get+0x5f2>
					rx_buf_holder[j] = rxbuf_get_pc[i+j];
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a35      	ldr	r2, [pc, #212]	; (8001578 <rx_pc_get+0x6b4>)
 80014a4:	5cd1      	ldrb	r1, [r2, r3]
 80014a6:	4a35      	ldr	r2, [pc, #212]	; (800157c <rx_pc_get+0x6b8>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4413      	add	r3, r2
 80014ac:	460a      	mov	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<16; j++){
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	3301      	adds	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	ddef      	ble.n	800149c <rx_pc_get+0x5d8>
				}
				HAL_UART_Transmit(huart_ctrl, rx_buf_holder, 16, TIMEOUT_SEND);
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <rx_pc_get+0x6bc>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	2364      	movs	r3, #100	; 0x64
 80014c2:	2210      	movs	r2, #16
 80014c4:	492d      	ldr	r1, [pc, #180]	; (800157c <rx_pc_get+0x6b8>)
 80014c6:	f002 fdc7 	bl	8004058 <HAL_UART_Transmit>
 80014ca:	e042      	b.n	8001552 <rx_pc_get+0x68e>
				#endif
			}

			// Check for Change Parameter Given from Jetson Nano
			else if(rxbuf_get_pc[i+2] == 0x14){
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3302      	adds	r3, #2
 80014d0:	4a29      	ldr	r2, [pc, #164]	; (8001578 <rx_pc_get+0x6b4>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	2b14      	cmp	r3, #20
 80014d6:	d13c      	bne.n	8001552 <rx_pc_get+0x68e>
				get->direction = (rxbuf_get_pc[i+3]);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	3303      	adds	r3, #3
 80014dc:	4a26      	ldr	r2, [pc, #152]	; (8001578 <rx_pc_get+0x6b4>)
 80014de:	5cd2      	ldrb	r2, [r2, r3]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				get->speed = (rxbuf_get_pc[i+4]);
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	4a23      	ldr	r2, [pc, #140]	; (8001578 <rx_pc_get+0x6b4>)
 80014ec:	5cd2      	ldrb	r2, [r2, r3]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
				get->distance = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	3305      	adds	r3, #5
 80014f8:	4a1f      	ldr	r2, [pc, #124]	; (8001578 <rx_pc_get+0x6b4>)
 80014fa:	5cd3      	ldrb	r3, [r2, r3]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3306      	adds	r3, #6
 8001504:	491c      	ldr	r1, [pc, #112]	; (8001578 <rx_pc_get+0x6b4>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21b      	sxth	r3, r3
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
				get->cmd = STANDBY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2202      	movs	r2, #2
 800151a:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4

				#ifdef	USE_FORWARDING
				for(int j=0; j<16; j++){
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e00c      	b.n	800153e <rx_pc_get+0x67a>
					rx_buf_holder[j] = rxbuf_get_pc[i+j];
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4413      	add	r3, r2
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <rx_pc_get+0x6b4>)
 800152c:	5cd1      	ldrb	r1, [r2, r3]
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <rx_pc_get+0x6b8>)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	460a      	mov	r2, r1
 8001536:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<16; j++){
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	ddef      	ble.n	8001524 <rx_pc_get+0x660>
				}
				HAL_UART_Transmit(huart_ctrl, rx_buf_holder, 16, TIMEOUT_SEND);
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <rx_pc_get+0x6bc>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	2210      	movs	r2, #16
 800154c:	490b      	ldr	r1, [pc, #44]	; (800157c <rx_pc_get+0x6b8>)
 800154e:	f002 fd83 	bl	8004058 <HAL_UART_Transmit>
	for(int i = 0; i < 16; i++){
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	f77f acb9 	ble.w	8000ed2 <rx_pc_get+0xe>
				#endif
			}

		}
	}
	HAL_UART_Receive_DMA(huart_pc, rxbuf_get_pc, 16);
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <rx_pc_get+0x6c0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2210      	movs	r2, #16
 8001566:	4904      	ldr	r1, [pc, #16]	; (8001578 <rx_pc_get+0x6b4>)
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fe00 	bl	800416e <HAL_UART_Receive_DMA>
}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000128 	.word	0x20000128
 800157c:	2000014c 	.word	0x2000014c
 8001580:	20000138 	.word	0x20000138
 8001584:	20000124 	.word	0x20000124

08001588 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

////////////////////////////////////// COMMUNICATION CALLBACK ////////////////////////////////////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <HAL_UART_RxCpltCallback+0x40>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d103      	bne.n	80015a0 <HAL_UART_RxCpltCallback+0x18>

		// Callback for BNO08X Data
		#ifdef USE_BNO08X
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	    BNO08X_GetData(&BNO08x_Data);
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <HAL_UART_RxCpltCallback+0x44>)
 800159a:	f7fe ff99 	bl	80004d0 <BNO08X_GetData>
		// Callback Receive data from STM32 Control
		#ifdef USE_COM_CONTROL
		rx_ctrl_get(&message_from_ctrl);
		#endif
	}
}
 800159e:	e00e      	b.n	80015be <HAL_UART_RxCpltCallback+0x36>
	} else if (huart == &huart1) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <HAL_UART_RxCpltCallback+0x48>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d103      	bne.n	80015b0 <HAL_UART_RxCpltCallback+0x28>
		rx_pc_get(&message_from_pc);
 80015a8:	480a      	ldr	r0, [pc, #40]	; (80015d4 <HAL_UART_RxCpltCallback+0x4c>)
 80015aa:	f7ff fc8b 	bl	8000ec4 <rx_pc_get>
}
 80015ae:	e006      	b.n	80015be <HAL_UART_RxCpltCallback+0x36>
	} else if(huart == &huart6){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_UART_RxCpltCallback+0x50>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d102      	bne.n	80015be <HAL_UART_RxCpltCallback+0x36>
		rx_ctrl_get(&message_from_ctrl);
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <HAL_UART_RxCpltCallback+0x54>)
 80015ba:	f7ff f8d1 	bl	8000760 <rx_ctrl_get>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000041c 	.word	0x2000041c
 80015cc:	2000015c 	.word	0x2000015c
 80015d0:	200003d4 	.word	0x200003d4
 80015d4:	20000170 	.word	0x20000170
 80015d8:	20000464 	.word	0x20000464
 80015dc:	20000258 	.word	0x20000258

080015e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e6:	f000 fd6f 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ea:	f000 f833 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ee:	f000 fa19 	bl	8001a24 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f2:	f000 f9d9 	bl	80019a8 <MX_DMA_Init>
  MX_ADC1_Init();
 80015f6:	f000 f897 	bl	8001728 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80015fa:	f000 f957 	bl	80018ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015fe:	f000 f97f 	bl	8001900 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001602:	f000 f9a7 	bl	8001954 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001606:	f000 f901 	bl	800180c <MX_TIM1_Init>
  MX_SPI1_Init();
 800160a:	f000 f8c7 	bl	800179c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////// SENSOR INITIALIZATION ////////////////////////////////////

    // BNO08X initialization
    #ifdef USE_BNO08X
    BNO08X_Init(&huart2);
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <main+0x60>)
 8001610:	f7fe ffd0 	bl	80005b4 <BNO08X_Init>
    DHT_Start();
    #endif

    // Volt & Current Initialization
    #ifdef USE_VOLT_CURRENT
    VoltCurrent_Init(&hadc1);
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <main+0x64>)
 8001616:	f7fe ffe7 	bl	80005e8 <VoltCurrent_Init>
    hx711_start(&Loadcell_Data, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1);
    #endif

    // Initialize Communication to Control
    #ifdef USE_COM_CONTROL
    komunikasi_ctrl_init(&huart6);
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <main+0x68>)
 800161c:	f7fe fff6 	bl	800060c <komunikasi_ctrl_init>
    rx_ctrl_start_get();
 8001620:	f7ff f88e 	bl	8000740 <rx_ctrl_start_get>
    #endif

    // Initialize Communication to PC
    #ifdef USE_COM_PC
    komunikasi_pc_init(&huart1);
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <main+0x6c>)
 8001626:	f7ff fc2d 	bl	8000e84 <komunikasi_pc_init>
    rx_pc_start_get();
 800162a:	f7ff fc3b 	bl	8000ea4 <rx_pc_start_get>

	  ////////////////////////////////////// SENDING DATA TO CONTROL ///////////////////////////

	  // Sending BNO08X Data

	  tx_ctrl_send_BNO08X(BNO08x_Data);
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <main+0x70>)
 8001630:	8a1a      	ldrh	r2, [r3, #16]
 8001632:	f8ad 2000 	strh.w	r2, [sp]
 8001636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001638:	f7ff f818 	bl	800066c <tx_ctrl_send_BNO08X>
 800163c:	e7f7      	b.n	800162e <main+0x4e>
 800163e:	bf00      	nop
 8001640:	2000041c 	.word	0x2000041c
 8001644:	20000344 	.word	0x20000344
 8001648:	20000464 	.word	0x20000464
 800164c:	200003d4 	.word	0x200003d4
 8001650:	2000015c 	.word	0x2000015c

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2230      	movs	r2, #48	; 0x30
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f003 faba 	bl	8004bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <SystemClock_Config+0xcc>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a27      	ldr	r2, [pc, #156]	; (8001720 <SystemClock_Config+0xcc>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <SystemClock_Config+0xcc>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <SystemClock_Config+0xd0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016a0:	4a20      	ldr	r2, [pc, #128]	; (8001724 <SystemClock_Config+0xd0>)
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <SystemClock_Config+0xd0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016bc:	2310      	movs	r3, #16
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c0:	2302      	movs	r3, #2
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c4:	2300      	movs	r3, #0
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016c8:	2308      	movs	r3, #8
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80016cc:	2354      	movs	r3, #84	; 0x54
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d4:	2304      	movs	r3, #4
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fcdf 	bl	80030a0 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016e8:	f000 fa44 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2102      	movs	r1, #2
 8001708:	4618      	mov	r0, r3
 800170a:	f001 ff41 	bl	8003590 <HAL_RCC_ClockConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001714:	f000 fa2e 	bl	8001b74 <Error_Handler>
  }
}
 8001718:	bf00      	nop
 800171a:	3750      	adds	r7, #80	; 0x50
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	40007000 	.word	0x40007000

08001728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <MX_ADC1_Init+0x68>)
 800172e:	4a19      	ldr	r2, [pc, #100]	; (8001794 <MX_ADC1_Init+0x6c>)
 8001730:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_ADC1_Init+0x68>)
 8001734:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <MX_ADC1_Init+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_ADC1_Init+0x68>)
 8001742:	2201      	movs	r2, #1
 8001744:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_ADC1_Init+0x68>)
 8001748:	2201      	movs	r2, #1
 800174a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <MX_ADC1_Init+0x68>)
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_ADC1_Init+0x68>)
 8001756:	2200      	movs	r2, #0
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <MX_ADC1_Init+0x68>)
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <MX_ADC1_Init+0x70>)
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_ADC1_Init+0x68>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <MX_ADC1_Init+0x68>)
 8001768:	2201      	movs	r2, #1
 800176a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_ADC1_Init+0x68>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_ADC1_Init+0x68>)
 8001776:	2201      	movs	r2, #1
 8001778:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_ADC1_Init+0x68>)
 800177c:	f000 fd16 	bl	80021ac <HAL_ADC_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001786:	f000 f9f5 	bl	8001b74 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000344 	.word	0x20000344
 8001794:	40012000 	.word	0x40012000
 8001798:	0f000001 	.word	0x0f000001

0800179c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_SPI1_Init+0x68>)
 80017a2:	4a19      	ldr	r2, [pc, #100]	; (8001808 <MX_SPI1_Init+0x6c>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_SPI1_Init+0x68>)
 80017a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_SPI1_Init+0x68>)
 80017b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_SPI1_Init+0x68>)
 80017b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_SPI1_Init+0x68>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_SPI1_Init+0x68>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_SPI1_Init+0x68>)
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_SPI1_Init+0x68>)
 80017d4:	2238      	movs	r2, #56	; 0x38
 80017d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <MX_SPI1_Init+0x68>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_SPI1_Init+0x68>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MX_SPI1_Init+0x68>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_SPI1_Init+0x68>)
 80017ec:	220a      	movs	r2, #10
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_SPI1_Init+0x68>)
 80017f2:	f002 f8ad 	bl	8003950 <HAL_SPI_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80017fc:	f000 f9ba 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000084 	.word	0x20000084
 8001808:	40013000 	.word	0x40013000

0800180c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_TIM1_Init+0x98>)
 800182a:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <MX_TIM1_Init+0x9c>)
 800182c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_TIM1_Init+0x98>)
 8001830:	2253      	movs	r2, #83	; 0x53
 8001832:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_TIM1_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_TIM1_Init+0x98>)
 800183c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001840:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_TIM1_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_TIM1_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_TIM1_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001854:	4813      	ldr	r0, [pc, #76]	; (80018a4 <MX_TIM1_Init+0x98>)
 8001856:	f002 f904 	bl	8003a62 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001860:	f000 f988 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_TIM1_Init+0x98>)
 8001872:	f002 f945 	bl	8003b00 <HAL_TIM_ConfigClockSource>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800187c:	f000 f97a 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_TIM1_Init+0x98>)
 800188e:	f002 fb25 	bl	8003edc <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001898:	f000 f96c 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000038c 	.word	0x2000038c
 80018a8:	40010000 	.word	0x40010000

080018ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_USART1_UART_Init+0x50>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f002 fb68 	bl	8003fb8 <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ee:	f000 f941 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200003d4 	.word	0x200003d4
 80018fc:	40011000 	.word	0x40011000

08001900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001938:	f002 fb3e 	bl	8003fb8 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f000 f917 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000041c 	.word	0x2000041c
 8001950:	40004400 	.word	0x40004400

08001954 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_USART6_UART_Init+0x50>)
 800195c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 800198c:	f002 fb14 	bl	8003fb8 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001996:	f000 f8ed 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000464 	.word	0x20000464
 80019a4:	40011400 	.word	0x40011400

080019a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_DMA_Init+0x78>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <MX_DMA_Init+0x78>)
 80019b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_DMA_Init+0x78>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_DMA_Init+0x78>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <MX_DMA_Init+0x78>)
 80019d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_DMA_Init+0x78>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2010      	movs	r0, #16
 80019ec:	f000 fdf9 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019f0:	2010      	movs	r0, #16
 80019f2:	f000 fe12 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2039      	movs	r0, #57	; 0x39
 80019fc:	f000 fdf1 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a00:	2039      	movs	r0, #57	; 0x39
 8001a02:	f000 fe0a 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	203a      	movs	r0, #58	; 0x3a
 8001a0c:	f000 fde9 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a10:	203a      	movs	r0, #58	; 0x3a
 8001a12:	f000 fe02 	bl	800261a <HAL_NVIC_EnableIRQ>

}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a48      	ldr	r2, [pc, #288]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b46      	ldr	r3, [pc, #280]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a41      	ldr	r2, [pc, #260]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a3a      	ldr	r2, [pc, #232]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <MX_GPIO_Init+0x140>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ab0:	482d      	ldr	r0, [pc, #180]	; (8001b68 <MX_GPIO_Init+0x144>)
 8001ab2:	f001 fac1 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MX7665_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f24e 51f8 	movw	r1, #58872	; 0xe5f8
 8001abc:	482b      	ldr	r0, [pc, #172]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001abe:	f001 fabb 	bl	8003038 <HAL_GPIO_WritePin>
                          |MUL_SCK_Pin|MUL_Latch_Pin|MUL_MOSI_Pin|LCD_CS_Pin
                          |LCD_RS_Pin|LCD_WR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ac8:	4829      	ldr	r0, [pc, #164]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001aca:	f001 fab5 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8001ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4820      	ldr	r0, [pc, #128]	; (8001b68 <MX_GPIO_Init+0x144>)
 8001ae8:	f001 f922 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8001aec:	2301      	movs	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	481c      	ldr	r0, [pc, #112]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001b00:	f001 f916 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : MX7665_Pin LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin
                           MUL_SCK_Pin MUL_Latch_Pin MUL_MOSI_Pin LCD_CS_Pin
                           LCD_RS_Pin LCD_WR_Pin */
  GPIO_InitStruct.Pin = MX7665_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin
 8001b04:	f24e 53f8 	movw	r3, #58872	; 0xe5f8
 8001b08:	617b      	str	r3, [r7, #20]
                          |MUL_SCK_Pin|MUL_Latch_Pin|MUL_MOSI_Pin|LCD_CS_Pin
                          |LCD_RS_Pin|LCD_WR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001b1e:	f001 f907 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001b3c:	f001 f8f8 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RD_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin;
 8001b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RD_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001b56:	f001 f8eb 	bl	8002d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020000 	.word	0x40020000

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_ADC_MspInit+0x7c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d127      	bne.n	8001c42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_ADC_MspInit+0x80>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <HAL_ADC_MspInit+0x80>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_ADC_MspInit+0x80>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_ADC_MspInit+0x80>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <HAL_ADC_MspInit+0x80>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_ADC_MspInit+0x80>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001c2a:	2312      	movs	r3, #18
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_ADC_MspInit+0x84>)
 8001c3e:	f001 f877 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40012000 	.word	0x40012000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000

08001c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_SPI_MspInit+0x84>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d12b      	bne.n	8001cd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cb2:	2360      	movs	r3, #96	; 0x60
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <HAL_SPI_MspInit+0x8c>)
 8001cce:	f001 f82f 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40013000 	.word	0x40013000
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_TIM_Base_MspInit+0x3c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10d      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_TIM_Base_MspInit+0x40>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_TIM_Base_MspInit+0x40>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_TIM_Base_MspInit+0x40>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08e      	sub	sp, #56	; 0x38
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <HAL_UART_MspInit+0x268>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d15c      	bne.n	8001e08 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
 8001d52:	4b91      	ldr	r3, [pc, #580]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a90      	ldr	r2, [pc, #576]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001d58:	f043 0310 	orr.w	r3, r3, #16
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	623b      	str	r3, [r7, #32]
 8001d68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a89      	ldr	r2, [pc, #548]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b87      	ldr	r3, [pc, #540]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	487e      	ldr	r0, [pc, #504]	; (8001f9c <HAL_UART_MspInit+0x270>)
 8001da4:	f000 ffc4 	bl	8002d30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001da8:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001daa:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <HAL_UART_MspInit+0x278>)
 8001dac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001db0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001db4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db6:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dbc:	4b78      	ldr	r3, [pc, #480]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc2:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dca:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd0:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ddc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dde:	4b70      	ldr	r3, [pc, #448]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de4:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001dea:	486d      	ldr	r0, [pc, #436]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001dec:	f000 fc30 	bl	8002650 <HAL_DMA_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001df6:	f7ff febd 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a68      	ldr	r2, [pc, #416]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001dfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e00:	4a67      	ldr	r2, [pc, #412]	; (8001fa0 <HAL_UART_MspInit+0x274>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e06:	e0c1      	b.n	8001f8c <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a66      	ldr	r2, [pc, #408]	; (8001fa8 <HAL_UART_MspInit+0x27c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d15b      	bne.n	8001eca <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	4b60      	ldr	r3, [pc, #384]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a5f      	ldr	r2, [pc, #380]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e62:	4619      	mov	r1, r3
 8001e64:	484d      	ldr	r0, [pc, #308]	; (8001f9c <HAL_UART_MspInit+0x270>)
 8001e66:	f000 ff63 	bl	8002d30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e6a:	4b50      	ldr	r3, [pc, #320]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001e6c:	4a50      	ldr	r2, [pc, #320]	; (8001fb0 <HAL_UART_MspInit+0x284>)
 8001e6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e70:	4b4e      	ldr	r3, [pc, #312]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e76:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e78:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8c:	4b47      	ldr	r3, [pc, #284]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea6:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001eac:	483f      	ldr	r0, [pc, #252]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001eae:	f000 fbcf 	bl	8002650 <HAL_DMA_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_UART_MspInit+0x190>
      Error_Handler();
 8001eb8:	f7ff fe5c 	bl	8001b74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_UART_MspInit+0x280>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ec8:	e060      	b.n	8001f8c <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART6)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <HAL_UART_MspInit+0x288>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d15b      	bne.n	8001f8c <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	4a2e      	ldr	r2, [pc, #184]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001ede:	f043 0320 	orr.w	r3, r3, #32
 8001ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6313      	str	r3, [r2, #48]	; 0x30
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_UART_MspInit+0x26c>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f1e:	2308      	movs	r3, #8
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	481c      	ldr	r0, [pc, #112]	; (8001f9c <HAL_UART_MspInit+0x270>)
 8001f2a:	f000 ff01 	bl	8002d30 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f30:	4a22      	ldr	r2, [pc, #136]	; (8001fbc <HAL_UART_MspInit+0x290>)
 8001f32:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f36:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001f3a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f4e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f56:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001f70:	4811      	ldr	r0, [pc, #68]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f72:	f000 fb6d 	bl	8002650 <HAL_DMA_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_UART_MspInit+0x254>
      Error_Handler();
 8001f7c:	f7ff fdfa 	bl	8001b74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f84:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_UART_MspInit+0x28c>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f8c:	bf00      	nop
 8001f8e:	3738      	adds	r7, #56	; 0x38
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	200004ac 	.word	0x200004ac
 8001fa4:	40026440 	.word	0x40026440
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	2000050c 	.word	0x2000050c
 8001fb0:	40026088 	.word	0x40026088
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	2000056c 	.word	0x2000056c
 8001fbc:	40026428 	.word	0x40026428

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200c:	f000 f8ae 	bl	800216c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <DMA1_Stream5_IRQHandler+0x10>)
 800201a:	f000 fc1f 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000050c 	.word	0x2000050c

08002028 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <DMA2_Stream1_IRQHandler+0x10>)
 800202e:	f000 fc15 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000056c 	.word	0x2000056c

0800203c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <DMA2_Stream2_IRQHandler+0x10>)
 8002042:	f000 fc0b 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200004ac 	.word	0x200004ac

08002050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <SystemInit+0x20>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <SystemInit+0x20>)
 800205c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002078:	f7ff ffea 	bl	8002050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800207e:	490d      	ldr	r1, [pc, #52]	; (80020b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002094:	4c0a      	ldr	r4, [pc, #40]	; (80020c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020a2:	f002 fda3 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a6:	f7ff fa9b 	bl	80015e0 <main>
  bx  lr    
 80020aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020b8:	08004cac 	.word	0x08004cac
  ldr r2, =_sbss
 80020bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80020c0:	200005d0 	.word	0x200005d0

080020c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_Init+0x40>)
 80020d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_Init+0x40>)
 80020de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_Init+0x40>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 fa6b 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	200f      	movs	r0, #15
 80020f8:	f000 f808 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fd40 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fa83 	bl	8002636 <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002148:	f000 fa4b 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000000 	.word	0x20000000
 8002164:	20000008 	.word	0x20000008
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x20>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x24>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_IncTick+0x24>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008
 8002190:	200005cc 	.word	0x200005cc

08002194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_GetTick+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200005cc 	.word	0x200005cc

080021ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e033      	b.n	800222a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fd00 	bl	8001bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	f043 0202 	orr.w	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f818 	bl	8002234 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
 800221a:	e001      	b.n	8002220 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223c:	4b79      	ldr	r3, [pc, #484]	; (8002424 <ADC_Init+0x1f0>)
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800228c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6899      	ldr	r1, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	4a58      	ldr	r2, [pc, #352]	; (8002428 <ADC_Init+0x1f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e00f      	b.n	8002332 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002330:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0202 	bic.w	r2, r2, #2
 8002340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e1b      	ldrb	r3, [r3, #24]
 800234c:	005a      	lsls	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800237e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	3b01      	subs	r3, #1
 800238c:	035a      	lsls	r2, r3, #13
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	e007      	b.n	80023a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	051a      	lsls	r2, r3, #20
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ea:	025a      	lsls	r2, r3, #9
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6899      	ldr	r1, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	029a      	lsls	r2, r3, #10
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40012300 	.word	0x40012300
 8002428:	0f000001 	.word	0x0f000001

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff3e 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff31 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff fd9a 	bl	8002194 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e099      	b.n	80027a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268c:	e00f      	b.n	80026ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268e:	f7ff fd81 	bl	8002194 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b05      	cmp	r3, #5
 800269a:	d908      	bls.n	80026ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e078      	b.n	80027a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e8      	bne.n	800268e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_DMA_Init+0x158>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	2b04      	cmp	r3, #4
 8002706:	d107      	bne.n	8002718 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	4313      	orrs	r3, r2
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b04      	cmp	r3, #4
 8002740:	d117      	bne.n	8002772 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fa6f 	bl	8002c38 <DMA_CheckFifoParam>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800276e:	2301      	movs	r3, #1
 8002770:	e016      	b.n	80027a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa26 	bl	8002bcc <DMA_CalcBaseAndBitshift>
 8002780:	4603      	mov	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	223f      	movs	r2, #63	; 0x3f
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	f010803f 	.word	0xf010803f

080027ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_DMA_Start_IT+0x26>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e040      	b.n	8002854 <HAL_DMA_Start_IT+0xa8>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d12f      	bne.n	8002846 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f9b8 	bl	8002b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	223f      	movs	r2, #63	; 0x3f
 8002806:	409a      	lsls	r2, r3
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0216 	orr.w	r2, r2, #22
 800281a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0208 	orr.w	r2, r2, #8
 8002832:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e005      	b.n	8002852 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800284e:	2302      	movs	r3, #2
 8002850:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002852:	7dfb      	ldrb	r3, [r7, #23]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002868:	4b8e      	ldr	r3, [pc, #568]	; (8002aa4 <HAL_DMA_IRQHandler+0x248>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a8e      	ldr	r2, [pc, #568]	; (8002aa8 <HAL_DMA_IRQHandler+0x24c>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a9b      	lsrs	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2208      	movs	r2, #8
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	2208      	movs	r2, #8
 80028b6:	409a      	lsls	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2201      	movs	r2, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	2201      	movs	r2, #1
 80028ec:	409a      	lsls	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	2204      	movs	r2, #4
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d012      	beq.n	8002934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00b      	beq.n	8002934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	2204      	movs	r2, #4
 8002922:	409a      	lsls	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	f043 0204 	orr.w	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	2210      	movs	r2, #16
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d043      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d03c      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	2210      	movs	r2, #16
 8002958:	409a      	lsls	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d018      	beq.n	800299e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d024      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
 800298a:	e01f      	b.n	80029cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
 800299c:	e016      	b.n	80029cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0208 	bic.w	r2, r2, #8
 80029ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	2220      	movs	r2, #32
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 808f 	beq.w	8002afc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8087 	beq.w	8002afc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2220      	movs	r2, #32
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d136      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0216 	bic.w	r2, r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_DMA_IRQHandler+0x1da>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	223f      	movs	r2, #63	; 0x3f
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d07e      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
        }
        return;
 8002a72:	e079      	b.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d031      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
 8002aa0:	e02c      	b.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
 8002aa2:	bf00      	nop
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e01e      	b.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0210 	bic.w	r2, r2, #16
 8002ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d032      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2205      	movs	r2, #5
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d307      	bcc.n	8002b44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f2      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x2cc>
 8002b42:	e000      	b.n	8002b46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
 8002b66:	e000      	b.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b68:	bf00      	nop
    }
  }
}
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d108      	bne.n	8002bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bae:	e007      	b.n	8002bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	3b10      	subs	r3, #16
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <DMA_CalcBaseAndBitshift+0x64>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <DMA_CalcBaseAndBitshift+0x68>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d909      	bls.n	8002c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	1d1a      	adds	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c0c:	e007      	b.n	8002c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	aaaaaaab 	.word	0xaaaaaaab
 8002c34:	08004c94 	.word	0x08004c94

08002c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11f      	bne.n	8002c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d856      	bhi.n	8002d06 <DMA_CheckFifoParam+0xce>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <DMA_CheckFifoParam+0x28>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c83 	.word	0x08002c83
 8002c68:	08002c71 	.word	0x08002c71
 8002c6c:	08002d07 	.word	0x08002d07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d046      	beq.n	8002d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c80:	e043      	b.n	8002d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c8a:	d140      	bne.n	8002d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e03d      	b.n	8002d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c9a:	d121      	bne.n	8002ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d837      	bhi.n	8002d12 <DMA_CheckFifoParam+0xda>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <DMA_CheckFifoParam+0x70>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002cb9 	.word	0x08002cb9
 8002cac:	08002cbf 	.word	0x08002cbf
 8002cb0:	08002cb9 	.word	0x08002cb9
 8002cb4:	08002cd1 	.word	0x08002cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e030      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d025      	beq.n	8002d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cce:	e022      	b.n	8002d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd8:	d11f      	bne.n	8002d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cde:	e01c      	b.n	8002d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d903      	bls.n	8002cee <DMA_CheckFifoParam+0xb6>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d003      	beq.n	8002cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cec:	e018      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf2:	e015      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      break;
 8002d04:	e00b      	b.n	8002d1e <DMA_CheckFifoParam+0xe6>
      break;
 8002d06:	bf00      	nop
 8002d08:	e00a      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e008      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e006      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e004      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e159      	b.n	8003000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	f040 8148 	bne.w	8002ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d005      	beq.n	8002d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d130      	bne.n	8002de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db8:	2201      	movs	r2, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 0201 	and.w	r2, r3, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d017      	beq.n	8002e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d123      	bne.n	8002e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	08da      	lsrs	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3208      	adds	r2, #8
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	08da      	lsrs	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3208      	adds	r2, #8
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0203 	and.w	r2, r3, #3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a2 	beq.w	8002ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a56      	ldr	r2, [pc, #344]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b54      	ldr	r3, [pc, #336]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed2:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_GPIO_Init+0x2ec>)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a49      	ldr	r2, [pc, #292]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x202>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a48      	ldr	r2, [pc, #288]	; (8003024 <HAL_GPIO_Init+0x2f4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x1fe>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a47      	ldr	r2, [pc, #284]	; (8003028 <HAL_GPIO_Init+0x2f8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x1fa>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a46      	ldr	r2, [pc, #280]	; (800302c <HAL_GPIO_Init+0x2fc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x1f6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a45      	ldr	r2, [pc, #276]	; (8003030 <HAL_GPIO_Init+0x300>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x1f2>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e008      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e006      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f26:	2303      	movs	r3, #3
 8002f28:	e004      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e002      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x204>
 8002f32:	2300      	movs	r3, #0
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	f002 0203 	and.w	r2, r2, #3
 8002f3a:	0092      	lsls	r2, r2, #2
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f44:	4935      	ldr	r1, [pc, #212]	; (800301c <HAL_GPIO_Init+0x2ec>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	3302      	adds	r3, #2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f76:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa0:	4a24      	ldr	r2, [pc, #144]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff4:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_GPIO_Init+0x304>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	f67f aea2 	bls.w	8002d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800
 8003020:	40020000 	.word	0x40020000
 8003024:	40020400 	.word	0x40020400
 8003028:	40020800 	.word	0x40020800
 800302c:	40020c00 	.word	0x40020c00
 8003030:	40021000 	.word	0x40021000
 8003034:	40013c00 	.word	0x40013c00

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003054:	e003      	b.n	800305e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	041a      	lsls	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	619a      	str	r2, [r3, #24]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800307c:	887a      	ldrh	r2, [r7, #2]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4013      	ands	r3, r2
 8003082:	041a      	lsls	r2, r3, #16
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43d9      	mvns	r1, r3
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	400b      	ands	r3, r1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	619a      	str	r2, [r3, #24]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e267      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030be:	4b88      	ldr	r3, [pc, #544]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ca:	4b85      	ldr	r3, [pc, #532]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d112      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	4b82      	ldr	r3, [pc, #520]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e2:	d10b      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b7e      	ldr	r3, [pc, #504]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x108>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d157      	bne.n	80031a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e242      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d106      	bne.n	8003114 <HAL_RCC_OscConfig+0x74>
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x98>
 800311e:	4b70      	ldr	r3, [pc, #448]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6f      	ldr	r2, [pc, #444]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6c      	ldr	r2, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003138:	4b69      	ldr	r3, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a68      	ldr	r2, [pc, #416]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b66      	ldr	r3, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7ff f81c 	bl	8002194 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff f818 	bl	8002194 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e207      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xc0>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7ff f808 	bl	8002194 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003188:	f7ff f804 	bl	8002194 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1f3      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b51      	ldr	r3, [pc, #324]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0xe8>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b6:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b44      	ldr	r3, [pc, #272]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1c7      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b3b      	ldr	r3, [pc, #236]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4937      	ldr	r1, [pc, #220]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e03a      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCC_OscConfig+0x244>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe ffbd 	bl	8002194 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321e:	f7fe ffb9 	bl	8002194 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1a8      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4925      	ldr	r1, [pc, #148]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCC_OscConfig+0x244>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe ff9c 	bl	8002194 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003260:	f7fe ff98 	bl	8002194 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e187      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d036      	beq.n	80032f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_RCC_OscConfig+0x248>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fe ff7c 	bl	8002194 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fe ff78 	bl	8002194 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e167      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x240>)
 80032b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x200>
 80032be:	e01b      	b.n	80032f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_OscConfig+0x248>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fe ff65 	bl	8002194 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	e00e      	b.n	80032ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ce:	f7fe ff61 	bl	8002194 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d907      	bls.n	80032ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e150      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
 80032e0:	40023800 	.word	0x40023800
 80032e4:	42470000 	.word	0x42470000
 80032e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ec:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ea      	bne.n	80032ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8097 	beq.w	8003434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003306:	2300      	movs	r3, #0
 8003308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330a:	4b81      	ldr	r3, [pc, #516]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10f      	bne.n	8003336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	4b7d      	ldr	r3, [pc, #500]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a7c      	ldr	r2, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b7a      	ldr	r3, [pc, #488]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003332:	2301      	movs	r3, #1
 8003334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b77      	ldr	r3, [pc, #476]	; (8003514 <HAL_RCC_OscConfig+0x474>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d118      	bne.n	8003374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003342:	4b74      	ldr	r3, [pc, #464]	; (8003514 <HAL_RCC_OscConfig+0x474>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a73      	ldr	r2, [pc, #460]	; (8003514 <HAL_RCC_OscConfig+0x474>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334e:	f7fe ff21 	bl	8002194 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7fe ff1d 	bl	8002194 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e10c      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <HAL_RCC_OscConfig+0x474>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d106      	bne.n	800338a <HAL_RCC_OscConfig+0x2ea>
 800337c:	4b64      	ldr	r3, [pc, #400]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	4a63      	ldr	r2, [pc, #396]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	6713      	str	r3, [r2, #112]	; 0x70
 8003388:	e01c      	b.n	80033c4 <HAL_RCC_OscConfig+0x324>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b05      	cmp	r3, #5
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0x30c>
 8003392:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a5e      	ldr	r2, [pc, #376]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003398:	f043 0304 	orr.w	r3, r3, #4
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a5b      	ldr	r2, [pc, #364]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0x324>
 80033ac:	4b58      	ldr	r3, [pc, #352]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a57      	ldr	r2, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	4b55      	ldr	r3, [pc, #340]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033be:	f023 0304 	bic.w	r3, r3, #4
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe fee2 	bl	8002194 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d4:	f7fe fede 	bl	8002194 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e0cb      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ea:	4b49      	ldr	r3, [pc, #292]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ee      	beq.n	80033d4 <HAL_RCC_OscConfig+0x334>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f8:	f7fe fecc 	bl	8002194 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe fec8 	bl	8002194 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0b5      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ee      	bne.n	8003400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003428:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	4a38      	ldr	r2, [pc, #224]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 800342e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a1 	beq.w	8003580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343e:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b08      	cmp	r3, #8
 8003448:	d05c      	beq.n	8003504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d141      	bne.n	80034d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fe9c 	bl	8002194 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7fe fe98 	bl	8002194 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e087      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	4b27      	ldr	r3, [pc, #156]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	085b      	lsrs	r3, r3, #1
 8003496:	3b01      	subs	r3, #1
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	491b      	ldr	r1, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe fe71 	bl	8002194 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe fe6d 	bl	8002194 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e05c      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x416>
 80034d4:	e054      	b.n	8003580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_OscConfig+0x478>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fe5a 	bl	8002194 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe fe56 	bl	8002194 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e045      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x470>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x444>
 8003502:	e03d      	b.n	8003580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e038      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
 8003510:	40023800 	.word	0x40023800
 8003514:	40007000 	.word	0x40007000
 8003518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCC_OscConfig+0x4ec>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d028      	beq.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d121      	bne.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d11a      	bne.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003554:	4293      	cmp	r3, r2
 8003556:	d111      	bne.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	3b01      	subs	r3, #1
 8003566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d107      	bne.n	800357c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800

08003590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0cc      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a4:	4b68      	ldr	r3, [pc, #416]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d90c      	bls.n	80035cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b65      	ldr	r3, [pc, #404]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b8      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e4:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a52      	ldr	r2, [pc, #328]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	494d      	ldr	r1, [pc, #308]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d044      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d119      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d003      	beq.n	800364e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364a:	2b03      	cmp	r3, #3
 800364c:	d107      	bne.n	800365e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e06f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365e:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e067      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4934      	ldr	r1, [pc, #208]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003680:	f7fe fd88 	bl	8002194 <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	e00a      	b.n	800369e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003688:	f7fe fd84 	bl	8002194 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e04f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 020c 	and.w	r2, r3, #12
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d1eb      	bne.n	8003688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d20c      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b22      	ldr	r3, [pc, #136]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e032      	b.n	800373e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4916      	ldr	r1, [pc, #88]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	490e      	ldr	r1, [pc, #56]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003716:	f000 f821 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800371a:	4602      	mov	r2, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	490a      	ldr	r1, [pc, #40]	; (8003750 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	5ccb      	ldrb	r3, [r1, r3]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1c8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe fce8 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023c00 	.word	0x40023c00
 800374c:	40023800 	.word	0x40023800
 8003750:	08004c7c 	.word	0x08004c7c
 8003754:	20000000 	.word	0x20000000
 8003758:	20000004 	.word	0x20000004

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003760:	b090      	sub	sp, #64	; 0x40
 8003762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
 8003768:	2300      	movs	r3, #0
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376c:	2300      	movs	r3, #0
 800376e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d00d      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x40>
 8003780:	2b08      	cmp	r3, #8
 8003782:	f200 80a1 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x34>
 800378a:	2b04      	cmp	r3, #4
 800378c:	d003      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x3a>
 800378e:	e09b      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003794:	e09b      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003796:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800379a:	e098      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800379c:	4b4f      	ldr	r3, [pc, #316]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a6:	4b4d      	ldr	r3, [pc, #308]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d028      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b2:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	2200      	movs	r2, #0
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	627a      	str	r2, [r7, #36]	; 0x24
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037c4:	2100      	movs	r1, #0
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037c8:	fb03 f201 	mul.w	r2, r3, r1
 80037cc:	2300      	movs	r3, #0
 80037ce:	fb00 f303 	mul.w	r3, r0, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d6:	fba0 1202 	umull	r1, r2, r0, r2
 80037da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037dc:	460a      	mov	r2, r1
 80037de:	62ba      	str	r2, [r7, #40]	; 0x28
 80037e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e2:	4413      	add	r3, r2
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	2200      	movs	r2, #0
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	61fa      	str	r2, [r7, #28]
 80037ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037f6:	f7fc fced 	bl	80001d4 <__aeabi_uldivmod>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4613      	mov	r3, r2
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003802:	e053      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003804:	4b35      	ldr	r3, [pc, #212]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	2200      	movs	r2, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	617a      	str	r2, [r7, #20]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003816:	f04f 0b00 	mov.w	fp, #0
 800381a:	4652      	mov	r2, sl
 800381c:	465b      	mov	r3, fp
 800381e:	f04f 0000 	mov.w	r0, #0
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	0159      	lsls	r1, r3, #5
 8003828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382c:	0150      	lsls	r0, r2, #5
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	ebb2 080a 	subs.w	r8, r2, sl
 8003836:	eb63 090b 	sbc.w	r9, r3, fp
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003846:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800384a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800384e:	ebb2 0408 	subs.w	r4, r2, r8
 8003852:	eb63 0509 	sbc.w	r5, r3, r9
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	00eb      	lsls	r3, r5, #3
 8003860:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003864:	00e2      	lsls	r2, r4, #3
 8003866:	4614      	mov	r4, r2
 8003868:	461d      	mov	r5, r3
 800386a:	eb14 030a 	adds.w	r3, r4, sl
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	eb45 030b 	adc.w	r3, r5, fp
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003882:	4629      	mov	r1, r5
 8003884:	028b      	lsls	r3, r1, #10
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800388c:	4621      	mov	r1, r4
 800388e:	028a      	lsls	r2, r1, #10
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	2200      	movs	r2, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	60fa      	str	r2, [r7, #12]
 800389c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a0:	f7fc fc98 	bl	80001d4 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_GetSysClockFreq+0x180>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3740      	adds	r7, #64	; 0x40
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	017d7840 	.word	0x017d7840

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	08004c8c 	.word	0x08004c8c

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffdc 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0b5b      	lsrs	r3, r3, #13
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	; (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	08004c8c 	.word	0x08004c8c

08003950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e07b      	b.n	8003a5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	2b00      	cmp	r3, #0
 8003968:	d108      	bne.n	800397c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003972:	d009      	beq.n	8003988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
 800397a:	e005      	b.n	8003988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fe f958 	bl	8001c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0c:	ea42 0103 	orr.w	r1, r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0104 	and.w	r1, r3, #4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f003 0210 	and.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e041      	b.n	8003af8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fe f92d 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f000 f8f5 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIM_ConfigClockSource+0x1c>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0b4      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x186>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b54:	d03e      	beq.n	8003bd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5a:	f200 8087 	bhi.w	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b62:	f000 8086 	beq.w	8003c72 <HAL_TIM_ConfigClockSource+0x172>
 8003b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6a:	d87f      	bhi.n	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b70      	cmp	r3, #112	; 0x70
 8003b6e:	d01a      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0xa6>
 8003b70:	2b70      	cmp	r3, #112	; 0x70
 8003b72:	d87b      	bhi.n	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b60      	cmp	r3, #96	; 0x60
 8003b76:	d050      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x11a>
 8003b78:	2b60      	cmp	r3, #96	; 0x60
 8003b7a:	d877      	bhi.n	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b50      	cmp	r3, #80	; 0x50
 8003b7e:	d03c      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0xfa>
 8003b80:	2b50      	cmp	r3, #80	; 0x50
 8003b82:	d873      	bhi.n	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d058      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x13a>
 8003b88:	2b40      	cmp	r3, #64	; 0x40
 8003b8a:	d86f      	bhi.n	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b8c:	2b30      	cmp	r3, #48	; 0x30
 8003b8e:	d064      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x15a>
 8003b90:	2b30      	cmp	r3, #48	; 0x30
 8003b92:	d86b      	bhi.n	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d060      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x15a>
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	d867      	bhi.n	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d05c      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d05a      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ba4:	e062      	b.n	8003c6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bb6:	f000 f971 	bl	8003e9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	609a      	str	r2, [r3, #8]
      break;
 8003bd2:	e04f      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003be4:	f000 f95a 	bl	8003e9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf6:	609a      	str	r2, [r3, #8]
      break;
 8003bf8:	e03c      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	461a      	mov	r2, r3
 8003c08:	f000 f8ce 	bl	8003da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2150      	movs	r1, #80	; 0x50
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f927 	bl	8003e66 <TIM_ITRx_SetConfig>
      break;
 8003c18:	e02c      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c26:	461a      	mov	r2, r3
 8003c28:	f000 f8ed 	bl	8003e06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2160      	movs	r1, #96	; 0x60
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f917 	bl	8003e66 <TIM_ITRx_SetConfig>
      break;
 8003c38:	e01c      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c46:	461a      	mov	r2, r3
 8003c48:	f000 f8ae 	bl	8003da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2140      	movs	r1, #64	; 0x40
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f907 	bl	8003e66 <TIM_ITRx_SetConfig>
      break;
 8003c58:	e00c      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f000 f8fe 	bl	8003e66 <TIM_ITRx_SetConfig>
      break;
 8003c6a:	e003      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c70:	e000      	b.n	8003c74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a3a      	ldr	r2, [pc, #232]	; (8003d8c <TIM_Base_SetConfig+0xfc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_Base_SetConfig+0x38>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d00b      	beq.n	8003cc8 <TIM_Base_SetConfig+0x38>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <TIM_Base_SetConfig+0x100>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_Base_SetConfig+0x38>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a36      	ldr	r2, [pc, #216]	; (8003d94 <TIM_Base_SetConfig+0x104>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_Base_SetConfig+0x38>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a35      	ldr	r2, [pc, #212]	; (8003d98 <TIM_Base_SetConfig+0x108>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d108      	bne.n	8003cda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a2b      	ldr	r2, [pc, #172]	; (8003d8c <TIM_Base_SetConfig+0xfc>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01b      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d017      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <TIM_Base_SetConfig+0x100>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a27      	ldr	r2, [pc, #156]	; (8003d94 <TIM_Base_SetConfig+0x104>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00f      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <TIM_Base_SetConfig+0x108>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00b      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a25      	ldr	r2, [pc, #148]	; (8003d9c <TIM_Base_SetConfig+0x10c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a24      	ldr	r2, [pc, #144]	; (8003da0 <TIM_Base_SetConfig+0x110>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a23      	ldr	r2, [pc, #140]	; (8003da4 <TIM_Base_SetConfig+0x114>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d108      	bne.n	8003d2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0e      	ldr	r2, [pc, #56]	; (8003d8c <TIM_Base_SetConfig+0xfc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d103      	bne.n	8003d60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f023 0201 	bic.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	611a      	str	r2, [r3, #16]
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	40014000 	.word	0x40014000
 8003da0:	40014400 	.word	0x40014400
 8003da4:	40014800 	.word	0x40014800

08003da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f023 0201 	bic.w	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 030a 	bic.w	r3, r3, #10
 8003de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b087      	sub	sp, #28
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f023 0210 	bic.w	r2, r3, #16
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	031b      	lsls	r3, r3, #12
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f043 0307 	orr.w	r3, r3, #7
 8003e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	021a      	lsls	r2, r3, #8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e050      	b.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d018      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d013      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00e      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a16      	ldr	r2, [pc, #88]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10c      	bne.n	8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40014000 	.word	0x40014000

08003fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e042      	b.n	8004050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd fea4 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	; 0x24
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fb79 	bl	80046f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b20      	cmp	r3, #32
 8004076:	d175      	bne.n	8004164 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_UART_Transmit+0x2c>
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e06e      	b.n	8004166 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2221      	movs	r2, #33	; 0x21
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004096:	f7fe f87d 	bl	8002194 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d108      	bne.n	80040c4 <HAL_UART_Transmit+0x6c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e003      	b.n	80040cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040cc:	e02e      	b.n	800412c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2180      	movs	r1, #128	; 0x80
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f98b 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e03a      	b.n	8004166 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	3302      	adds	r3, #2
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	e007      	b.n	800411e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	3301      	adds	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1cb      	bne.n	80040ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2200      	movs	r2, #0
 800413e:	2140      	movs	r1, #64	; 0x40
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f957 	bl	80043f4 <UART_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e006      	b.n	8004166 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	e000      	b.n	8004166 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004164:	2302      	movs	r3, #2
  }
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	4613      	mov	r3, r2
 800417a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b20      	cmp	r3, #32
 8004186:	d112      	bne.n	80041ae <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_UART_Receive_DMA+0x26>
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e00b      	b.n	80041b0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	461a      	mov	r2, r3
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f97f 	bl	80044a8 <UART_Start_Receive_DMA>
 80041aa:	4603      	mov	r3, r0
 80041ac:	e000      	b.n	80041b0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b09c      	sub	sp, #112	; 0x70
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d172      	bne.n	80042fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004216:	2200      	movs	r2, #0
 8004218:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	330c      	adds	r3, #12
 8004220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800422a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004230:	66bb      	str	r3, [r7, #104]	; 0x68
 8004232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800423a:	65ba      	str	r2, [r7, #88]	; 0x58
 800423c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	667b      	str	r3, [r7, #100]	; 0x64
 8004266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800426e:	647a      	str	r2, [r7, #68]	; 0x44
 8004270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	623b      	str	r3, [r7, #32]
   return(result);
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004298:	663b      	str	r3, [r7, #96]	; 0x60
 800429a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3314      	adds	r3, #20
 80042a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042a2:	633a      	str	r2, [r7, #48]	; 0x30
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e5      	bne.n	8004282 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d119      	bne.n	80042fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 0310 	bic.w	r3, r3, #16
 80042dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042e6:	61fa      	str	r2, [r7, #28]
 80042e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	69b9      	ldr	r1, [r7, #24]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	617b      	str	r3, [r7, #20]
   return(result);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fc:	2200      	movs	r2, #0
 80042fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	2b01      	cmp	r3, #1
 8004306:	d106      	bne.n	8004316 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800430c:	4619      	mov	r1, r3
 800430e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004310:	f7ff ff66 	bl	80041e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004314:	e002      	b.n	800431c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004316:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004318:	f7fd f936 	bl	8001588 <HAL_UART_RxCpltCallback>
}
 800431c:	bf00      	nop
 800431e:	3770      	adds	r7, #112	; 0x70
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	2b01      	cmp	r3, #1
 800433e:	d108      	bne.n	8004352 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	b29b      	uxth	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f7ff ff48 	bl	80041e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004350:	e002      	b.n	8004358 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff ff30 	bl	80041b8 <HAL_UART_RxHalfCpltCallback>
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b21      	cmp	r3, #33	; 0x21
 8004392:	d108      	bne.n	80043a6 <UART_DMAError+0x46>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80043a0:	68b8      	ldr	r0, [r7, #8]
 80043a2:	f000 f91b 	bl	80045dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b22      	cmp	r3, #34	; 0x22
 80043c6:	d108      	bne.n	80043da <UART_DMAError+0x7a>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2200      	movs	r2, #0
 80043d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80043d4:	68b8      	ldr	r0, [r7, #8]
 80043d6:	f000 f929 	bl	800462c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f043 0210 	orr.w	r2, r3, #16
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043e6:	68b8      	ldr	r0, [r7, #8]
 80043e8:	f7ff fef0 	bl	80041cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004404:	e03b      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d037      	beq.n	800447e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fd fec1 	bl	8002194 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	6a3a      	ldr	r2, [r7, #32]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <UART_WaitOnFlagUntilTimeout+0x30>
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e03a      	b.n	800449e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d023      	beq.n	800447e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d020      	beq.n	800447e <UART_WaitOnFlagUntilTimeout+0x8a>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d01d      	beq.n	800447e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b08      	cmp	r3, #8
 800444e:	d116      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f8e0 	bl	800462c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2208      	movs	r2, #8
 8004470:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e00f      	b.n	800449e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4013      	ands	r3, r2
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	bf0c      	ite	eq
 800448e:	2301      	moveq	r3, #1
 8004490:	2300      	movne	r3, #0
 8004492:	b2db      	uxtb	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	429a      	cmp	r2, r3
 800449a:	d0b4      	beq.n	8004406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b098      	sub	sp, #96	; 0x60
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	88fa      	ldrh	r2, [r7, #6]
 80044c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2222      	movs	r2, #34	; 0x22
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <UART_Start_Receive_DMA+0x128>)
 80044d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	4a3d      	ldr	r2, [pc, #244]	; (80045d4 <UART_Start_Receive_DMA+0x12c>)
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <UART_Start_Receive_DMA+0x130>)
 80044e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	2200      	movs	r2, #0
 80044ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80044f0:	f107 0308 	add.w	r3, r7, #8
 80044f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	f7fe f950 	bl	80027ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d019      	beq.n	800455e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800453a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004540:	65bb      	str	r3, [r7, #88]	; 0x58
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800454a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800454c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e5      	bne.n	800452a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3314      	adds	r3, #20
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	657b      	str	r3, [r7, #84]	; 0x54
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800457e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	617b      	str	r3, [r7, #20]
   return(result);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a8:	653b      	str	r3, [r7, #80]	; 0x50
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3314      	adds	r3, #20
 80045b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80045b2:	627a      	str	r2, [r7, #36]	; 0x24
 80045b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6a39      	ldr	r1, [r7, #32]
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e5      	bne.n	8004592 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3760      	adds	r7, #96	; 0x60
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	080041f9 	.word	0x080041f9
 80045d4:	08004325 	.word	0x08004325
 80045d8:	08004361 	.word	0x08004361

080045dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b089      	sub	sp, #36	; 0x24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	61ba      	str	r2, [r7, #24]
 8004606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6979      	ldr	r1, [r7, #20]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	613b      	str	r3, [r7, #16]
   return(result);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004620:	bf00      	nop
 8004622:	3724      	adds	r7, #36	; 0x24
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b095      	sub	sp, #84	; 0x54
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004654:	643a      	str	r2, [r7, #64]	; 0x40
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800465a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e5      	bne.n	8004634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3314      	adds	r3, #20
 800466e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	61fb      	str	r3, [r7, #28]
   return(result);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d119      	bne.n	80046d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f023 0310 	bic.w	r3, r3, #16
 80046ba:	647b      	str	r3, [r7, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c4:	61ba      	str	r2, [r7, #24]
 80046c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6979      	ldr	r1, [r7, #20]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	613b      	str	r3, [r7, #16]
   return(result);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046e6:	bf00      	nop
 80046e8:	3754      	adds	r7, #84	; 0x54
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f8:	b0c0      	sub	sp, #256	; 0x100
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	68d9      	ldr	r1, [r3, #12]
 8004712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	ea40 0301 	orr.w	r3, r0, r1
 800471c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	431a      	orrs	r2, r3
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	431a      	orrs	r2, r3
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800474c:	f021 010c 	bic.w	r1, r1, #12
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800475a:	430b      	orrs	r3, r1
 800475c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800475e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476e:	6999      	ldr	r1, [r3, #24]
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	ea40 0301 	orr.w	r3, r0, r1
 800477a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b8f      	ldr	r3, [pc, #572]	; (80049c0 <UART_SetConfig+0x2cc>)
 8004784:	429a      	cmp	r2, r3
 8004786:	d005      	beq.n	8004794 <UART_SetConfig+0xa0>
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	4b8d      	ldr	r3, [pc, #564]	; (80049c4 <UART_SetConfig+0x2d0>)
 8004790:	429a      	cmp	r2, r3
 8004792:	d104      	bne.n	800479e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004794:	f7ff f8c8 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8004798:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800479c:	e003      	b.n	80047a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800479e:	f7ff f8af 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80047a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	f040 810c 	bne.w	80049cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047c6:	4622      	mov	r2, r4
 80047c8:	462b      	mov	r3, r5
 80047ca:	1891      	adds	r1, r2, r2
 80047cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80047ce:	415b      	adcs	r3, r3
 80047d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047d6:	4621      	mov	r1, r4
 80047d8:	eb12 0801 	adds.w	r8, r2, r1
 80047dc:	4629      	mov	r1, r5
 80047de:	eb43 0901 	adc.w	r9, r3, r1
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047f6:	4690      	mov	r8, r2
 80047f8:	4699      	mov	r9, r3
 80047fa:	4623      	mov	r3, r4
 80047fc:	eb18 0303 	adds.w	r3, r8, r3
 8004800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004804:	462b      	mov	r3, r5
 8004806:	eb49 0303 	adc.w	r3, r9, r3
 800480a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800481a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800481e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004822:	460b      	mov	r3, r1
 8004824:	18db      	adds	r3, r3, r3
 8004826:	653b      	str	r3, [r7, #80]	; 0x50
 8004828:	4613      	mov	r3, r2
 800482a:	eb42 0303 	adc.w	r3, r2, r3
 800482e:	657b      	str	r3, [r7, #84]	; 0x54
 8004830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004838:	f7fb fccc 	bl	80001d4 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4b61      	ldr	r3, [pc, #388]	; (80049c8 <UART_SetConfig+0x2d4>)
 8004842:	fba3 2302 	umull	r2, r3, r3, r2
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	011c      	lsls	r4, r3, #4
 800484a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004854:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800485c:	4642      	mov	r2, r8
 800485e:	464b      	mov	r3, r9
 8004860:	1891      	adds	r1, r2, r2
 8004862:	64b9      	str	r1, [r7, #72]	; 0x48
 8004864:	415b      	adcs	r3, r3
 8004866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800486c:	4641      	mov	r1, r8
 800486e:	eb12 0a01 	adds.w	sl, r2, r1
 8004872:	4649      	mov	r1, r9
 8004874:	eb43 0b01 	adc.w	fp, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800488c:	4692      	mov	sl, r2
 800488e:	469b      	mov	fp, r3
 8004890:	4643      	mov	r3, r8
 8004892:	eb1a 0303 	adds.w	r3, sl, r3
 8004896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800489a:	464b      	mov	r3, r9
 800489c:	eb4b 0303 	adc.w	r3, fp, r3
 80048a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048b8:	460b      	mov	r3, r1
 80048ba:	18db      	adds	r3, r3, r3
 80048bc:	643b      	str	r3, [r7, #64]	; 0x40
 80048be:	4613      	mov	r3, r2
 80048c0:	eb42 0303 	adc.w	r3, r2, r3
 80048c4:	647b      	str	r3, [r7, #68]	; 0x44
 80048c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048ce:	f7fb fc81 	bl	80001d4 <__aeabi_uldivmod>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <UART_SetConfig+0x2d4>)
 80048da:	fba3 2301 	umull	r2, r3, r3, r1
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	2264      	movs	r2, #100	; 0x64
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	1acb      	subs	r3, r1, r3
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048ee:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <UART_SetConfig+0x2d4>)
 80048f0:	fba3 2302 	umull	r2, r3, r3, r2
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048fc:	441c      	add	r4, r3
 80048fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004902:	2200      	movs	r2, #0
 8004904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004908:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800490c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	1891      	adds	r1, r2, r2
 8004916:	63b9      	str	r1, [r7, #56]	; 0x38
 8004918:	415b      	adcs	r3, r3
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004920:	4641      	mov	r1, r8
 8004922:	1851      	adds	r1, r2, r1
 8004924:	6339      	str	r1, [r7, #48]	; 0x30
 8004926:	4649      	mov	r1, r9
 8004928:	414b      	adcs	r3, r1
 800492a:	637b      	str	r3, [r7, #52]	; 0x34
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004938:	4659      	mov	r1, fp
 800493a:	00cb      	lsls	r3, r1, #3
 800493c:	4651      	mov	r1, sl
 800493e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004942:	4651      	mov	r1, sl
 8004944:	00ca      	lsls	r2, r1, #3
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	4603      	mov	r3, r0
 800494c:	4642      	mov	r2, r8
 800494e:	189b      	adds	r3, r3, r2
 8004950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004954:	464b      	mov	r3, r9
 8004956:	460a      	mov	r2, r1
 8004958:	eb42 0303 	adc.w	r3, r2, r3
 800495c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800496c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004974:	460b      	mov	r3, r1
 8004976:	18db      	adds	r3, r3, r3
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
 800497a:	4613      	mov	r3, r2
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800498a:	f7fb fc23 	bl	80001d4 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <UART_SetConfig+0x2d4>)
 8004994:	fba3 1302 	umull	r1, r3, r3, r2
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	2164      	movs	r1, #100	; 0x64
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	3332      	adds	r3, #50	; 0x32
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <UART_SetConfig+0x2d4>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	f003 0207 	and.w	r2, r3, #7
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4422      	add	r2, r4
 80049ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049bc:	e106      	b.n	8004bcc <UART_SetConfig+0x4d8>
 80049be:	bf00      	nop
 80049c0:	40011000 	.word	0x40011000
 80049c4:	40011400 	.word	0x40011400
 80049c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049de:	4642      	mov	r2, r8
 80049e0:	464b      	mov	r3, r9
 80049e2:	1891      	adds	r1, r2, r2
 80049e4:	6239      	str	r1, [r7, #32]
 80049e6:	415b      	adcs	r3, r3
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ee:	4641      	mov	r1, r8
 80049f0:	1854      	adds	r4, r2, r1
 80049f2:	4649      	mov	r1, r9
 80049f4:	eb43 0501 	adc.w	r5, r3, r1
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	00eb      	lsls	r3, r5, #3
 8004a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a06:	00e2      	lsls	r2, r4, #3
 8004a08:	4614      	mov	r4, r2
 8004a0a:	461d      	mov	r5, r3
 8004a0c:	4643      	mov	r3, r8
 8004a0e:	18e3      	adds	r3, r4, r3
 8004a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a14:	464b      	mov	r3, r9
 8004a16:	eb45 0303 	adc.w	r3, r5, r3
 8004a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	008b      	lsls	r3, r1, #2
 8004a3e:	4621      	mov	r1, r4
 8004a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a44:	4621      	mov	r1, r4
 8004a46:	008a      	lsls	r2, r1, #2
 8004a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a4c:	f7fb fbc2 	bl	80001d4 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4b60      	ldr	r3, [pc, #384]	; (8004bd8 <UART_SetConfig+0x4e4>)
 8004a56:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	011c      	lsls	r4, r3, #4
 8004a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	1891      	adds	r1, r2, r2
 8004a76:	61b9      	str	r1, [r7, #24]
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a80:	4641      	mov	r1, r8
 8004a82:	1851      	adds	r1, r2, r1
 8004a84:	6139      	str	r1, [r7, #16]
 8004a86:	4649      	mov	r1, r9
 8004a88:	414b      	adcs	r3, r1
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a98:	4659      	mov	r1, fp
 8004a9a:	00cb      	lsls	r3, r1, #3
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa2:	4651      	mov	r1, sl
 8004aa4:	00ca      	lsls	r2, r1, #3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4642      	mov	r2, r8
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	eb42 0303 	adc.w	r3, r2, r3
 8004abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ad8:	4649      	mov	r1, r9
 8004ada:	008b      	lsls	r3, r1, #2
 8004adc:	4641      	mov	r1, r8
 8004ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	008a      	lsls	r2, r1, #2
 8004ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004aea:	f7fb fb73 	bl	80001d4 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	4b38      	ldr	r3, [pc, #224]	; (8004bd8 <UART_SetConfig+0x4e4>)
 8004af6:	fba3 2301 	umull	r2, r3, r3, r1
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2264      	movs	r2, #100	; 0x64
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	1acb      	subs	r3, r1, r3
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	3332      	adds	r3, #50	; 0x32
 8004b08:	4a33      	ldr	r2, [pc, #204]	; (8004bd8 <UART_SetConfig+0x4e4>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b14:	441c      	add	r4, r3
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b1e:	677a      	str	r2, [r7, #116]	; 0x74
 8004b20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b24:	4642      	mov	r2, r8
 8004b26:	464b      	mov	r3, r9
 8004b28:	1891      	adds	r1, r2, r2
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b34:	4641      	mov	r1, r8
 8004b36:	1851      	adds	r1, r2, r1
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	414b      	adcs	r3, r1
 8004b3e:	607b      	str	r3, [r7, #4]
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b4c:	4659      	mov	r1, fp
 8004b4e:	00cb      	lsls	r3, r1, #3
 8004b50:	4651      	mov	r1, sl
 8004b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b56:	4651      	mov	r1, sl
 8004b58:	00ca      	lsls	r2, r1, #3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4642      	mov	r2, r8
 8004b62:	189b      	adds	r3, r3, r2
 8004b64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b66:	464b      	mov	r3, r9
 8004b68:	460a      	mov	r2, r1
 8004b6a:	eb42 0303 	adc.w	r3, r2, r3
 8004b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	663b      	str	r3, [r7, #96]	; 0x60
 8004b7a:	667a      	str	r2, [r7, #100]	; 0x64
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b88:	4649      	mov	r1, r9
 8004b8a:	008b      	lsls	r3, r1, #2
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b92:	4641      	mov	r1, r8
 8004b94:	008a      	lsls	r2, r1, #2
 8004b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b9a:	f7fb fb1b 	bl	80001d4 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <UART_SetConfig+0x4e4>)
 8004ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	2164      	movs	r1, #100	; 0x64
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	3332      	adds	r3, #50	; 0x32
 8004bb6:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <UART_SetConfig+0x4e4>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	f003 020f 	and.w	r2, r3, #15
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4422      	add	r2, r4
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd8:	51eb851f 	.word	0x51eb851f

08004bdc <memset>:
 8004bdc:	4402      	add	r2, r0
 8004bde:	4603      	mov	r3, r0
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4d0d      	ldr	r5, [pc, #52]	; (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4d0b      	ldr	r5, [pc, #44]	; (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	; (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 f826 	bl	8004c50 <_init>
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2600      	movs	r6, #0
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004ca4 	.word	0x08004ca4
 8004c28:	08004ca4 	.word	0x08004ca4
 8004c2c:	08004ca4 	.word	0x08004ca4
 8004c30:	08004ca8 	.word	0x08004ca8

08004c34 <memcpy>:
 8004c34:	440a      	add	r2, r1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c3c:	d100      	bne.n	8004c40 <memcpy+0xc>
 8004c3e:	4770      	bx	lr
 8004c40:	b510      	push	{r4, lr}
 8004c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	d1f9      	bne.n	8004c42 <memcpy+0xe>
 8004c4e:	bd10      	pop	{r4, pc}

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
