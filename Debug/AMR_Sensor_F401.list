
AMR_Sensor_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000333c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f0  080034f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034f8  080034f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000000c  0800350c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800350c  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb15  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000216a  00000000  00000000  0002eb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00030d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ace  00000000  00000000  00031ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c57  00000000  00000000  0003259e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010679  00000000  00000000  000351f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099f96  00000000  00000000  0004586e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a18  00000000  00000000  000df804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e321c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080034b8 	.word	0x080034b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080034b8 	.word	0x080034b8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT22.h"

uint32_t DWT_Delay_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <DWT_Delay_Init+0x58>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a13      	ldr	r2, [pc, #76]	; (8000528 <DWT_Delay_Init+0x58>)
 80004da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004de:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <DWT_Delay_Init+0x58>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a10      	ldr	r2, [pc, #64]	; (8000528 <DWT_Delay_Init+0x58>)
 80004e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ea:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <DWT_Delay_Init+0x5c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <DWT_Delay_Init+0x5c>)
 80004f2:	f023 0301 	bic.w	r3, r3, #1
 80004f6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <DWT_Delay_Init+0x5c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <DWT_Delay_Init+0x5c>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <DWT_Delay_Init+0x5c>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800050a:	bf00      	nop
     __ASM volatile ("NOP");
 800050c:	bf00      	nop
  __ASM volatile ("NOP");
 800050e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <DWT_Delay_Init+0x5c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000518:	2300      	movs	r3, #0
 800051a:	e000      	b.n	800051e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800051c:	2301      	movs	r3, #1
  }
}
 800051e:	4618      	mov	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	e000edf0 	.word	0xe000edf0
 800052c:	e0001000 	.word	0xe0001000

08000530 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <delay+0x40>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800053e:	f002 f9df 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <delay+0x44>)
 8000546:	fba2 2303 	umull	r2, r3, r2, r3
 800054a:	0c9b      	lsrs	r3, r3, #18
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000554:	bf00      	nop
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <delay+0x40>)
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	1ad2      	subs	r2, r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	429a      	cmp	r2, r3
 8000562:	d3f8      	bcc.n	8000556 <delay+0x26>
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	e0001000 	.word	0xe0001000
 8000574:	431bde83 	.word	0x431bde83

08000578 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000594:	887b      	ldrh	r3, [r7, #2]
 8000596:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f001 fbd0 	bl	8001d4c <HAL_GPIO_Init>
}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80005d0:	887b      	ldrh	r3, [r7, #2]
 80005d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f001 fbb2 	bl	8001d4c <HAL_GPIO_Init>
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <DHT_Start>:


void DHT_Start (void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80005f4:	f7ff ff6c 	bl	80004d0 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80005f8:	2101      	movs	r1, #1
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <DHT_Start+0x40>)
 80005fc:	f7ff ffbc 	bl	8000578 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <DHT_Start+0x40>)
 8000606:	f001 fd3d 	bl	8002084 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
 800060a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800060e:	f7ff ff8f 	bl	8000530 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000612:	2201      	movs	r2, #1
 8000614:	2101      	movs	r1, #1
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <DHT_Start+0x40>)
 8000618:	f001 fd34 	bl	8002084 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 800061c:	2014      	movs	r0, #20
 800061e:	f7ff ff87 	bl	8000530 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000622:	2101      	movs	r1, #1
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <DHT_Start+0x40>)
 8000626:	f7ff ffc5 	bl	80005b4 <Set_Pin_Input>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020000 	.word	0x40020000

08000634 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800063e:	2028      	movs	r0, #40	; 0x28
 8000640:	f7ff ff76 	bl	8000530 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000644:	2101      	movs	r1, #1
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <DHT_Check_Response+0x58>)
 8000648:	f001 fd04 	bl	8002054 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d10e      	bne.n	8000670 <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000652:	2050      	movs	r0, #80	; 0x50
 8000654:	f7ff ff6c 	bl	8000530 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000658:	2101      	movs	r1, #1
 800065a:	480c      	ldr	r0, [pc, #48]	; (800068c <DHT_Check_Response+0x58>)
 800065c:	f001 fcfa 	bl	8002054 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <DHT_Check_Response+0x38>
 8000666:	2301      	movs	r3, #1
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	e001      	b.n	8000670 <DHT_Check_Response+0x3c>
		else Response = -1;
 800066c:	23ff      	movs	r3, #255	; 0xff
 800066e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000670:	bf00      	nop
 8000672:	2101      	movs	r1, #1
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <DHT_Check_Response+0x58>)
 8000676:	f001 fced 	bl	8002054 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f8      	bne.n	8000672 <DHT_Check_Response+0x3e>

	return Response;
 8000680:	79fb      	ldrb	r3, [r7, #7]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000

08000690 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000696:	2300      	movs	r3, #0
 8000698:	71bb      	strb	r3, [r7, #6]
 800069a:	e037      	b.n	800070c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 800069c:	bf00      	nop
 800069e:	2101      	movs	r1, #1
 80006a0:	481e      	ldr	r0, [pc, #120]	; (800071c <DHT_Read+0x8c>)
 80006a2:	f001 fcd7 	bl	8002054 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f8      	beq.n	800069e <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f7ff ff3f 	bl	8000530 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80006b2:	2101      	movs	r1, #1
 80006b4:	4819      	ldr	r0, [pc, #100]	; (800071c <DHT_Read+0x8c>)
 80006b6:	f001 fccd 	bl	8002054 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10e      	bne.n	80006de <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2201      	movs	r2, #1
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	b25a      	sxtb	r2, r3
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	4013      	ands	r3, r2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	e00b      	b.n	80006f6 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	f1c3 0307 	rsb	r3, r3, #7
 80006e4:	2201      	movs	r2, #1
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	b25a      	sxtb	r2, r3
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80006f6:	bf00      	nop
 80006f8:	2101      	movs	r1, #1
 80006fa:	4808      	ldr	r0, [pc, #32]	; (800071c <DHT_Read+0x8c>)
 80006fc:	f001 fcaa 	bl	8002054 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f8      	bne.n	80006f8 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	3301      	adds	r3, #1
 800070a:	71bb      	strb	r3, [r7, #6]
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	2b07      	cmp	r3, #7
 8000710:	d9c4      	bls.n	800069c <DHT_Read+0xc>
	}
	return i;
 8000712:	79fb      	ldrb	r3, [r7, #7]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020000 	.word	0x40020000

08000720 <DHT_GetData>:



void DHT_GetData (DHT_Typedef *DHT_Data)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	Presence = DHT_Check_Response ();
 8000728:	f7ff ff84 	bl	8000634 <DHT_Check_Response>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <DHT_GetData+0xb0>)
 8000732:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000734:	f7ff ffac 	bl	8000690 <DHT_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <DHT_GetData+0xb4>)
 800073e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000740:	f7ff ffa6 	bl	8000690 <DHT_Read>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <DHT_GetData+0xb8>)
 800074a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 800074c:	f7ff ffa0 	bl	8000690 <DHT_Read>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <DHT_GetData+0xbc>)
 8000756:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000758:	f7ff ff9a 	bl	8000690 <DHT_Read>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <DHT_GetData+0xc0>)
 8000762:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000764:	f7ff ff94 	bl	8000690 <DHT_Read>
 8000768:	4603      	mov	r3, r0
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <DHT_GetData+0xc4>)
 800076e:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <DHT_GetData+0xc4>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <DHT_GetData+0xb4>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <DHT_GetData+0xb8>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4413      	add	r3, r2
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <DHT_GetData+0xbc>)
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <DHT_GetData+0xc0>)
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	4413      	add	r3, r2
 800078e:	4299      	cmp	r1, r3
 8000790:	d119      	bne.n	80007c6 <DHT_GetData+0xa6>
	{
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <DHT_GetData+0xbc>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <DHT_GetData+0xc0>)
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	4313      	orrs	r3, r2
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <DHT_GetData+0xb4>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <DHT_GetData+0xb8>)
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	ee07 3a90 	vmov	s15, r3
 80007bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000002e 	.word	0x2000002e
 80007d4:	20000028 	.word	0x20000028
 80007d8:	20000029 	.word	0x20000029
 80007dc:	2000002a 	.word	0x2000002a
 80007e0:	2000002b 	.word	0x2000002b
 80007e4:	2000002c 	.word	0x2000002c

080007e8 <VoltCurrent_Init>:
static float sensitivity = 0.1;
static float const_voltage = 1.488;

ADC_HandleTypeDef hadc;

void VoltCurrent_Init(ADC_HandleTypeDef *hadc_config){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	hadc = *hadc_config;
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <VoltCurrent_Init+0x20>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4610      	mov	r0, r2
 80007f6:	4619      	mov	r1, r3
 80007f8:	2348      	movs	r3, #72	; 0x48
 80007fa:	461a      	mov	r2, r3
 80007fc:	f002 fe4e 	bl	800349c <memcpy>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000030 	.word	0x20000030

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fcee 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f832 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f000 f9e0 	bl	8000bdc <MX_GPIO_Init>
  MX_DMA_Init();
 800081c:	f000 f9a0 	bl	8000b60 <MX_DMA_Init>
  MX_ADC1_Init();
 8000820:	f000 f896 	bl	8000950 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000824:	f000 f91e 	bl	8000a64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000828:	f000 f946 	bl	8000ab8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800082c:	f000 f96e 	bl	8000b0c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000830:	f000 f8c8 	bl	80009c4 <MX_TIM1_Init>
    BNO08X_Init(&huart2);
    #endif

    // DHT22 Initialization
    #ifdef USE_DHT22
    DHT_Start();
 8000834:	f7ff fedc 	bl	80005f0 <DHT_Start>
    #endif

    // Volt & Current Initialization
    #ifdef USE_VOLT_CURRENT
    VoltCurrent_Init(&hadc1);
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <main+0x64>)
 800083a:	f7ff ffd5 	bl	80007e8 <VoltCurrent_Init>
  {

	  ////////////////////////////////////// SENSOR READING ////////////////////////////////////

	  // Reading Data in DHT22 Sensor
	  DHT_GetData(&DHT22_Data);
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <main+0x68>)
 8000840:	f7ff ff6e 	bl	8000720 <DHT_GetData>
	  Sensor_Data.temperature = DHT22_Data.Temperature;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <main+0x68>)
 8000846:	edd3 7a00 	vldr	s15, [r3]
 800084a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800084e:	ee17 3a90 	vmov	r3, s15
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <main+0x6c>)
 8000856:	801a      	strh	r2, [r3, #0]
	  Sensor_Data.humidity = DHT22_Data.Humidity;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <main+0x68>)
 800085a:	edd3 7a01 	vldr	s15, [r3, #4]
 800085e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000862:	ee17 3a90 	vmov	r3, s15
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <main+0x6c>)
 800086a:	805a      	strh	r2, [r3, #2]
	  DHT_GetData(&DHT22_Data);
 800086c:	e7e7      	b.n	800083e <main+0x32>
 800086e:	bf00      	nop
 8000870:	2000008c 	.word	0x2000008c
 8000874:	20000078 	.word	0x20000078
 8000878:	20000080 	.word	0x20000080

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	; 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2230      	movs	r2, #48	; 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f002 fdda 	bl	8003444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	4a27      	ldr	r2, [pc, #156]	; (8000948 <SystemClock_Config+0xcc>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	; 0x40
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <SystemClock_Config+0xcc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <SystemClock_Config+0xd0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c8:	4a20      	ldr	r2, [pc, #128]	; (800094c <SystemClock_Config+0xd0>)
 80008ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <SystemClock_Config+0xd0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2310      	movs	r3, #16
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80008f4:	2354      	movs	r3, #84	; 0x54
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fc:	2304      	movs	r3, #4
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fbd7 	bl	80020b8 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000910:	f000 fa0c 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	2102      	movs	r1, #2
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fe39 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800093c:	f000 f9f6 	bl	8000d2c <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3750      	adds	r7, #80	; 0x50
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_ADC1_Init+0x68>)
 8000956:	4a19      	ldr	r2, [pc, #100]	; (80009bc <MX_ADC1_Init+0x6c>)
 8000958:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_ADC1_Init+0x68>)
 800095c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000960:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_ADC1_Init+0x68>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_ADC1_Init+0x68>)
 800096a:	2201      	movs	r2, #1
 800096c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_ADC1_Init+0x68>)
 8000970:	2201      	movs	r2, #1
 8000972:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_ADC1_Init+0x68>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_ADC1_Init+0x68>)
 800097e:	2200      	movs	r2, #0
 8000980:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_ADC1_Init+0x68>)
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <MX_ADC1_Init+0x70>)
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_ADC1_Init+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_ADC1_Init+0x68>)
 8000990:	2201      	movs	r2, #1
 8000992:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_ADC1_Init+0x68>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_ADC1_Init+0x68>)
 800099e:	2201      	movs	r2, #1
 80009a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_ADC1_Init+0x68>)
 80009a4:	f000 fc96 	bl	80012d4 <HAL_ADC_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80009ae:	f000 f9bd 	bl	8000d2c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000008c 	.word	0x2000008c
 80009bc:	40012000 	.word	0x40012000
 80009c0:	0f000001 	.word	0x0f000001

080009c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <MX_TIM1_Init+0x9c>)
 80009e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009e8:	2253      	movs	r2, #83	; 0x53
 80009ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a0e:	f001 ffab 	bl	8002968 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a18:	f000 f988 	bl	8000d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a2a:	f001 ffec 	bl	8002a06 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a34:	f000 f97a 	bl	8000d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM1_Init+0x98>)
 8000a46:	f002 f9cb 	bl	8002de0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a50:	f000 f96c 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000d4 	.word	0x200000d4
 8000a60:	40010000 	.word	0x40010000

08000a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_USART1_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f002 fa0e 	bl	8002ebc <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f000 f941 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000011c 	.word	0x2000011c
 8000ab4:	40011000 	.word	0x40011000

08000ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART2_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f002 f9e4 	bl	8002ebc <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f917 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000164 	.word	0x20000164
 8000b08:	40004400 	.word	0x40004400

08000b0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART6_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b44:	f002 f9ba 	bl	8002ebc <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f8ed 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200001ac 	.word	0x200001ac
 8000b5c:	40011400 	.word	0x40011400

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_DMA_Init+0x78>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2010      	movs	r0, #16
 8000ba4:	f000 fdb1 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ba8:	2010      	movs	r0, #16
 8000baa:	f000 fdca 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2039      	movs	r0, #57	; 0x39
 8000bb4:	f000 fda9 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bb8:	2039      	movs	r0, #57	; 0x39
 8000bba:	f000 fdc2 	bl	8001742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	203a      	movs	r0, #58	; 0x3a
 8000bc4:	f000 fda1 	bl	800170a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000bc8:	203a      	movs	r0, #58	; 0x3a
 8000bca:	f000 fdba 	bl	8001742 <HAL_NVIC_EnableIRQ>

}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a48      	ldr	r2, [pc, #288]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b46      	ldr	r3, [pc, #280]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a41      	ldr	r2, [pc, #260]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b3f      	ldr	r3, [pc, #252]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a3a      	ldr	r2, [pc, #232]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a33      	ldr	r2, [pc, #204]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <MX_GPIO_Init+0x140>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	482d      	ldr	r0, [pc, #180]	; (8000d20 <MX_GPIO_Init+0x144>)
 8000c6a:	f001 fa0b 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|MUL_SCK_Pin
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f24e 11f8 	movw	r1, #57848	; 0xe1f8
 8000c74:	482b      	ldr	r0, [pc, #172]	; (8000d24 <MX_GPIO_Init+0x148>)
 8000c76:	f001 fa05 	bl	8002084 <HAL_GPIO_WritePin>
                          |MUL_Latch_Pin|MUL_MOSI_Pin|LCD_CS_Pin|LCD_RS_Pin
                          |LCD_WR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c80:	4829      	ldr	r0, [pc, #164]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000c82:	f001 f9ff 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4820      	ldr	r0, [pc, #128]	; (8000d20 <MX_GPIO_Init+0x144>)
 8000ca0:	f001 f854 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000cb8:	f001 f848 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin MUL_SCK_Pin
                           MUL_Latch_Pin MUL_MOSI_Pin LCD_CS_Pin LCD_RS_Pin
                           LCD_WR_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|MUL_SCK_Pin
 8000cbc:	f24e 13f8 	movw	r3, #57848	; 0xe1f8
 8000cc0:	617b      	str	r3, [r7, #20]
                          |MUL_Latch_Pin|MUL_MOSI_Pin|LCD_CS_Pin|LCD_RS_Pin
                          |LCD_WR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <MX_GPIO_Init+0x148>)
 8000cd6:	f001 f839 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_GPIO_Init+0x14c>)
 8000cf4:	f001 f82a 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RD_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin;
 8000cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RD_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_GPIO_Init+0x148>)
 8000d0e:	f001 f81d 	bl	8001d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020000 	.word	0x40020000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_ADC_MspInit+0x7c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d127      	bne.n	8000dfa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_ADC_MspInit+0x80>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <HAL_ADC_MspInit+0x80>)
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_ADC_MspInit+0x80>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_ADC_MspInit+0x80>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_ADC_MspInit+0x80>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_ADC_MspInit+0x80>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000de2:	2312      	movs	r3, #18
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de6:	2303      	movs	r3, #3
 8000de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_ADC_MspInit+0x84>)
 8000df6:	f000 ffa9 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40012000 	.word	0x40012000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_TIM_Base_MspInit+0x3c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10d      	bne.n	8000e3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_TIM_Base_MspInit+0x40>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_TIM_Base_MspInit+0x40>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_TIM_Base_MspInit+0x40>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a92      	ldr	r2, [pc, #584]	; (80010bc <HAL_UART_MspInit+0x268>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d15c      	bne.n	8000f30 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
 8000e7a:	4b91      	ldr	r3, [pc, #580]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a90      	ldr	r2, [pc, #576]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b8e      	ldr	r3, [pc, #568]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	623b      	str	r3, [r7, #32]
 8000e90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	4b8a      	ldr	r3, [pc, #552]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a89      	ldr	r2, [pc, #548]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b87      	ldr	r3, [pc, #540]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
 8000eac:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	487e      	ldr	r0, [pc, #504]	; (80010c4 <HAL_UART_MspInit+0x270>)
 8000ecc:	f000 ff3e 	bl	8001d4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ed0:	4b7d      	ldr	r3, [pc, #500]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000ed2:	4a7e      	ldr	r2, [pc, #504]	; (80010cc <HAL_UART_MspInit+0x278>)
 8000ed4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ed6:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000ed8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000edc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ede:	4b7a      	ldr	r3, [pc, #488]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee4:	4b78      	ldr	r3, [pc, #480]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eea:	4b77      	ldr	r3, [pc, #476]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef2:	4b75      	ldr	r3, [pc, #468]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000efe:	4b72      	ldr	r3, [pc, #456]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f04:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f06:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0c:	4b6e      	ldr	r3, [pc, #440]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f12:	486d      	ldr	r0, [pc, #436]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000f14:	f000 fc30 	bl	8001778 <HAL_DMA_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000f1e:	f7ff ff05 	bl	8000d2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a68      	ldr	r2, [pc, #416]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f28:	4a67      	ldr	r2, [pc, #412]	; (80010c8 <HAL_UART_MspInit+0x274>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f2e:	e0c1      	b.n	80010b4 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a66      	ldr	r2, [pc, #408]	; (80010d0 <HAL_UART_MspInit+0x27c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d15b      	bne.n	8000ff2 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b60      	ldr	r3, [pc, #384]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a5f      	ldr	r2, [pc, #380]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f72:	230c      	movs	r3, #12
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f82:	2307      	movs	r3, #7
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	484d      	ldr	r0, [pc, #308]	; (80010c4 <HAL_UART_MspInit+0x270>)
 8000f8e:	f000 fedd 	bl	8001d4c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000f94:	4a50      	ldr	r2, [pc, #320]	; (80010d8 <HAL_UART_MspInit+0x284>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000f98:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fac:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb4:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000fc0:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc8:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fce:	4b41      	ldr	r3, [pc, #260]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fd4:	483f      	ldr	r0, [pc, #252]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fd6:	f000 fbcf 	bl	8001778 <HAL_DMA_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8000fe0:	f7ff fea4 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fea:	4a3a      	ldr	r2, [pc, #232]	; (80010d4 <HAL_UART_MspInit+0x280>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ff0:	e060      	b.n	80010b4 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART6)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a39      	ldr	r2, [pc, #228]	; (80010dc <HAL_UART_MspInit+0x288>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d15b      	bne.n	80010b4 <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8001006:	f043 0320 	orr.w	r3, r3, #32
 800100a:	6453      	str	r3, [r2, #68]	; 0x44
 800100c:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6313      	str	r3, [r2, #48]	; 0x30
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_UART_MspInit+0x26c>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001034:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001046:	2308      	movs	r3, #8
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	481c      	ldr	r0, [pc, #112]	; (80010c4 <HAL_UART_MspInit+0x270>)
 8001052:	f000 fe7b 	bl	8001d4c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <HAL_UART_MspInit+0x290>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 800105e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001062:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 8001072:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001076:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 8001086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 800109a:	f000 fb6d 	bl	8001778 <HAL_DMA_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_UART_MspInit+0x254>
      Error_Handler();
 80010a4:	f7ff fe42 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <HAL_UART_MspInit+0x28c>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010b4:	bf00      	nop
 80010b6:	3738      	adds	r7, #56	; 0x38
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40011000 	.word	0x40011000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	200001f4 	.word	0x200001f4
 80010cc:	40026440 	.word	0x40026440
 80010d0:	40004400 	.word	0x40004400
 80010d4:	20000254 	.word	0x20000254
 80010d8:	40026088 	.word	0x40026088
 80010dc:	40011400 	.word	0x40011400
 80010e0:	200002b4 	.word	0x200002b4
 80010e4:	40026428 	.word	0x40026428

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001134:	f000 f8ae 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <DMA1_Stream5_IRQHandler+0x10>)
 8001142:	f000 fbc7 	bl	80018d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000254 	.word	0x20000254

08001150 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <DMA2_Stream1_IRQHandler+0x10>)
 8001156:	f000 fbbd 	bl	80018d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200002b4 	.word	0x200002b4

08001164 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <DMA2_Stream2_IRQHandler+0x10>)
 800116a:	f000 fbb3 	bl	80018d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001f4 	.word	0x200001f4

08001178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011a0:	f7ff ffea 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a6:	490d      	ldr	r1, [pc, #52]	; (80011dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011bc:	4c0a      	ldr	r4, [pc, #40]	; (80011e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f002 f943 	bl	8003454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ce:	f7ff fb1d 	bl	800080c <main>
  bx  lr    
 80011d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011e0:	08003500 	.word	0x08003500
  ldr r2, =_sbss
 80011e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011e8:	20000318 	.word	0x20000318

080011ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_Init+0x40>)
 80011fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_Init+0x40>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x40>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 fa6b 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fd88 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023c00 	.word	0x40023c00

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fa83 	bl	800175e <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 fa4b 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000314 	.word	0x20000314

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000314 	.word	0x20000314

080012d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e033      	b.n	8001352 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fd48 	bl	8000d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800131a:	f023 0302 	bic.w	r3, r3, #2
 800131e:	f043 0202 	orr.w	r2, r3, #2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f818 	bl	800135c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f023 0303 	bic.w	r3, r3, #3
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
 8001342:	e001      	b.n	8001348 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001364:	4b79      	ldr	r3, [pc, #484]	; (800154c <ADC_Init+0x1f0>)
 8001366:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	431a      	orrs	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	021a      	lsls	r2, r3, #8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6859      	ldr	r1, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6899      	ldr	r1, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	4a58      	ldr	r2, [pc, #352]	; (8001550 <ADC_Init+0x1f4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d022      	beq.n	800143a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001402:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6899      	ldr	r1, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6899      	ldr	r1, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	e00f      	b.n	800145a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001458:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0202 	bic.w	r2, r2, #2
 8001468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6899      	ldr	r1, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7e1b      	ldrb	r3, [r3, #24]
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d01b      	beq.n	80014c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001496:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6859      	ldr	r1, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	3b01      	subs	r3, #1
 80014b4:	035a      	lsls	r2, r3, #13
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	e007      	b.n	80014d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	051a      	lsls	r2, r3, #20
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6899      	ldr	r1, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001512:	025a      	lsls	r2, r3, #9
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800152a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6899      	ldr	r1, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	029a      	lsls	r2, r3, #10
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	609a      	str	r2, [r3, #8]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40012300 	.word	0x40012300
 8001550:	0f000001 	.word	0x0f000001

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff29 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff3e 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff31 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffa2 	bl	80016b0 <SysTick_Config>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff fd9a 	bl	80012bc <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e099      	b.n	80018c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b4:	e00f      	b.n	80017d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017b6:	f7ff fd81 	bl	80012bc <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d908      	bls.n	80017d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2220      	movs	r2, #32
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2203      	movs	r2, #3
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e078      	b.n	80018c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e8      	bne.n	80017b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <HAL_DMA_Init+0x158>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4313      	orrs	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2b04      	cmp	r3, #4
 800182e:	d107      	bne.n	8001840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4313      	orrs	r3, r2
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f023 0307 	bic.w	r3, r3, #7
 8001856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4313      	orrs	r3, r2
 8001860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	2b04      	cmp	r3, #4
 8001868:	d117      	bne.n	800189a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00e      	beq.n	800189a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f9e9 	bl	8001c54 <DMA_CheckFifoParam>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2240      	movs	r2, #64	; 0x40
 800188c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001896:	2301      	movs	r3, #1
 8001898:	e016      	b.n	80018c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f9a0 	bl	8001be8 <DMA_CalcBaseAndBitshift>
 80018a8:	4603      	mov	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	223f      	movs	r2, #63	; 0x3f
 80018b2:	409a      	lsls	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	f010803f 	.word	0xf010803f

080018d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018e0:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <HAL_DMA_IRQHandler+0x248>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a8e      	ldr	r2, [pc, #568]	; (8001b20 <HAL_DMA_IRQHandler+0x24c>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0a9b      	lsrs	r3, r3, #10
 80018ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fe:	2208      	movs	r2, #8
 8001900:	409a      	lsls	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01a      	beq.n	8001940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	2208      	movs	r2, #8
 800192e:	409a      	lsls	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	2201      	movs	r2, #1
 8001946:	409a      	lsls	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d012      	beq.n	8001976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	2201      	movs	r2, #1
 8001964:	409a      	lsls	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196e:	f043 0202 	orr.w	r2, r3, #2
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2204      	movs	r2, #4
 800197c:	409a      	lsls	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d012      	beq.n	80019ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00b      	beq.n	80019ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	2204      	movs	r2, #4
 800199a:	409a      	lsls	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f043 0204 	orr.w	r2, r3, #4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	2210      	movs	r2, #16
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d043      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d03c      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ce:	2210      	movs	r2, #16
 80019d0:	409a      	lsls	r2, r3
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d018      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d108      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d024      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
 8001a02:	e01f      	b.n	8001a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01b      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
 8001a14:	e016      	b.n	8001a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0208 	bic.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a48:	2220      	movs	r2, #32
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 808f 	beq.w	8001b74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 8087 	beq.w	8001b74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d136      	bne.n	8001aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0216 	bic.w	r2, r2, #22
 8001a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <HAL_DMA_IRQHandler+0x1da>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0208 	bic.w	r2, r2, #8
 8001abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	223f      	movs	r2, #63	; 0x3f
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d07e      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
        }
        return;
 8001aea:	e079      	b.n	8001be0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01d      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d031      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
 8001b18:	e02c      	b.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d023      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
 8001b34:	e01e      	b.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10f      	bne.n	8001b64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0210 	bic.w	r2, r2, #16
 8001b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d032      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d022      	beq.n	8001bce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2205      	movs	r2, #5
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d307      	bcc.n	8001bbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f2      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x2cc>
 8001bba:	e000      	b.n	8001bbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
 8001bde:	e000      	b.n	8001be2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001be0:	bf00      	nop
    }
  }
}
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3b10      	subs	r3, #16
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <DMA_CalcBaseAndBitshift+0x64>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <DMA_CalcBaseAndBitshift+0x68>)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d909      	bls.n	8001c2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c1e:	f023 0303 	bic.w	r3, r3, #3
 8001c22:	1d1a      	adds	r2, r3, #4
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	; 0x58
 8001c28:	e007      	b.n	8001c3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c32:	f023 0303 	bic.w	r3, r3, #3
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	aaaaaaab 	.word	0xaaaaaaab
 8001c50:	080034e8 	.word	0x080034e8

08001c54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d11f      	bne.n	8001cae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d856      	bhi.n	8001d22 <DMA_CheckFifoParam+0xce>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <DMA_CheckFifoParam+0x28>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001c9f 	.word	0x08001c9f
 8001c84:	08001c8d 	.word	0x08001c8d
 8001c88:	08001d23 	.word	0x08001d23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d046      	beq.n	8001d26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c9c:	e043      	b.n	8001d26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ca6:	d140      	bne.n	8001d2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cac:	e03d      	b.n	8001d2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb6:	d121      	bne.n	8001cfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d837      	bhi.n	8001d2e <DMA_CheckFifoParam+0xda>
 8001cbe:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <DMA_CheckFifoParam+0x70>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001cdb 	.word	0x08001cdb
 8001ccc:	08001cd5 	.word	0x08001cd5
 8001cd0:	08001ced 	.word	0x08001ced
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd8:	e030      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d025      	beq.n	8001d32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cea:	e022      	b.n	8001d32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cf4:	d11f      	bne.n	8001d36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cfa:	e01c      	b.n	8001d36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d903      	bls.n	8001d0a <DMA_CheckFifoParam+0xb6>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d003      	beq.n	8001d10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d08:	e018      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0e:	e015      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00e      	beq.n	8001d3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d20:	e00b      	b.n	8001d3a <DMA_CheckFifoParam+0xe6>
      break;
 8001d22:	bf00      	nop
 8001d24:	e00a      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d26:	bf00      	nop
 8001d28:	e008      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e006      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e004      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d32:	bf00      	nop
 8001d34:	e002      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d36:	bf00      	nop
 8001d38:	e000      	b.n	8001d3c <DMA_CheckFifoParam+0xe8>
      break;
 8001d3a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e159      	b.n	800201c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8148 	bne.w	8002016 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a2 	beq.w	8002016 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a56      	ldr	r2, [pc, #344]	; (8002034 <HAL_GPIO_Init+0x2e8>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b54      	ldr	r3, [pc, #336]	; (8002034 <HAL_GPIO_Init+0x2e8>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_GPIO_Init+0x2ec>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_GPIO_Init+0x2f0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x202>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a48      	ldr	r2, [pc, #288]	; (8002040 <HAL_GPIO_Init+0x2f4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x1fe>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a47      	ldr	r2, [pc, #284]	; (8002044 <HAL_GPIO_Init+0x2f8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x1fa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a46      	ldr	r2, [pc, #280]	; (8002048 <HAL_GPIO_Init+0x2fc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x1f6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a45      	ldr	r2, [pc, #276]	; (800204c <HAL_GPIO_Init+0x300>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x1f2>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e008      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e004      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f002 0203 	and.w	r2, r2, #3
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f60:	4935      	ldr	r1, [pc, #212]	; (8002038 <HAL_GPIO_Init+0x2ec>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6e:	4b38      	ldr	r3, [pc, #224]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f92:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe6:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002010:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <HAL_GPIO_Init+0x304>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	f67f aea2 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40013800 	.word	0x40013800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40020800 	.word	0x40020800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40021000 	.word	0x40021000
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e001      	b.n	8002076 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e267      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d075      	beq.n	80021c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d00c      	beq.n	80020fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d112      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05b      	beq.n	80021c0 <HAL_RCC_OscConfig+0x108>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d157      	bne.n	80021c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e242      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x74>
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a75      	ldr	r2, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6f      	ldr	r2, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6c      	ldr	r2, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 8002150:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a65      	ldr	r2, [pc, #404]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f8a4 	bl	80012bc <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f8a0 	bl	80012bc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e207      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xc0>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff f890 	bl	80012bc <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f88c 	bl	80012bc <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1f3      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0xe8>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1c7      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4937      	ldr	r1, [pc, #220]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_OscConfig+0x244>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff f845 	bl	80012bc <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff f841 	bl	80012bc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1a8      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4925      	ldr	r1, [pc, #148]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x244>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f824 	bl	80012bc <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002278:	f7ff f820 	bl	80012bc <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e187      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d036      	beq.n	8002310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_RCC_OscConfig+0x248>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7ff f804 	bl	80012bc <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff f800 	bl	80012bc <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e167      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x200>
 80022d6:	e01b      	b.n	8002310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_OscConfig+0x248>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe ffed 	bl	80012bc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	e00e      	b.n	8002304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e6:	f7fe ffe9 	bl	80012bc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d907      	bls.n	8002304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e150      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	42470000 	.word	0x42470000
 8002300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ea      	bne.n	80022e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8097 	beq.w	800244c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b74      	ldr	r3, [pc, #464]	; (800252c <HAL_RCC_OscConfig+0x474>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a73      	ldr	r2, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7fe ffa9 	bl	80012bc <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7fe ffa5 	bl	80012bc <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e10c      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2ea>
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a63      	ldr	r2, [pc, #396]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	e01c      	b.n	80023dc <HAL_RCC_OscConfig+0x324>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x30c>
 80023aa:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a5e      	ldr	r2, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5b      	ldr	r2, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0x324>
 80023c4:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	4b55      	ldr	r3, [pc, #340]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a54      	ldr	r2, [pc, #336]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 0304 	bic.w	r3, r3, #4
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe ff6a 	bl	80012bc <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe ff66 	bl	80012bc <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0cb      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ee      	beq.n	80023ec <HAL_RCC_OscConfig+0x334>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe ff54 	bl	80012bc <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002416:	e00a      	b.n	800242e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe ff50 	bl	80012bc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0b5      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ee      	bne.n	8002418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002440:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a1 	beq.w	8002598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d05c      	beq.n	800251c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d141      	bne.n	80024ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe ff24 	bl	80012bc <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe ff20 	bl	80012bc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e087      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe fef9 	bl	80012bc <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fef5 	bl	80012bc <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e05c      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x416>
 80024ec:	e054      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fee2 	bl	80012bc <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fede 	bl	80012bc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e045      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
 800251a:	e03d      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e038      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000
 8002530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x4ec>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d028      	beq.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d121      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d11a      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800256a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	3b01      	subs	r3, #1
 800257e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe fe10 	bl	80012bc <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fe0c 	bl	80012bc <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f821 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fd70 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	080034d0 	.word	0x080034d0
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002778:	b090      	sub	sp, #64	; 0x40
 800277a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
 8002780:	2300      	movs	r3, #0
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002784:	2300      	movs	r3, #0
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d00d      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002798:	2b08      	cmp	r3, #8
 800279a:	f200 80a1 	bhi.w	80028e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x34>
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x3a>
 80027a6:	e09b      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b53      	ldr	r3, [pc, #332]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027ac:	e09b      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ae:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_GetSysClockFreq+0x188>)
 80027b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027b2:	e098      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b4:	4b4f      	ldr	r3, [pc, #316]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027be:	4b4d      	ldr	r3, [pc, #308]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d028      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	099b      	lsrs	r3, r3, #6
 80027d0:	2200      	movs	r2, #0
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	627a      	str	r2, [r7, #36]	; 0x24
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027dc:	2100      	movs	r1, #0
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_GetSysClockFreq+0x188>)
 80027e0:	fb03 f201 	mul.w	r2, r3, r1
 80027e4:	2300      	movs	r3, #0
 80027e6:	fb00 f303 	mul.w	r3, r0, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_RCC_GetSysClockFreq+0x188>)
 80027ee:	fba0 1202 	umull	r1, r2, r0, r2
 80027f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f4:	460a      	mov	r2, r1
 80027f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80027f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fa:	4413      	add	r3, r2
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002800:	2200      	movs	r2, #0
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	61fa      	str	r2, [r7, #28]
 8002806:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800280a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800280e:	f7fd fce1 	bl	80001d4 <__aeabi_uldivmod>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4613      	mov	r3, r2
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281a:	e053      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281c:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	2200      	movs	r2, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	617a      	str	r2, [r7, #20]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800282e:	f04f 0b00 	mov.w	fp, #0
 8002832:	4652      	mov	r2, sl
 8002834:	465b      	mov	r3, fp
 8002836:	f04f 0000 	mov.w	r0, #0
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	0159      	lsls	r1, r3, #5
 8002840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002844:	0150      	lsls	r0, r2, #5
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	ebb2 080a 	subs.w	r8, r2, sl
 800284e:	eb63 090b 	sbc.w	r9, r3, fp
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800285e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002862:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002866:	ebb2 0408 	subs.w	r4, r2, r8
 800286a:	eb63 0509 	sbc.w	r5, r3, r9
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	00eb      	lsls	r3, r5, #3
 8002878:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287c:	00e2      	lsls	r2, r4, #3
 800287e:	4614      	mov	r4, r2
 8002880:	461d      	mov	r5, r3
 8002882:	eb14 030a 	adds.w	r3, r4, sl
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	eb45 030b 	adc.w	r3, r5, fp
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289a:	4629      	mov	r1, r5
 800289c:	028b      	lsls	r3, r1, #10
 800289e:	4621      	mov	r1, r4
 80028a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a4:	4621      	mov	r1, r4
 80028a6:	028a      	lsls	r2, r1, #10
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	2200      	movs	r2, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	60fa      	str	r2, [r7, #12]
 80028b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b8:	f7fd fc8c 	bl	80001d4 <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028de:	e002      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3740      	adds	r7, #64	; 0x40
 80028ec:	46bd      	mov	sp, r7
 80028ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	017d7840 	.word	0x017d7840

08002900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCC_GetHCLKFreq+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800291c:	f7ff fff0 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0a9b      	lsrs	r3, r3, #10
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	080034e0 	.word	0x080034e0

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002944:	f7ff ffdc 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0b5b      	lsrs	r3, r3, #13
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	080034e0 	.word	0x080034e0

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fa3e 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 f8f4 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_ConfigClockSource+0x1c>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0b4      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x186>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5a:	d03e      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0xd4>
 8002a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a60:	f200 8087 	bhi.w	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	f000 8086 	beq.w	8002b78 <HAL_TIM_ConfigClockSource+0x172>
 8002a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a70:	d87f      	bhi.n	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
 8002a72:	2b70      	cmp	r3, #112	; 0x70
 8002a74:	d01a      	beq.n	8002aac <HAL_TIM_ConfigClockSource+0xa6>
 8002a76:	2b70      	cmp	r3, #112	; 0x70
 8002a78:	d87b      	bhi.n	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7a:	2b60      	cmp	r3, #96	; 0x60
 8002a7c:	d050      	beq.n	8002b20 <HAL_TIM_ConfigClockSource+0x11a>
 8002a7e:	2b60      	cmp	r3, #96	; 0x60
 8002a80:	d877      	bhi.n	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
 8002a82:	2b50      	cmp	r3, #80	; 0x50
 8002a84:	d03c      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0xfa>
 8002a86:	2b50      	cmp	r3, #80	; 0x50
 8002a88:	d873      	bhi.n	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
 8002a8a:	2b40      	cmp	r3, #64	; 0x40
 8002a8c:	d058      	beq.n	8002b40 <HAL_TIM_ConfigClockSource+0x13a>
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d86f      	bhi.n	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
 8002a92:	2b30      	cmp	r3, #48	; 0x30
 8002a94:	d064      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0x15a>
 8002a96:	2b30      	cmp	r3, #48	; 0x30
 8002a98:	d86b      	bhi.n	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d060      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0x15a>
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d867      	bhi.n	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d05c      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0x15a>
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d05a      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0x15a>
 8002aaa:	e062      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002abc:	f000 f970 	bl	8002da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ace:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
      break;
 8002ad8:	e04f      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aea:	f000 f959 	bl	8002da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002afc:	609a      	str	r2, [r3, #8]
      break;
 8002afe:	e03c      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f000 f8cd 	bl	8002cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2150      	movs	r1, #80	; 0x50
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f926 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b1e:	e02c      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f000 f8ec 	bl	8002d0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2160      	movs	r1, #96	; 0x60
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f916 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b3e:	e01c      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f000 f8ad 	bl	8002cac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2140      	movs	r1, #64	; 0x40
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f906 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b5e:	e00c      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f000 f8fd 	bl	8002d6a <TIM_ITRx_SetConfig>
      break;
 8002b70:	e003      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      break;
 8002b76:	e000      	b.n	8002b7a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3a      	ldr	r2, [pc, #232]	; (8002c90 <TIM_Base_SetConfig+0xfc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00f      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb2:	d00b      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a37      	ldr	r2, [pc, #220]	; (8002c94 <TIM_Base_SetConfig+0x100>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a36      	ldr	r2, [pc, #216]	; (8002c98 <TIM_Base_SetConfig+0x104>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0x38>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a35      	ldr	r2, [pc, #212]	; (8002c9c <TIM_Base_SetConfig+0x108>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d108      	bne.n	8002bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2b      	ldr	r2, [pc, #172]	; (8002c90 <TIM_Base_SetConfig+0xfc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01b      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bec:	d017      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a28      	ldr	r2, [pc, #160]	; (8002c94 <TIM_Base_SetConfig+0x100>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <TIM_Base_SetConfig+0x104>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00f      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <TIM_Base_SetConfig+0x108>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <TIM_Base_SetConfig+0x10c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a24      	ldr	r2, [pc, #144]	; (8002ca4 <TIM_Base_SetConfig+0x110>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0x8a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a23      	ldr	r2, [pc, #140]	; (8002ca8 <TIM_Base_SetConfig+0x114>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d108      	bne.n	8002c30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <TIM_Base_SetConfig+0xfc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d103      	bne.n	8002c64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d105      	bne.n	8002c82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	611a      	str	r2, [r3, #16]
  }
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40014000 	.word	0x40014000
 8002ca4:	40014400 	.word	0x40014400
 8002ca8:	40014800 	.word	0x40014800

08002cac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0201 	bic.w	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 030a 	bic.w	r3, r3, #10
 8002ce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b087      	sub	sp, #28
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 0210 	bic.w	r2, r3, #16
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	031b      	lsls	r3, r3, #12
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f043 0307 	orr.w	r3, r3, #7
 8002d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e050      	b.n	8002e9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e44:	d013      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a18      	ldr	r2, [pc, #96]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10c      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40014000 	.word	0x40014000

08002ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e042      	b.n	8002f54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd ffb6 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2224      	movs	r2, #36	; 0x24
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f82b 	bl	8002f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f60:	b0c0      	sub	sp, #256	; 0x100
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f78:	68d9      	ldr	r1, [r3, #12]
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	ea40 0301 	orr.w	r3, r0, r1
 8002f84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fb4:	f021 010c 	bic.w	r1, r1, #12
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	6999      	ldr	r1, [r3, #24]
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	ea40 0301 	orr.w	r3, r0, r1
 8002fe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b8f      	ldr	r3, [pc, #572]	; (8003228 <UART_SetConfig+0x2cc>)
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d005      	beq.n	8002ffc <UART_SetConfig+0xa0>
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b8d      	ldr	r3, [pc, #564]	; (800322c <UART_SetConfig+0x2d0>)
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d104      	bne.n	8003006 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ffc:	f7ff fca0 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 8003000:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003004:	e003      	b.n	800300e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003006:	f7ff fc87 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 800300a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003018:	f040 810c 	bne.w	8003234 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800301c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003020:	2200      	movs	r2, #0
 8003022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003026:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800302a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800302e:	4622      	mov	r2, r4
 8003030:	462b      	mov	r3, r5
 8003032:	1891      	adds	r1, r2, r2
 8003034:	65b9      	str	r1, [r7, #88]	; 0x58
 8003036:	415b      	adcs	r3, r3
 8003038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800303a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800303e:	4621      	mov	r1, r4
 8003040:	eb12 0801 	adds.w	r8, r2, r1
 8003044:	4629      	mov	r1, r5
 8003046:	eb43 0901 	adc.w	r9, r3, r1
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003056:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800305a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800305e:	4690      	mov	r8, r2
 8003060:	4699      	mov	r9, r3
 8003062:	4623      	mov	r3, r4
 8003064:	eb18 0303 	adds.w	r3, r8, r3
 8003068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800306c:	462b      	mov	r3, r5
 800306e:	eb49 0303 	adc.w	r3, r9, r3
 8003072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003082:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003086:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800308a:	460b      	mov	r3, r1
 800308c:	18db      	adds	r3, r3, r3
 800308e:	653b      	str	r3, [r7, #80]	; 0x50
 8003090:	4613      	mov	r3, r2
 8003092:	eb42 0303 	adc.w	r3, r2, r3
 8003096:	657b      	str	r3, [r7, #84]	; 0x54
 8003098:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800309c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030a0:	f7fd f898 	bl	80001d4 <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4b61      	ldr	r3, [pc, #388]	; (8003230 <UART_SetConfig+0x2d4>)
 80030aa:	fba3 2302 	umull	r2, r3, r3, r2
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	011c      	lsls	r4, r3, #4
 80030b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030c4:	4642      	mov	r2, r8
 80030c6:	464b      	mov	r3, r9
 80030c8:	1891      	adds	r1, r2, r2
 80030ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80030cc:	415b      	adcs	r3, r3
 80030ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030d4:	4641      	mov	r1, r8
 80030d6:	eb12 0a01 	adds.w	sl, r2, r1
 80030da:	4649      	mov	r1, r9
 80030dc:	eb43 0b01 	adc.w	fp, r3, r1
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f4:	4692      	mov	sl, r2
 80030f6:	469b      	mov	fp, r3
 80030f8:	4643      	mov	r3, r8
 80030fa:	eb1a 0303 	adds.w	r3, sl, r3
 80030fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003102:	464b      	mov	r3, r9
 8003104:	eb4b 0303 	adc.w	r3, fp, r3
 8003108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003118:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800311c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003120:	460b      	mov	r3, r1
 8003122:	18db      	adds	r3, r3, r3
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
 8003126:	4613      	mov	r3, r2
 8003128:	eb42 0303 	adc.w	r3, r2, r3
 800312c:	647b      	str	r3, [r7, #68]	; 0x44
 800312e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003132:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003136:	f7fd f84d 	bl	80001d4 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4611      	mov	r1, r2
 8003140:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <UART_SetConfig+0x2d4>)
 8003142:	fba3 2301 	umull	r2, r3, r3, r1
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2264      	movs	r2, #100	; 0x64
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	1acb      	subs	r3, r1, r3
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <UART_SetConfig+0x2d4>)
 8003158:	fba3 2302 	umull	r2, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003164:	441c      	add	r4, r3
 8003166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316a:	2200      	movs	r2, #0
 800316c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003170:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003174:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003178:	4642      	mov	r2, r8
 800317a:	464b      	mov	r3, r9
 800317c:	1891      	adds	r1, r2, r2
 800317e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003180:	415b      	adcs	r3, r3
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003184:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003188:	4641      	mov	r1, r8
 800318a:	1851      	adds	r1, r2, r1
 800318c:	6339      	str	r1, [r7, #48]	; 0x30
 800318e:	4649      	mov	r1, r9
 8003190:	414b      	adcs	r3, r1
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031a0:	4659      	mov	r1, fp
 80031a2:	00cb      	lsls	r3, r1, #3
 80031a4:	4651      	mov	r1, sl
 80031a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031aa:	4651      	mov	r1, sl
 80031ac:	00ca      	lsls	r2, r1, #3
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	4642      	mov	r2, r8
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031bc:	464b      	mov	r3, r9
 80031be:	460a      	mov	r2, r1
 80031c0:	eb42 0303 	adc.w	r3, r2, r3
 80031c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031dc:	460b      	mov	r3, r1
 80031de:	18db      	adds	r3, r3, r3
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e2:	4613      	mov	r3, r2
 80031e4:	eb42 0303 	adc.w	r3, r2, r3
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031f2:	f7fc ffef 	bl	80001d4 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <UART_SetConfig+0x2d4>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2164      	movs	r1, #100	; 0x64
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	3332      	adds	r3, #50	; 0x32
 800320e:	4a08      	ldr	r2, [pc, #32]	; (8003230 <UART_SetConfig+0x2d4>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	f003 0207 	and.w	r2, r3, #7
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4422      	add	r2, r4
 8003222:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003224:	e106      	b.n	8003434 <UART_SetConfig+0x4d8>
 8003226:	bf00      	nop
 8003228:	40011000 	.word	0x40011000
 800322c:	40011400 	.word	0x40011400
 8003230:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003238:	2200      	movs	r2, #0
 800323a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800323e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003242:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003246:	4642      	mov	r2, r8
 8003248:	464b      	mov	r3, r9
 800324a:	1891      	adds	r1, r2, r2
 800324c:	6239      	str	r1, [r7, #32]
 800324e:	415b      	adcs	r3, r3
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003256:	4641      	mov	r1, r8
 8003258:	1854      	adds	r4, r2, r1
 800325a:	4649      	mov	r1, r9
 800325c:	eb43 0501 	adc.w	r5, r3, r1
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	00eb      	lsls	r3, r5, #3
 800326a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326e:	00e2      	lsls	r2, r4, #3
 8003270:	4614      	mov	r4, r2
 8003272:	461d      	mov	r5, r3
 8003274:	4643      	mov	r3, r8
 8003276:	18e3      	adds	r3, r4, r3
 8003278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800327c:	464b      	mov	r3, r9
 800327e:	eb45 0303 	adc.w	r3, r5, r3
 8003282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032a2:	4629      	mov	r1, r5
 80032a4:	008b      	lsls	r3, r1, #2
 80032a6:	4621      	mov	r1, r4
 80032a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ac:	4621      	mov	r1, r4
 80032ae:	008a      	lsls	r2, r1, #2
 80032b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032b4:	f7fc ff8e 	bl	80001d4 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4b60      	ldr	r3, [pc, #384]	; (8003440 <UART_SetConfig+0x4e4>)
 80032be:	fba3 2302 	umull	r2, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	011c      	lsls	r4, r3, #4
 80032c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	1891      	adds	r1, r2, r2
 80032de:	61b9      	str	r1, [r7, #24]
 80032e0:	415b      	adcs	r3, r3
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e8:	4641      	mov	r1, r8
 80032ea:	1851      	adds	r1, r2, r1
 80032ec:	6139      	str	r1, [r7, #16]
 80032ee:	4649      	mov	r1, r9
 80032f0:	414b      	adcs	r3, r1
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003300:	4659      	mov	r1, fp
 8003302:	00cb      	lsls	r3, r1, #3
 8003304:	4651      	mov	r1, sl
 8003306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800330a:	4651      	mov	r1, sl
 800330c:	00ca      	lsls	r2, r1, #3
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	4603      	mov	r3, r0
 8003314:	4642      	mov	r2, r8
 8003316:	189b      	adds	r3, r3, r2
 8003318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800331c:	464b      	mov	r3, r9
 800331e:	460a      	mov	r2, r1
 8003320:	eb42 0303 	adc.w	r3, r2, r3
 8003324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	67bb      	str	r3, [r7, #120]	; 0x78
 8003332:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003340:	4649      	mov	r1, r9
 8003342:	008b      	lsls	r3, r1, #2
 8003344:	4641      	mov	r1, r8
 8003346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334a:	4641      	mov	r1, r8
 800334c:	008a      	lsls	r2, r1, #2
 800334e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003352:	f7fc ff3f 	bl	80001d4 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4611      	mov	r1, r2
 800335c:	4b38      	ldr	r3, [pc, #224]	; (8003440 <UART_SetConfig+0x4e4>)
 800335e:	fba3 2301 	umull	r2, r3, r3, r1
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2264      	movs	r2, #100	; 0x64
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	1acb      	subs	r3, r1, r3
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	3332      	adds	r3, #50	; 0x32
 8003370:	4a33      	ldr	r2, [pc, #204]	; (8003440 <UART_SetConfig+0x4e4>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337c:	441c      	add	r4, r3
 800337e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003382:	2200      	movs	r2, #0
 8003384:	673b      	str	r3, [r7, #112]	; 0x70
 8003386:	677a      	str	r2, [r7, #116]	; 0x74
 8003388:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800338c:	4642      	mov	r2, r8
 800338e:	464b      	mov	r3, r9
 8003390:	1891      	adds	r1, r2, r2
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	415b      	adcs	r3, r3
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800339c:	4641      	mov	r1, r8
 800339e:	1851      	adds	r1, r2, r1
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	4649      	mov	r1, r9
 80033a4:	414b      	adcs	r3, r1
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033b4:	4659      	mov	r1, fp
 80033b6:	00cb      	lsls	r3, r1, #3
 80033b8:	4651      	mov	r1, sl
 80033ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033be:	4651      	mov	r1, sl
 80033c0:	00ca      	lsls	r2, r1, #3
 80033c2:	4610      	mov	r0, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	4642      	mov	r2, r8
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ce:	464b      	mov	r3, r9
 80033d0:	460a      	mov	r2, r1
 80033d2:	eb42 0303 	adc.w	r3, r2, r3
 80033d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	663b      	str	r3, [r7, #96]	; 0x60
 80033e2:	667a      	str	r2, [r7, #100]	; 0x64
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033f0:	4649      	mov	r1, r9
 80033f2:	008b      	lsls	r3, r1, #2
 80033f4:	4641      	mov	r1, r8
 80033f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033fa:	4641      	mov	r1, r8
 80033fc:	008a      	lsls	r2, r1, #2
 80033fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003402:	f7fc fee7 	bl	80001d4 <__aeabi_uldivmod>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <UART_SetConfig+0x4e4>)
 800340c:	fba3 1302 	umull	r1, r3, r3, r2
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	2164      	movs	r1, #100	; 0x64
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	3332      	adds	r3, #50	; 0x32
 800341e:	4a08      	ldr	r2, [pc, #32]	; (8003440 <UART_SetConfig+0x4e4>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4422      	add	r2, r4
 8003432:	609a      	str	r2, [r3, #8]
}
 8003434:	bf00      	nop
 8003436:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800343a:	46bd      	mov	sp, r7
 800343c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003440:	51eb851f 	.word	0x51eb851f

08003444 <memset>:
 8003444:	4402      	add	r2, r0
 8003446:	4603      	mov	r3, r0
 8003448:	4293      	cmp	r3, r2
 800344a:	d100      	bne.n	800344e <memset+0xa>
 800344c:	4770      	bx	lr
 800344e:	f803 1b01 	strb.w	r1, [r3], #1
 8003452:	e7f9      	b.n	8003448 <memset+0x4>

08003454 <__libc_init_array>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	4d0d      	ldr	r5, [pc, #52]	; (800348c <__libc_init_array+0x38>)
 8003458:	4c0d      	ldr	r4, [pc, #52]	; (8003490 <__libc_init_array+0x3c>)
 800345a:	1b64      	subs	r4, r4, r5
 800345c:	10a4      	asrs	r4, r4, #2
 800345e:	2600      	movs	r6, #0
 8003460:	42a6      	cmp	r6, r4
 8003462:	d109      	bne.n	8003478 <__libc_init_array+0x24>
 8003464:	4d0b      	ldr	r5, [pc, #44]	; (8003494 <__libc_init_array+0x40>)
 8003466:	4c0c      	ldr	r4, [pc, #48]	; (8003498 <__libc_init_array+0x44>)
 8003468:	f000 f826 	bl	80034b8 <_init>
 800346c:	1b64      	subs	r4, r4, r5
 800346e:	10a4      	asrs	r4, r4, #2
 8003470:	2600      	movs	r6, #0
 8003472:	42a6      	cmp	r6, r4
 8003474:	d105      	bne.n	8003482 <__libc_init_array+0x2e>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	f855 3b04 	ldr.w	r3, [r5], #4
 800347c:	4798      	blx	r3
 800347e:	3601      	adds	r6, #1
 8003480:	e7ee      	b.n	8003460 <__libc_init_array+0xc>
 8003482:	f855 3b04 	ldr.w	r3, [r5], #4
 8003486:	4798      	blx	r3
 8003488:	3601      	adds	r6, #1
 800348a:	e7f2      	b.n	8003472 <__libc_init_array+0x1e>
 800348c:	080034f8 	.word	0x080034f8
 8003490:	080034f8 	.word	0x080034f8
 8003494:	080034f8 	.word	0x080034f8
 8003498:	080034fc 	.word	0x080034fc

0800349c <memcpy>:
 800349c:	440a      	add	r2, r1
 800349e:	4291      	cmp	r1, r2
 80034a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80034a4:	d100      	bne.n	80034a8 <memcpy+0xc>
 80034a6:	4770      	bx	lr
 80034a8:	b510      	push	{r4, lr}
 80034aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034b2:	4291      	cmp	r1, r2
 80034b4:	d1f9      	bne.n	80034aa <memcpy+0xe>
 80034b6:	bd10      	pop	{r4, pc}

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr
