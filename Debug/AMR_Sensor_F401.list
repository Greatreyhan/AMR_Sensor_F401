
AMR_Sensor_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005810  08005810  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005818  08005818  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  2000000c  0800582c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  0800582c  000207d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012def  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ad6  00000000  00000000  00032e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  00035948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d60  00000000  00000000  00036a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f57  00000000  00000000  000377c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000149b3  00000000  00000000  0004f71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bffa  00000000  00000000  000640d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049d4  00000000  00000000  001000cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00104aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080057d8 	.word	0x080057d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080057d8 	.word	0x080057d8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000670:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000674:	f000 b970 	b.w	8000958 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9e08      	ldr	r6, [sp, #32]
 8000696:	460d      	mov	r5, r1
 8000698:	4604      	mov	r4, r0
 800069a:	460f      	mov	r7, r1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d14a      	bne.n	8000736 <__udivmoddi4+0xa6>
 80006a0:	428a      	cmp	r2, r1
 80006a2:	4694      	mov	ip, r2
 80006a4:	d965      	bls.n	8000772 <__udivmoddi4+0xe2>
 80006a6:	fab2 f382 	clz	r3, r2
 80006aa:	b143      	cbz	r3, 80006be <__udivmoddi4+0x2e>
 80006ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80006b0:	f1c3 0220 	rsb	r2, r3, #32
 80006b4:	409f      	lsls	r7, r3
 80006b6:	fa20 f202 	lsr.w	r2, r0, r2
 80006ba:	4317      	orrs	r7, r2
 80006bc:	409c      	lsls	r4, r3
 80006be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006c2:	fa1f f58c 	uxth.w	r5, ip
 80006c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80006ca:	0c22      	lsrs	r2, r4, #16
 80006cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80006d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006d4:	fb01 f005 	mul.w	r0, r1, r5
 80006d8:	4290      	cmp	r0, r2
 80006da:	d90a      	bls.n	80006f2 <__udivmoddi4+0x62>
 80006dc:	eb1c 0202 	adds.w	r2, ip, r2
 80006e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80006e4:	f080 811c 	bcs.w	8000920 <__udivmoddi4+0x290>
 80006e8:	4290      	cmp	r0, r2
 80006ea:	f240 8119 	bls.w	8000920 <__udivmoddi4+0x290>
 80006ee:	3902      	subs	r1, #2
 80006f0:	4462      	add	r2, ip
 80006f2:	1a12      	subs	r2, r2, r0
 80006f4:	b2a4      	uxth	r4, r4
 80006f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80006fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80006fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000702:	fb00 f505 	mul.w	r5, r0, r5
 8000706:	42a5      	cmp	r5, r4
 8000708:	d90a      	bls.n	8000720 <__udivmoddi4+0x90>
 800070a:	eb1c 0404 	adds.w	r4, ip, r4
 800070e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000712:	f080 8107 	bcs.w	8000924 <__udivmoddi4+0x294>
 8000716:	42a5      	cmp	r5, r4
 8000718:	f240 8104 	bls.w	8000924 <__udivmoddi4+0x294>
 800071c:	4464      	add	r4, ip
 800071e:	3802      	subs	r0, #2
 8000720:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000724:	1b64      	subs	r4, r4, r5
 8000726:	2100      	movs	r1, #0
 8000728:	b11e      	cbz	r6, 8000732 <__udivmoddi4+0xa2>
 800072a:	40dc      	lsrs	r4, r3
 800072c:	2300      	movs	r3, #0
 800072e:	e9c6 4300 	strd	r4, r3, [r6]
 8000732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000736:	428b      	cmp	r3, r1
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0xbc>
 800073a:	2e00      	cmp	r6, #0
 800073c:	f000 80ed 	beq.w	800091a <__udivmoddi4+0x28a>
 8000740:	2100      	movs	r1, #0
 8000742:	e9c6 0500 	strd	r0, r5, [r6]
 8000746:	4608      	mov	r0, r1
 8000748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800074c:	fab3 f183 	clz	r1, r3
 8000750:	2900      	cmp	r1, #0
 8000752:	d149      	bne.n	80007e8 <__udivmoddi4+0x158>
 8000754:	42ab      	cmp	r3, r5
 8000756:	d302      	bcc.n	800075e <__udivmoddi4+0xce>
 8000758:	4282      	cmp	r2, r0
 800075a:	f200 80f8 	bhi.w	800094e <__udivmoddi4+0x2be>
 800075e:	1a84      	subs	r4, r0, r2
 8000760:	eb65 0203 	sbc.w	r2, r5, r3
 8000764:	2001      	movs	r0, #1
 8000766:	4617      	mov	r7, r2
 8000768:	2e00      	cmp	r6, #0
 800076a:	d0e2      	beq.n	8000732 <__udivmoddi4+0xa2>
 800076c:	e9c6 4700 	strd	r4, r7, [r6]
 8000770:	e7df      	b.n	8000732 <__udivmoddi4+0xa2>
 8000772:	b902      	cbnz	r2, 8000776 <__udivmoddi4+0xe6>
 8000774:	deff      	udf	#255	; 0xff
 8000776:	fab2 f382 	clz	r3, r2
 800077a:	2b00      	cmp	r3, #0
 800077c:	f040 8090 	bne.w	80008a0 <__udivmoddi4+0x210>
 8000780:	1a8a      	subs	r2, r1, r2
 8000782:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000786:	fa1f fe8c 	uxth.w	lr, ip
 800078a:	2101      	movs	r1, #1
 800078c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000790:	fb07 2015 	mls	r0, r7, r5, r2
 8000794:	0c22      	lsrs	r2, r4, #16
 8000796:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800079a:	fb0e f005 	mul.w	r0, lr, r5
 800079e:	4290      	cmp	r0, r2
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x124>
 80007a2:	eb1c 0202 	adds.w	r2, ip, r2
 80007a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x122>
 80007ac:	4290      	cmp	r0, r2
 80007ae:	f200 80cb 	bhi.w	8000948 <__udivmoddi4+0x2b8>
 80007b2:	4645      	mov	r5, r8
 80007b4:	1a12      	subs	r2, r2, r0
 80007b6:	b2a4      	uxth	r4, r4
 80007b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80007bc:	fb07 2210 	mls	r2, r7, r0, r2
 80007c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007c4:	fb0e fe00 	mul.w	lr, lr, r0
 80007c8:	45a6      	cmp	lr, r4
 80007ca:	d908      	bls.n	80007de <__udivmoddi4+0x14e>
 80007cc:	eb1c 0404 	adds.w	r4, ip, r4
 80007d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80007d4:	d202      	bcs.n	80007dc <__udivmoddi4+0x14c>
 80007d6:	45a6      	cmp	lr, r4
 80007d8:	f200 80bb 	bhi.w	8000952 <__udivmoddi4+0x2c2>
 80007dc:	4610      	mov	r0, r2
 80007de:	eba4 040e 	sub.w	r4, r4, lr
 80007e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007e6:	e79f      	b.n	8000728 <__udivmoddi4+0x98>
 80007e8:	f1c1 0720 	rsb	r7, r1, #32
 80007ec:	408b      	lsls	r3, r1
 80007ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80007f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007f6:	fa05 f401 	lsl.w	r4, r5, r1
 80007fa:	fa20 f307 	lsr.w	r3, r0, r7
 80007fe:	40fd      	lsrs	r5, r7
 8000800:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000804:	4323      	orrs	r3, r4
 8000806:	fbb5 f8f9 	udiv	r8, r5, r9
 800080a:	fa1f fe8c 	uxth.w	lr, ip
 800080e:	fb09 5518 	mls	r5, r9, r8, r5
 8000812:	0c1c      	lsrs	r4, r3, #16
 8000814:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000818:	fb08 f50e 	mul.w	r5, r8, lr
 800081c:	42a5      	cmp	r5, r4
 800081e:	fa02 f201 	lsl.w	r2, r2, r1
 8000822:	fa00 f001 	lsl.w	r0, r0, r1
 8000826:	d90b      	bls.n	8000840 <__udivmoddi4+0x1b0>
 8000828:	eb1c 0404 	adds.w	r4, ip, r4
 800082c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000830:	f080 8088 	bcs.w	8000944 <__udivmoddi4+0x2b4>
 8000834:	42a5      	cmp	r5, r4
 8000836:	f240 8085 	bls.w	8000944 <__udivmoddi4+0x2b4>
 800083a:	f1a8 0802 	sub.w	r8, r8, #2
 800083e:	4464      	add	r4, ip
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	b29d      	uxth	r5, r3
 8000844:	fbb4 f3f9 	udiv	r3, r4, r9
 8000848:	fb09 4413 	mls	r4, r9, r3, r4
 800084c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000850:	fb03 fe0e 	mul.w	lr, r3, lr
 8000854:	45a6      	cmp	lr, r4
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x1da>
 8000858:	eb1c 0404 	adds.w	r4, ip, r4
 800085c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000860:	d26c      	bcs.n	800093c <__udivmoddi4+0x2ac>
 8000862:	45a6      	cmp	lr, r4
 8000864:	d96a      	bls.n	800093c <__udivmoddi4+0x2ac>
 8000866:	3b02      	subs	r3, #2
 8000868:	4464      	add	r4, ip
 800086a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800086e:	fba3 9502 	umull	r9, r5, r3, r2
 8000872:	eba4 040e 	sub.w	r4, r4, lr
 8000876:	42ac      	cmp	r4, r5
 8000878:	46c8      	mov	r8, r9
 800087a:	46ae      	mov	lr, r5
 800087c:	d356      	bcc.n	800092c <__udivmoddi4+0x29c>
 800087e:	d053      	beq.n	8000928 <__udivmoddi4+0x298>
 8000880:	b156      	cbz	r6, 8000898 <__udivmoddi4+0x208>
 8000882:	ebb0 0208 	subs.w	r2, r0, r8
 8000886:	eb64 040e 	sbc.w	r4, r4, lr
 800088a:	fa04 f707 	lsl.w	r7, r4, r7
 800088e:	40ca      	lsrs	r2, r1
 8000890:	40cc      	lsrs	r4, r1
 8000892:	4317      	orrs	r7, r2
 8000894:	e9c6 7400 	strd	r7, r4, [r6]
 8000898:	4618      	mov	r0, r3
 800089a:	2100      	movs	r1, #0
 800089c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a0:	f1c3 0120 	rsb	r1, r3, #32
 80008a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008a8:	fa20 f201 	lsr.w	r2, r0, r1
 80008ac:	fa25 f101 	lsr.w	r1, r5, r1
 80008b0:	409d      	lsls	r5, r3
 80008b2:	432a      	orrs	r2, r5
 80008b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b8:	fa1f fe8c 	uxth.w	lr, ip
 80008bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c0:	fb07 1510 	mls	r5, r7, r0, r1
 80008c4:	0c11      	lsrs	r1, r2, #16
 80008c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008ca:	fb00 f50e 	mul.w	r5, r0, lr
 80008ce:	428d      	cmp	r5, r1
 80008d0:	fa04 f403 	lsl.w	r4, r4, r3
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0x258>
 80008d6:	eb1c 0101 	adds.w	r1, ip, r1
 80008da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80008de:	d22f      	bcs.n	8000940 <__udivmoddi4+0x2b0>
 80008e0:	428d      	cmp	r5, r1
 80008e2:	d92d      	bls.n	8000940 <__udivmoddi4+0x2b0>
 80008e4:	3802      	subs	r0, #2
 80008e6:	4461      	add	r1, ip
 80008e8:	1b49      	subs	r1, r1, r5
 80008ea:	b292      	uxth	r2, r2
 80008ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80008f0:	fb07 1115 	mls	r1, r7, r5, r1
 80008f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008f8:	fb05 f10e 	mul.w	r1, r5, lr
 80008fc:	4291      	cmp	r1, r2
 80008fe:	d908      	bls.n	8000912 <__udivmoddi4+0x282>
 8000900:	eb1c 0202 	adds.w	r2, ip, r2
 8000904:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000908:	d216      	bcs.n	8000938 <__udivmoddi4+0x2a8>
 800090a:	4291      	cmp	r1, r2
 800090c:	d914      	bls.n	8000938 <__udivmoddi4+0x2a8>
 800090e:	3d02      	subs	r5, #2
 8000910:	4462      	add	r2, ip
 8000912:	1a52      	subs	r2, r2, r1
 8000914:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000918:	e738      	b.n	800078c <__udivmoddi4+0xfc>
 800091a:	4631      	mov	r1, r6
 800091c:	4630      	mov	r0, r6
 800091e:	e708      	b.n	8000732 <__udivmoddi4+0xa2>
 8000920:	4639      	mov	r1, r7
 8000922:	e6e6      	b.n	80006f2 <__udivmoddi4+0x62>
 8000924:	4610      	mov	r0, r2
 8000926:	e6fb      	b.n	8000720 <__udivmoddi4+0x90>
 8000928:	4548      	cmp	r0, r9
 800092a:	d2a9      	bcs.n	8000880 <__udivmoddi4+0x1f0>
 800092c:	ebb9 0802 	subs.w	r8, r9, r2
 8000930:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000934:	3b01      	subs	r3, #1
 8000936:	e7a3      	b.n	8000880 <__udivmoddi4+0x1f0>
 8000938:	4645      	mov	r5, r8
 800093a:	e7ea      	b.n	8000912 <__udivmoddi4+0x282>
 800093c:	462b      	mov	r3, r5
 800093e:	e794      	b.n	800086a <__udivmoddi4+0x1da>
 8000940:	4640      	mov	r0, r8
 8000942:	e7d1      	b.n	80008e8 <__udivmoddi4+0x258>
 8000944:	46d0      	mov	r8, sl
 8000946:	e77b      	b.n	8000840 <__udivmoddi4+0x1b0>
 8000948:	3d02      	subs	r5, #2
 800094a:	4462      	add	r2, ip
 800094c:	e732      	b.n	80007b4 <__udivmoddi4+0x124>
 800094e:	4608      	mov	r0, r1
 8000950:	e70a      	b.n	8000768 <__udivmoddi4+0xd8>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	e742      	b.n	80007de <__udivmoddi4+0x14e>

08000958 <__aeabi_idiv0>:
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <BNO08X_GetData>:
#include "BNO08X.h"

static uint8_t RX_Data[19];
static UART_HandleTypeDef huart;

void BNO08X_GetData(BNO08X_Typedef *sensorData){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    sensorData->header = RX_Data[0];
 8000964:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <BNO08X_GetData+0xdc>)
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	701a      	strb	r2, [r3, #0]
    sensorData->index = RX_Data[2];
 800096c:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <BNO08X_GetData+0xdc>)
 800096e:	789a      	ldrb	r2, [r3, #2]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	705a      	strb	r2, [r3, #1]
    sensorData->yaw = (int16_t)((RX_Data[4] << 8) | RX_Data[3]);
 8000974:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <BNO08X_GetData+0xdc>)
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	b21a      	sxth	r2, r3
 800097c:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <BNO08X_GetData+0xdc>)
 800097e:	78db      	ldrb	r3, [r3, #3]
 8000980:	b21b      	sxth	r3, r3
 8000982:	4313      	orrs	r3, r2
 8000984:	b21a      	sxth	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	805a      	strh	r2, [r3, #2]
    sensorData->pitch = (int16_t)((RX_Data[6] << 8) | RX_Data[5]);
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <BNO08X_GetData+0xdc>)
 800098c:	799b      	ldrb	r3, [r3, #6]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <BNO08X_GetData+0xdc>)
 8000994:	795b      	ldrb	r3, [r3, #5]
 8000996:	b21b      	sxth	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b21a      	sxth	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	809a      	strh	r2, [r3, #4]
    sensorData->roll = (int16_t)((RX_Data[8] << 8) | RX_Data[7]);
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <BNO08X_GetData+0xdc>)
 80009a2:	7a1b      	ldrb	r3, [r3, #8]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <BNO08X_GetData+0xdc>)
 80009aa:	79db      	ldrb	r3, [r3, #7]
 80009ac:	b21b      	sxth	r3, r3
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	80da      	strh	r2, [r3, #6]
    sensorData->x_acceleration = (int16_t)((RX_Data[10] << 8) | RX_Data[9]);
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <BNO08X_GetData+0xdc>)
 80009b8:	7a9b      	ldrb	r3, [r3, #10]
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b21a      	sxth	r2, r3
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <BNO08X_GetData+0xdc>)
 80009c0:	7a5b      	ldrb	r3, [r3, #9]
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	811a      	strh	r2, [r3, #8]
    sensorData->y_acceleration = (int16_t)((RX_Data[12] << 8) | RX_Data[11]);
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <BNO08X_GetData+0xdc>)
 80009ce:	7b1b      	ldrb	r3, [r3, #12]
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <BNO08X_GetData+0xdc>)
 80009d6:	7adb      	ldrb	r3, [r3, #11]
 80009d8:	b21b      	sxth	r3, r3
 80009da:	4313      	orrs	r3, r2
 80009dc:	b21a      	sxth	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	815a      	strh	r2, [r3, #10]
    sensorData->z_acceleration = (int16_t)((RX_Data[14] << 8) | RX_Data[13]);
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <BNO08X_GetData+0xdc>)
 80009e4:	7b9b      	ldrb	r3, [r3, #14]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <BNO08X_GetData+0xdc>)
 80009ec:	7b5b      	ldrb	r3, [r3, #13]
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	819a      	strh	r2, [r3, #12]

    // MI, MR, Reserved bytes
    for (int i = 0; i < 3; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	e00c      	b.n	8000a18 <BNO08X_GetData+0xbc>
        sensorData->mi_mr_reserved[i] = RX_Data[15 + i];
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	330f      	adds	r3, #15
 8000a02:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <BNO08X_GetData+0xdc>)
 8000a04:	5cd1      	ldrb	r1, [r2, r3]
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	330e      	adds	r3, #14
 8000a0e:	460a      	mov	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	ddef      	ble.n	80009fe <BNO08X_GetData+0xa2>
    }

    sensorData->checksum = RX_Data[18];
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <BNO08X_GetData+0xdc>)
 8000a20:	7c9a      	ldrb	r2, [r3, #18]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	745a      	strb	r2, [r3, #17]

    HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000a26:	2213      	movs	r2, #19
 8000a28:	4903      	ldr	r1, [pc, #12]	; (8000a38 <BNO08X_GetData+0xdc>)
 8000a2a:	4804      	ldr	r0, [pc, #16]	; (8000a3c <BNO08X_GetData+0xe0>)
 8000a2c:	f004 f963 	bl	8004cf6 <HAL_UART_Receive_DMA>
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000028 	.word	0x20000028
 8000a3c:	2000003c 	.word	0x2000003c

08000a40 <BNO08X_Init>:

void BNO08X_Init(UART_HandleTypeDef *huart_instance){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	huart = *huart_instance;
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <BNO08X_Init+0x2c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2348      	movs	r3, #72	; 0x48
 8000a52:	461a      	mov	r2, r3
 8000a54:	f004 feb2 	bl	80057bc <memcpy>
	HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000a58:	2213      	movs	r2, #19
 8000a5a:	4905      	ldr	r1, [pc, #20]	; (8000a70 <BNO08X_Init+0x30>)
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <BNO08X_Init+0x2c>)
 8000a5e:	f004 f94a 	bl	8004cf6 <HAL_UART_Receive_DMA>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000003c 	.word	0x2000003c
 8000a70:	20000028 	.word	0x20000028

08000a74 <hx711_init>:
 *      Author: greatreyhan
 */

#include "HX711.h"

void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	4613      	mov	r3, r2
 8000a82:	80fb      	strh	r3, [r7, #6]
  hx711->clk_gpio = clk_gpio;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000a9a:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	68b8      	ldr	r0, [r7, #8]
 8000ac4:	f002 ff12 	bl	80038ec <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000ad4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000ad6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	6838      	ldr	r0, [r7, #0]
 8000ae0:	f002 ff04 	bl	80038ec <HAL_GPIO_Init>

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <set_scale>:

void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000af8:	edc7 0a01 	vstr	s1, [r7, #4]
	hx711->Ascale = Ascale;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	61da      	str	r2, [r3, #28]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <VoltCurrent_Init>:
//static float const_voltage = 1.488;
static float const_voltage = 1.035;

ADC_HandleTypeDef hadc;

void VoltCurrent_Init(ADC_HandleTypeDef *hadc_config){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	hadc = *hadc_config;
 8000b1c:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <VoltCurrent_Init+0x20>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4610      	mov	r0, r2
 8000b22:	4619      	mov	r1, r3
 8000b24:	2348      	movs	r3, #72	; 0x48
 8000b26:	461a      	mov	r2, r3
 8000b28:	f004 fe48 	bl	80057bc <memcpy>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000dc 	.word	0x200000dc

08000b38 <komunikasi_ctrl_init>:
static UART_HandleTypeDef* huart_ctrl;
static uint8_t rxbuf_get_ctrl[19];
static uint8_t rx_buf_holder[19];
//******************************************** COMMUNICATION TO CONTROL **********************************************//

void komunikasi_ctrl_init(UART_HandleTypeDef* uart_handler){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	huart_ctrl = uart_handler;
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <komunikasi_ctrl_init+0x1c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000013c 	.word	0x2000013c

08000b58 <checksum_ctrl_generator>:

uint8_t checksum_ctrl_generator(uint8_t* arr, uint8_t size){
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
	uint8_t chksm = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; i++) chksm += arr[i];
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73bb      	strb	r3, [r7, #14]
 8000b6c:	e009      	b.n	8000b82 <checksum_ctrl_generator+0x2a>
 8000b6e:	7bbb      	ldrb	r3, [r7, #14]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	4413      	add	r3, r2
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	73bb      	strb	r3, [r7, #14]
 8000b82:	7bba      	ldrb	r2, [r7, #14]
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d3f1      	bcc.n	8000b6e <checksum_ctrl_generator+0x16>
	return (chksm & 0xFF);
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <tx_ctrl_send_BNO08X>:

	if(HAL_UART_Transmit(huart_ctrl, ping, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

bool tx_ctrl_send_BNO08X(BNO08X_Typedef BNO08x){
 8000b98:	b084      	sub	sp, #16
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	f107 0c20 	add.w	ip, r7, #32
 8000ba4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t BNO[] = {0xA5, 0x5A, 0x02, ((BNO08x.yaw >> 8) & 0XFF), ((BNO08x.yaw) & 0XFF), ((BNO08x.pitch >> 8) & 0XFF), ((BNO08x.pitch) & 0XFF), ((BNO08x.roll >> 8) & 0XFF), ((BNO08x.roll) & 0XFF), ((BNO08x.x_acceleration >> 8) & 0XFF), ((BNO08x.x_acceleration) & 0XFF), ((BNO08x.y_acceleration >> 8) & 0XFF), ((BNO08x.y_acceleration) & 0XFF), ((BNO08x.z_acceleration >> 8) & 0XFF), ((BNO08x.z_acceleration) & 0XFF), 0x00, 0x00, 0x00, 0x00};
 8000ba8:	23a5      	movs	r3, #165	; 0xa5
 8000baa:	713b      	strb	r3, [r7, #4]
 8000bac:	235a      	movs	r3, #90	; 0x5a
 8000bae:	717b      	strb	r3, [r7, #5]
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	71bb      	strb	r3, [r7, #6]
 8000bb4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000bb8:	121b      	asrs	r3, r3, #8
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	723b      	strb	r3, [r7, #8]
 8000bc8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000bcc:	121b      	asrs	r3, r3, #8
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	727b      	strb	r3, [r7, #9]
 8000bd4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	72bb      	strb	r3, [r7, #10]
 8000bdc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000be0:	121b      	asrs	r3, r3, #8
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	72fb      	strb	r3, [r7, #11]
 8000be8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	733b      	strb	r3, [r7, #12]
 8000bf0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000bf4:	121b      	asrs	r3, r3, #8
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	737b      	strb	r3, [r7, #13]
 8000bfc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	73bb      	strb	r3, [r7, #14]
 8000c04:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000c08:	121b      	asrs	r3, r3, #8
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	743b      	strb	r3, [r7, #16]
 8000c18:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000c1c:	121b      	asrs	r3, r3, #8
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	747b      	strb	r3, [r7, #17]
 8000c24:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	74bb      	strb	r3, [r7, #18]
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	74fb      	strb	r3, [r7, #19]
 8000c30:	2300      	movs	r3, #0
 8000c32:	753b      	strb	r3, [r7, #20]
 8000c34:	2300      	movs	r3, #0
 8000c36:	757b      	strb	r3, [r7, #21]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	75bb      	strb	r3, [r7, #22]
	BNO[18] = checksum_ctrl_generator(BNO, 19);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2113      	movs	r1, #19
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff89 	bl	8000b58 <checksum_ctrl_generator>
 8000c46:	4603      	mov	r3, r0
 8000c48:	75bb      	strb	r3, [r7, #22]

	if(HAL_UART_Transmit(huart_ctrl, BNO, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <tx_ctrl_send_BNO08X+0xdc>)
 8000c4c:	6818      	ldr	r0, [r3, #0]
 8000c4e:	1d39      	adds	r1, r7, #4
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	2213      	movs	r2, #19
 8000c54:	f003 ffc4 	bl	8004be0 <HAL_UART_Transmit>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <tx_ctrl_send_BNO08X+0xca>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e000      	b.n	8000c64 <tx_ctrl_send_BNO08X+0xcc>
	else return false;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c6e:	b004      	add	sp, #16
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000013c 	.word	0x2000013c

08000c78 <tx_ctrl_send_Astar>:

bool tx_ctrl_send_Astar(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	if(HAL_UART_Transmit(huart_ctrl, rx_buf_holder, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <tx_ctrl_send_Astar+0x24>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2213      	movs	r2, #19
 8000c84:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <tx_ctrl_send_Astar+0x28>)
 8000c86:	f003 ffab 	bl	8004be0 <HAL_UART_Transmit>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <tx_ctrl_send_Astar+0x1c>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <tx_ctrl_send_Astar+0x1e>
	else return false;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000013c 	.word	0x2000013c
 8000ca0:	20000154 	.word	0x20000154

08000ca4 <rx_ctrl_start_get>:

	if(HAL_UART_Transmit(huart_ctrl, odometry, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

void rx_ctrl_start_get(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_ctrl,rxbuf_get_ctrl, 19);
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <rx_ctrl_start_get+0x18>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2213      	movs	r2, #19
 8000cae:	4904      	ldr	r1, [pc, #16]	; (8000cc0 <rx_ctrl_start_get+0x1c>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 f820 	bl	8004cf6 <HAL_UART_Receive_DMA>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000013c 	.word	0x2000013c
 8000cc0:	20000140 	.word	0x20000140

08000cc4 <rx_ctrl_get>:

void rx_ctrl_get(com_ctrl_get_t* get){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 19; i++){
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	f000 bcf5 	b.w	80016be <rx_ctrl_get+0x9fa>
		if((rxbuf_get_ctrl[0] == 0xA5) && (rxbuf_get_ctrl[1] == 0x5A)){
 8000cd4:	4b94      	ldr	r3, [pc, #592]	; (8000f28 <rx_ctrl_get+0x264>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2ba5      	cmp	r3, #165	; 0xa5
 8000cda:	f040 84ed 	bne.w	80016b8 <rx_ctrl_get+0x9f4>
 8000cde:	4b92      	ldr	r3, [pc, #584]	; (8000f28 <rx_ctrl_get+0x264>)
 8000ce0:	785b      	ldrb	r3, [r3, #1]
 8000ce2:	2b5a      	cmp	r3, #90	; 0x5a
 8000ce4:	f040 84e8 	bne.w	80016b8 <rx_ctrl_get+0x9f4>

			// Check for ping
			if(rxbuf_get_ctrl[2] == 0x01){
 8000ce8:	4b8f      	ldr	r3, [pc, #572]	; (8000f28 <rx_ctrl_get+0x264>)
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d104      	bne.n	8000cfa <rx_ctrl_get+0x36>
				get->cmd = PING;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8000cf8:	e0fa      	b.n	8000ef0 <rx_ctrl_get+0x22c>
			}
			// Check for BNO08X Sensor
			else if(rxbuf_get_ctrl[i+2] == 0x02){
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	4a8a      	ldr	r2, [pc, #552]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d00:	5cd3      	ldrb	r3, [r2, r3]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	f040 80f4 	bne.w	8000ef0 <rx_ctrl_get+0x22c>

				if((rxbuf_get_ctrl[i+3] & 0x80)) get->yaw = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3303      	adds	r3, #3
 8000d0c:	4a86      	ldr	r2, [pc, #536]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da10      	bge.n	8000d38 <rx_ctrl_get+0x74>
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	3303      	adds	r3, #3
 8000d1a:	4a83      	ldr	r2, [pc, #524]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d1c:	5cd3      	ldrb	r3, [r2, r3]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3304      	adds	r3, #4
 8000d26:	4980      	ldr	r1, [pc, #512]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d28:	5ccb      	ldrb	r3, [r1, r3]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 8000d36:	e00f      	b.n	8000d58 <rx_ctrl_get+0x94>
				else get->yaw = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	3303      	adds	r3, #3
 8000d3c:	4a7a      	ldr	r2, [pc, #488]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d3e:	5cd3      	ldrb	r3, [r2, r3]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3304      	adds	r3, #4
 8000d48:	4977      	ldr	r1, [pc, #476]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d4a:	5ccb      	ldrb	r3, [r1, r3]
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->pitch = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3305      	adds	r3, #5
 8000d5c:	4a72      	ldr	r2, [pc, #456]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da10      	bge.n	8000d88 <rx_ctrl_get+0xc4>
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	3305      	adds	r3, #5
 8000d6a:	4a6f      	ldr	r2, [pc, #444]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3306      	adds	r3, #6
 8000d76:	496c      	ldr	r1, [pc, #432]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d78:	5ccb      	ldrb	r3, [r1, r3]
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 8000d86:	e00f      	b.n	8000da8 <rx_ctrl_get+0xe4>
				else get->pitch = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3305      	adds	r3, #5
 8000d8c:	4a66      	ldr	r2, [pc, #408]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3306      	adds	r3, #6
 8000d98:	4963      	ldr	r1, [pc, #396]	; (8000f28 <rx_ctrl_get+0x264>)
 8000d9a:	5ccb      	ldrb	r3, [r1, r3]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->roll = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3307      	adds	r3, #7
 8000dac:	4a5e      	ldr	r2, [pc, #376]	; (8000f28 <rx_ctrl_get+0x264>)
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	da10      	bge.n	8000dd8 <rx_ctrl_get+0x114>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3307      	adds	r3, #7
 8000dba:	4a5b      	ldr	r2, [pc, #364]	; (8000f28 <rx_ctrl_get+0x264>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3308      	adds	r3, #8
 8000dc6:	4958      	ldr	r1, [pc, #352]	; (8000f28 <rx_ctrl_get+0x264>)
 8000dc8:	5ccb      	ldrb	r3, [r1, r3]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 8000dd6:	e00f      	b.n	8000df8 <rx_ctrl_get+0x134>
				else get->roll = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3307      	adds	r3, #7
 8000ddc:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <rx_ctrl_get+0x264>)
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	494f      	ldr	r1, [pc, #316]	; (8000f28 <rx_ctrl_get+0x264>)
 8000dea:	5ccb      	ldrb	r3, [r1, r3]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->x_acceleration = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3309      	adds	r3, #9
 8000dfc:	4a4a      	ldr	r2, [pc, #296]	; (8000f28 <rx_ctrl_get+0x264>)
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da10      	bge.n	8000e28 <rx_ctrl_get+0x164>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3309      	adds	r3, #9
 8000e0a:	4a47      	ldr	r2, [pc, #284]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	330a      	adds	r3, #10
 8000e16:	4944      	ldr	r1, [pc, #272]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e18:	5ccb      	ldrb	r3, [r1, r3]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21a      	sxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
 8000e26:	e00f      	b.n	8000e48 <rx_ctrl_get+0x184>
				else get->x_acceleration = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3309      	adds	r3, #9
 8000e2c:	4a3e      	ldr	r2, [pc, #248]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	330a      	adds	r3, #10
 8000e38:	493b      	ldr	r1, [pc, #236]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e3a:	5ccb      	ldrb	r3, [r1, r3]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

				if((rxbuf_get_ctrl[i+11] & 0x80)) get->y_acceleration = ((rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12])-(65536);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	330b      	adds	r3, #11
 8000e4c:	4a36      	ldr	r2, [pc, #216]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	da10      	bge.n	8000e78 <rx_ctrl_get+0x1b4>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	330b      	adds	r3, #11
 8000e5a:	4a33      	ldr	r2, [pc, #204]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	330c      	adds	r3, #12
 8000e66:	4930      	ldr	r1, [pc, #192]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e68:	5ccb      	ldrb	r3, [r1, r3]
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
 8000e76:	e00f      	b.n	8000e98 <rx_ctrl_get+0x1d4>
				else get->y_acceleration = (rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12];
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	330b      	adds	r3, #11
 8000e7c:	4a2a      	ldr	r2, [pc, #168]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	330c      	adds	r3, #12
 8000e88:	4927      	ldr	r1, [pc, #156]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e8a:	5ccb      	ldrb	r3, [r1, r3]
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

				if((rxbuf_get_ctrl[i+13] & 0x80)) get->z_acceleration = ((rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14])-(65536);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	330d      	adds	r3, #13
 8000e9c:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <rx_ctrl_get+0x264>)
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da10      	bge.n	8000ec8 <rx_ctrl_get+0x204>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	330d      	adds	r3, #13
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <rx_ctrl_get+0x264>)
 8000eac:	5cd3      	ldrb	r3, [r2, r3]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	330e      	adds	r3, #14
 8000eb6:	491c      	ldr	r1, [pc, #112]	; (8000f28 <rx_ctrl_get+0x264>)
 8000eb8:	5ccb      	ldrb	r3, [r1, r3]
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
 8000ec6:	e00f      	b.n	8000ee8 <rx_ctrl_get+0x224>
				else get->z_acceleration = (rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14];
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	330d      	adds	r3, #13
 8000ecc:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <rx_ctrl_get+0x264>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	330e      	adds	r3, #14
 8000ed8:	4913      	ldr	r1, [pc, #76]	; (8000f28 <rx_ctrl_get+0x264>)
 8000eda:	5ccb      	ldrb	r3, [r1, r3]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2

				get->cmd = DATA;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2205      	movs	r2, #5
 8000eec:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			}

			// Check for Task Done
			if(rxbuf_get_ctrl[2] == 0x03){
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <rx_ctrl_get+0x264>)
 8000ef2:	789b      	ldrb	r3, [r3, #2]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d12e      	bne.n	8000f56 <rx_ctrl_get+0x292>
				if((rxbuf_get_ctrl[i+3] & 0x80)) get->step = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3303      	adds	r3, #3
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <rx_ctrl_get+0x264>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da12      	bge.n	8000f2c <rx_ctrl_get+0x268>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <rx_ctrl_get+0x264>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3304      	adds	r3, #4
 8000f16:	4904      	ldr	r1, [pc, #16]	; (8000f28 <rx_ctrl_get+0x264>)
 8000f18:	5ccb      	ldrb	r3, [r1, r3]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
 8000f26:	e011      	b.n	8000f4c <rx_ctrl_get+0x288>
 8000f28:	20000140 	.word	0x20000140
				else get->step = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3303      	adds	r3, #3
 8000f30:	4a96      	ldr	r2, [pc, #600]	; (800118c <rx_ctrl_get+0x4c8>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	4993      	ldr	r1, [pc, #588]	; (800118c <rx_ctrl_get+0x4c8>)
 8000f3e:	5ccb      	ldrb	r3, [r1, r3]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

				get->cmd = DATA;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2205      	movs	r2, #5
 8000f50:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8000f54:	e3b0      	b.n	80016b8 <rx_ctrl_get+0x9f4>
			}

			// Check for Kinematic
			else if(rxbuf_get_ctrl[i+2] == 0x05){
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3302      	adds	r3, #2
 8000f5a:	4a8c      	ldr	r2, [pc, #560]	; (800118c <rx_ctrl_get+0x4c8>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	2b05      	cmp	r3, #5
 8000f60:	f040 80a5 	bne.w	80010ae <rx_ctrl_get+0x3ea>

				if((rxbuf_get_ctrl[i+3] & 0x80)) get->Sx = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3303      	adds	r3, #3
 8000f68:	4a88      	ldr	r2, [pc, #544]	; (800118c <rx_ctrl_get+0x4c8>)
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	da10      	bge.n	8000f94 <rx_ctrl_get+0x2d0>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3303      	adds	r3, #3
 8000f76:	4a85      	ldr	r2, [pc, #532]	; (800118c <rx_ctrl_get+0x4c8>)
 8000f78:	5cd3      	ldrb	r3, [r2, r3]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3304      	adds	r3, #4
 8000f82:	4982      	ldr	r1, [pc, #520]	; (800118c <rx_ctrl_get+0x4c8>)
 8000f84:	5ccb      	ldrb	r3, [r1, r3]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
 8000f92:	e00f      	b.n	8000fb4 <rx_ctrl_get+0x2f0>
				else get->Sx = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3303      	adds	r3, #3
 8000f98:	4a7c      	ldr	r2, [pc, #496]	; (800118c <rx_ctrl_get+0x4c8>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	4979      	ldr	r1, [pc, #484]	; (800118c <rx_ctrl_get+0x4c8>)
 8000fa6:	5ccb      	ldrb	r3, [r1, r3]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->Sy = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	4a74      	ldr	r2, [pc, #464]	; (800118c <rx_ctrl_get+0x4c8>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da10      	bge.n	8000fe4 <rx_ctrl_get+0x320>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3305      	adds	r3, #5
 8000fc6:	4a71      	ldr	r2, [pc, #452]	; (800118c <rx_ctrl_get+0x4c8>)
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3306      	adds	r3, #6
 8000fd2:	496e      	ldr	r1, [pc, #440]	; (800118c <rx_ctrl_get+0x4c8>)
 8000fd4:	5ccb      	ldrb	r3, [r1, r3]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
 8000fe2:	e00f      	b.n	8001004 <rx_ctrl_get+0x340>
				else get->Sy = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3305      	adds	r3, #5
 8000fe8:	4a68      	ldr	r2, [pc, #416]	; (800118c <rx_ctrl_get+0x4c8>)
 8000fea:	5cd3      	ldrb	r3, [r2, r3]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3306      	adds	r3, #6
 8000ff4:	4965      	ldr	r1, [pc, #404]	; (800118c <rx_ctrl_get+0x4c8>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->St = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3307      	adds	r3, #7
 8001008:	4a60      	ldr	r2, [pc, #384]	; (800118c <rx_ctrl_get+0x4c8>)
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	da10      	bge.n	8001034 <rx_ctrl_get+0x370>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3307      	adds	r3, #7
 8001016:	4a5d      	ldr	r2, [pc, #372]	; (800118c <rx_ctrl_get+0x4c8>)
 8001018:	5cd3      	ldrb	r3, [r2, r3]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3308      	adds	r3, #8
 8001022:	495a      	ldr	r1, [pc, #360]	; (800118c <rx_ctrl_get+0x4c8>)
 8001024:	5ccb      	ldrb	r3, [r1, r3]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 8001032:	e00f      	b.n	8001054 <rx_ctrl_get+0x390>
				else get->St = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3307      	adds	r3, #7
 8001038:	4a54      	ldr	r2, [pc, #336]	; (800118c <rx_ctrl_get+0x4c8>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3308      	adds	r3, #8
 8001044:	4951      	ldr	r1, [pc, #324]	; (800118c <rx_ctrl_get+0x4c8>)
 8001046:	5ccb      	ldrb	r3, [r1, r3]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21a      	sxth	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->T = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3309      	adds	r3, #9
 8001058:	4a4c      	ldr	r2, [pc, #304]	; (800118c <rx_ctrl_get+0x4c8>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	b25b      	sxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	da10      	bge.n	8001084 <rx_ctrl_get+0x3c0>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3309      	adds	r3, #9
 8001066:	4a49      	ldr	r2, [pc, #292]	; (800118c <rx_ctrl_get+0x4c8>)
 8001068:	5cd3      	ldrb	r3, [r2, r3]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	330a      	adds	r3, #10
 8001072:	4946      	ldr	r1, [pc, #280]	; (800118c <rx_ctrl_get+0x4c8>)
 8001074:	5ccb      	ldrb	r3, [r1, r3]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
 8001082:	e00f      	b.n	80010a4 <rx_ctrl_get+0x3e0>
				else get->T = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3309      	adds	r3, #9
 8001088:	4a40      	ldr	r2, [pc, #256]	; (800118c <rx_ctrl_get+0x4c8>)
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	330a      	adds	r3, #10
 8001094:	493d      	ldr	r1, [pc, #244]	; (800118c <rx_ctrl_get+0x4c8>)
 8001096:	5ccb      	ldrb	r3, [r1, r3]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21a      	sxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6

				get->cmd = DATA;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2205      	movs	r2, #5
 80010a8:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 80010ac:	e304      	b.n	80016b8 <rx_ctrl_get+0x9f4>
			}

			// Check for Encoder
			else if(rxbuf_get_ctrl[i+2] == 0x06){
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3302      	adds	r3, #2
 80010b2:	4a36      	ldr	r2, [pc, #216]	; (800118c <rx_ctrl_get+0x4c8>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	f040 80a7 	bne.w	800120a <rx_ctrl_get+0x546>

				if((rxbuf_get_ctrl[i+3] & 0x80)) get->S3 = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3303      	adds	r3, #3
 80010c0:	4a32      	ldr	r2, [pc, #200]	; (800118c <rx_ctrl_get+0x4c8>)
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	da10      	bge.n	80010ec <rx_ctrl_get+0x428>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3303      	adds	r3, #3
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <rx_ctrl_get+0x4c8>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3304      	adds	r3, #4
 80010da:	492c      	ldr	r1, [pc, #176]	; (800118c <rx_ctrl_get+0x4c8>)
 80010dc:	5ccb      	ldrb	r3, [r1, r3]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 80010ea:	e00f      	b.n	800110c <rx_ctrl_get+0x448>
				else get->S3 = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3303      	adds	r3, #3
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <rx_ctrl_get+0x4c8>)
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3304      	adds	r3, #4
 80010fc:	4923      	ldr	r1, [pc, #140]	; (800118c <rx_ctrl_get+0x4c8>)
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->S4 = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3305      	adds	r3, #5
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <rx_ctrl_get+0x4c8>)
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	da10      	bge.n	800113c <rx_ctrl_get+0x478>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3305      	adds	r3, #5
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <rx_ctrl_get+0x4c8>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3306      	adds	r3, #6
 800112a:	4918      	ldr	r1, [pc, #96]	; (800118c <rx_ctrl_get+0x4c8>)
 800112c:	5ccb      	ldrb	r3, [r1, r3]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21a      	sxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
 800113a:	e00f      	b.n	800115c <rx_ctrl_get+0x498>
				else get->S4 = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3305      	adds	r3, #5
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <rx_ctrl_get+0x4c8>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3306      	adds	r3, #6
 800114c:	490f      	ldr	r1, [pc, #60]	; (800118c <rx_ctrl_get+0x4c8>)
 800114e:	5ccb      	ldrb	r3, [r1, r3]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->V3 = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3307      	adds	r3, #7
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <rx_ctrl_get+0x4c8>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	da12      	bge.n	8001190 <rx_ctrl_get+0x4cc>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3307      	adds	r3, #7
 800116e:	4a07      	ldr	r2, [pc, #28]	; (800118c <rx_ctrl_get+0x4c8>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3308      	adds	r3, #8
 800117a:	4904      	ldr	r1, [pc, #16]	; (800118c <rx_ctrl_get+0x4c8>)
 800117c:	5ccb      	ldrb	r3, [r1, r3]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21a      	sxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 800118a:	e011      	b.n	80011b0 <rx_ctrl_get+0x4ec>
 800118c:	20000140 	.word	0x20000140
				else get->V3 = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3307      	adds	r3, #7
 8001194:	4a8f      	ldr	r2, [pc, #572]	; (80013d4 <rx_ctrl_get+0x710>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3308      	adds	r3, #8
 80011a0:	498c      	ldr	r1, [pc, #560]	; (80013d4 <rx_ctrl_get+0x710>)
 80011a2:	5ccb      	ldrb	r3, [r1, r3]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->V4 = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3309      	adds	r3, #9
 80011b4:	4a87      	ldr	r2, [pc, #540]	; (80013d4 <rx_ctrl_get+0x710>)
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da10      	bge.n	80011e0 <rx_ctrl_get+0x51c>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3309      	adds	r3, #9
 80011c2:	4a84      	ldr	r2, [pc, #528]	; (80013d4 <rx_ctrl_get+0x710>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	330a      	adds	r3, #10
 80011ce:	4981      	ldr	r1, [pc, #516]	; (80013d4 <rx_ctrl_get+0x710>)
 80011d0:	5ccb      	ldrb	r3, [r1, r3]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
 80011de:	e00f      	b.n	8001200 <rx_ctrl_get+0x53c>
				else get->V4 = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3309      	adds	r3, #9
 80011e4:	4a7b      	ldr	r2, [pc, #492]	; (80013d4 <rx_ctrl_get+0x710>)
 80011e6:	5cd3      	ldrb	r3, [r2, r3]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	330a      	adds	r3, #10
 80011f0:	4978      	ldr	r1, [pc, #480]	; (80013d4 <rx_ctrl_get+0x710>)
 80011f2:	5ccb      	ldrb	r3, [r1, r3]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae

				get->cmd = DATA;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2205      	movs	r2, #5
 8001204:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001208:	e256      	b.n	80016b8 <rx_ctrl_get+0x9f4>
			}

			// Check for Odometry
			else if(rxbuf_get_ctrl[2] == 0x15){
 800120a:	4b72      	ldr	r3, [pc, #456]	; (80013d4 <rx_ctrl_get+0x710>)
 800120c:	789b      	ldrb	r3, [r3, #2]
 800120e:	2b15      	cmp	r3, #21
 8001210:	f040 80f7 	bne.w	8001402 <rx_ctrl_get+0x73e>
				if((rxbuf_get_ctrl[i+3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3303      	adds	r3, #3
 8001218:	4a6e      	ldr	r2, [pc, #440]	; (80013d4 <rx_ctrl_get+0x710>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	b25b      	sxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	da10      	bge.n	8001244 <rx_ctrl_get+0x580>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3303      	adds	r3, #3
 8001226:	4a6b      	ldr	r2, [pc, #428]	; (80013d4 <rx_ctrl_get+0x710>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3304      	adds	r3, #4
 8001232:	4968      	ldr	r1, [pc, #416]	; (80013d4 <rx_ctrl_get+0x710>)
 8001234:	5ccb      	ldrb	r3, [r1, r3]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
 8001242:	e00f      	b.n	8001264 <rx_ctrl_get+0x5a0>
				else get->x_pos = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3303      	adds	r3, #3
 8001248:	4a62      	ldr	r2, [pc, #392]	; (80013d4 <rx_ctrl_get+0x710>)
 800124a:	5cd3      	ldrb	r3, [r2, r3]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3304      	adds	r3, #4
 8001254:	495f      	ldr	r1, [pc, #380]	; (80013d4 <rx_ctrl_get+0x710>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21a      	sxth	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3305      	adds	r3, #5
 8001268:	4a5a      	ldr	r2, [pc, #360]	; (80013d4 <rx_ctrl_get+0x710>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	b25b      	sxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	da10      	bge.n	8001294 <rx_ctrl_get+0x5d0>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3305      	adds	r3, #5
 8001276:	4a57      	ldr	r2, [pc, #348]	; (80013d4 <rx_ctrl_get+0x710>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	3306      	adds	r3, #6
 8001282:	4954      	ldr	r1, [pc, #336]	; (80013d4 <rx_ctrl_get+0x710>)
 8001284:	5ccb      	ldrb	r3, [r1, r3]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21a      	sxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
 8001292:	e00f      	b.n	80012b4 <rx_ctrl_get+0x5f0>
				else get->y_pos = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3305      	adds	r3, #5
 8001298:	4a4e      	ldr	r2, [pc, #312]	; (80013d4 <rx_ctrl_get+0x710>)
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3306      	adds	r3, #6
 80012a4:	494b      	ldr	r1, [pc, #300]	; (80013d4 <rx_ctrl_get+0x710>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->t_pos = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3307      	adds	r3, #7
 80012b8:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <rx_ctrl_get+0x710>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	da10      	bge.n	80012e4 <rx_ctrl_get+0x620>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3307      	adds	r3, #7
 80012c6:	4a43      	ldr	r2, [pc, #268]	; (80013d4 <rx_ctrl_get+0x710>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3308      	adds	r3, #8
 80012d2:	4940      	ldr	r1, [pc, #256]	; (80013d4 <rx_ctrl_get+0x710>)
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21a      	sxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
 80012e2:	e00f      	b.n	8001304 <rx_ctrl_get+0x640>
				else get->t_pos = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3307      	adds	r3, #7
 80012e8:	4a3a      	ldr	r2, [pc, #232]	; (80013d4 <rx_ctrl_get+0x710>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3308      	adds	r3, #8
 80012f4:	4937      	ldr	r1, [pc, #220]	; (80013d4 <rx_ctrl_get+0x710>)
 80012f6:	5ccb      	ldrb	r3, [r1, r3]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

				if((rxbuf_get_ctrl[i+9] & 0x80)) get->x_vel = ((rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10])-(65536);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3309      	adds	r3, #9
 8001308:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <rx_ctrl_get+0x710>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	da10      	bge.n	8001334 <rx_ctrl_get+0x670>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3309      	adds	r3, #9
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <rx_ctrl_get+0x710>)
 8001318:	5cd3      	ldrb	r3, [r2, r3]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	330a      	adds	r3, #10
 8001322:	492c      	ldr	r1, [pc, #176]	; (80013d4 <rx_ctrl_get+0x710>)
 8001324:	5ccb      	ldrb	r3, [r1, r3]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21a      	sxth	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 8001332:	e00f      	b.n	8001354 <rx_ctrl_get+0x690>
				else get->x_vel = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10];
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3309      	adds	r3, #9
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <rx_ctrl_get+0x710>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	330a      	adds	r3, #10
 8001344:	4923      	ldr	r1, [pc, #140]	; (80013d4 <rx_ctrl_get+0x710>)
 8001346:	5ccb      	ldrb	r3, [r1, r3]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198

				if((rxbuf_get_ctrl[i+11] & 0x80)) get->y_vel = ((rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12])-(65536);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	330b      	adds	r3, #11
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <rx_ctrl_get+0x710>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	da10      	bge.n	8001384 <rx_ctrl_get+0x6c0>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	330b      	adds	r3, #11
 8001366:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <rx_ctrl_get+0x710>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	330c      	adds	r3, #12
 8001372:	4918      	ldr	r1, [pc, #96]	; (80013d4 <rx_ctrl_get+0x710>)
 8001374:	5ccb      	ldrb	r3, [r1, r3]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
 8001382:	e00f      	b.n	80013a4 <rx_ctrl_get+0x6e0>
				else get->y_vel = (rxbuf_get_ctrl[i+11] << 8) | rxbuf_get_ctrl[i+12];
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	330b      	adds	r3, #11
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <rx_ctrl_get+0x710>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b21a      	sxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	330c      	adds	r3, #12
 8001394:	490f      	ldr	r1, [pc, #60]	; (80013d4 <rx_ctrl_get+0x710>)
 8001396:	5ccb      	ldrb	r3, [r1, r3]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21a      	sxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

				if((rxbuf_get_ctrl[i+13] & 0x80)) get->t_vel = ((rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14])-(65536);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	330d      	adds	r3, #13
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <rx_ctrl_get+0x710>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da12      	bge.n	80013d8 <rx_ctrl_get+0x714>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	330d      	adds	r3, #13
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <rx_ctrl_get+0x710>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21a      	sxth	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	330e      	adds	r3, #14
 80013c2:	4904      	ldr	r1, [pc, #16]	; (80013d4 <rx_ctrl_get+0x710>)
 80013c4:	5ccb      	ldrb	r3, [r1, r3]
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 80013d2:	e011      	b.n	80013f8 <rx_ctrl_get+0x734>
 80013d4:	20000140 	.word	0x20000140
				else get->t_vel = (rxbuf_get_ctrl[i+13] << 8) | rxbuf_get_ctrl[i+14];
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	330d      	adds	r3, #13
 80013dc:	4a53      	ldr	r2, [pc, #332]	; (800152c <rx_ctrl_get+0x868>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	330e      	adds	r3, #14
 80013e8:	4950      	ldr	r1, [pc, #320]	; (800152c <rx_ctrl_get+0x868>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

				get->cmd = DATA;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2205      	movs	r2, #5
 80013fc:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001400:	e15a      	b.n	80016b8 <rx_ctrl_get+0x9f4>

			}

			// Check for "Move" Instruction Given from Jetson Nano
			else if(rxbuf_get_ctrl[i+2] == 0x12){
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3302      	adds	r3, #2
 8001406:	4a49      	ldr	r2, [pc, #292]	; (800152c <rx_ctrl_get+0x868>)
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	2b12      	cmp	r3, #18
 800140c:	f040 8090 	bne.w	8001530 <rx_ctrl_get+0x86c>
				if((rxbuf_get_ctrl[i+3] & 0x80)) get->x_speed = ((rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4])-(65536);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3303      	adds	r3, #3
 8001414:	4a45      	ldr	r2, [pc, #276]	; (800152c <rx_ctrl_get+0x868>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	da10      	bge.n	8001440 <rx_ctrl_get+0x77c>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3303      	adds	r3, #3
 8001422:	4a42      	ldr	r2, [pc, #264]	; (800152c <rx_ctrl_get+0x868>)
 8001424:	5cd3      	ldrb	r3, [r2, r3]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21a      	sxth	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3304      	adds	r3, #4
 800142e:	493f      	ldr	r1, [pc, #252]	; (800152c <rx_ctrl_get+0x868>)
 8001430:	5ccb      	ldrb	r3, [r1, r3]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21a      	sxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 800143e:	e00f      	b.n	8001460 <rx_ctrl_get+0x79c>
				else get->x_speed = (rxbuf_get_ctrl[i+3] << 8) | rxbuf_get_ctrl[i+4];
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3303      	adds	r3, #3
 8001444:	4a39      	ldr	r2, [pc, #228]	; (800152c <rx_ctrl_get+0x868>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3304      	adds	r3, #4
 8001450:	4936      	ldr	r1, [pc, #216]	; (800152c <rx_ctrl_get+0x868>)
 8001452:	5ccb      	ldrb	r3, [r1, r3]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21a      	sxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4

				if((rxbuf_get_ctrl[i+5] & 0x80)) get->y_speed = ((rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6])-(65536);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3305      	adds	r3, #5
 8001464:	4a31      	ldr	r2, [pc, #196]	; (800152c <rx_ctrl_get+0x868>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	da10      	bge.n	8001490 <rx_ctrl_get+0x7cc>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3305      	adds	r3, #5
 8001472:	4a2e      	ldr	r2, [pc, #184]	; (800152c <rx_ctrl_get+0x868>)
 8001474:	5cd3      	ldrb	r3, [r2, r3]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b21a      	sxth	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3306      	adds	r3, #6
 800147e:	492b      	ldr	r1, [pc, #172]	; (800152c <rx_ctrl_get+0x868>)
 8001480:	5ccb      	ldrb	r3, [r1, r3]
 8001482:	b21b      	sxth	r3, r3
 8001484:	4313      	orrs	r3, r2
 8001486:	b21a      	sxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 800148e:	e00f      	b.n	80014b0 <rx_ctrl_get+0x7ec>
				else get->y_speed = (rxbuf_get_ctrl[i+5] << 8) | rxbuf_get_ctrl[i+6];
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3305      	adds	r3, #5
 8001494:	4a25      	ldr	r2, [pc, #148]	; (800152c <rx_ctrl_get+0x868>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3306      	adds	r3, #6
 80014a0:	4922      	ldr	r1, [pc, #136]	; (800152c <rx_ctrl_get+0x868>)
 80014a2:	5ccb      	ldrb	r3, [r1, r3]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6

				if((rxbuf_get_ctrl[i+7] & 0x80)) get->t_speed = ((rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8])-(65536);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3307      	adds	r3, #7
 80014b4:	4a1d      	ldr	r2, [pc, #116]	; (800152c <rx_ctrl_get+0x868>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da10      	bge.n	80014e0 <rx_ctrl_get+0x81c>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3307      	adds	r3, #7
 80014c2:	4a1a      	ldr	r2, [pc, #104]	; (800152c <rx_ctrl_get+0x868>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3308      	adds	r3, #8
 80014ce:	4917      	ldr	r1, [pc, #92]	; (800152c <rx_ctrl_get+0x868>)
 80014d0:	5ccb      	ldrb	r3, [r1, r3]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
 80014de:	e00f      	b.n	8001500 <rx_ctrl_get+0x83c>
				else get->t_speed = (rxbuf_get_ctrl[i+7] << 8) | rxbuf_get_ctrl[i+8];
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3307      	adds	r3, #7
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <rx_ctrl_get+0x868>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3308      	adds	r3, #8
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <rx_ctrl_get+0x868>)
 80014f2:	5ccb      	ldrb	r3, [r1, r3]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8

				get->step = (rxbuf_get_ctrl[i+9] << 8) | rxbuf_get_ctrl[i+10] ;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3309      	adds	r3, #9
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <rx_ctrl_get+0x868>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	330a      	adds	r3, #10
 8001510:	4906      	ldr	r1, [pc, #24]	; (800152c <rx_ctrl_get+0x868>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21a      	sxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

				get->cmd = MOVE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001528:	e0c6      	b.n	80016b8 <rx_ctrl_get+0x9f4>
 800152a:	bf00      	nop
 800152c:	20000140 	.word	0x20000140

			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_ctrl[2] == 0x13){
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <rx_ctrl_get+0xa18>)
 8001532:	789b      	ldrb	r3, [r3, #2]
 8001534:	2b13      	cmp	r3, #19
 8001536:	f040 80bf 	bne.w	80016b8 <rx_ctrl_get+0x9f4>
				get->astar_id = (rxbuf_get_ctrl[i+3]);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3303      	adds	r3, #3
 800153e:	4a67      	ldr	r2, [pc, #412]	; (80016dc <rx_ctrl_get+0xa18>)
 8001540:	5cd2      	ldrb	r2, [r2, r3]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
				get->astar_length = (rxbuf_get_ctrl[i+4]);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3304      	adds	r3, #4
 800154c:	4a63      	ldr	r2, [pc, #396]	; (80016dc <rx_ctrl_get+0xa18>)
 800154e:	5cd2      	ldrb	r2, [r2, r3]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5+0] = (rxbuf_get_ctrl[i+5]);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3305      	adds	r3, #5
 800155a:	4a60      	ldr	r2, [pc, #384]	; (80016dc <rx_ctrl_get+0xa18>)
 800155c:	5cd1      	ldrb	r1, [r2, r3]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3303      	adds	r3, #3
 8001562:	4a5e      	ldr	r2, [pc, #376]	; (80016dc <rx_ctrl_get+0xa18>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	461a      	mov	r2, r3
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	441a      	add	r2, r3
 800156e:	b209      	sxth	r1, r1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5+0] = (rxbuf_get_ctrl[i+6]);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3306      	adds	r3, #6
 800157a:	4a58      	ldr	r2, [pc, #352]	; (80016dc <rx_ctrl_get+0xa18>)
 800157c:	5cd1      	ldrb	r1, [r2, r3]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3303      	adds	r3, #3
 8001582:	4a56      	ldr	r2, [pc, #344]	; (80016dc <rx_ctrl_get+0xa18>)
 8001584:	5cd3      	ldrb	r3, [r2, r3]
 8001586:	461a      	mov	r2, r3
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	441a      	add	r2, r3
 800158e:	b209      	sxth	r1, r1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3264      	adds	r2, #100	; 0x64
 8001594:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5+1] = (rxbuf_get_ctrl[i+7]);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3307      	adds	r3, #7
 800159c:	4a4f      	ldr	r2, [pc, #316]	; (80016dc <rx_ctrl_get+0xa18>)
 800159e:	5cd1      	ldrb	r1, [r2, r3]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3303      	adds	r3, #3
 80015a4:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <rx_ctrl_get+0xa18>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	b209      	sxth	r1, r1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5+1] = (rxbuf_get_ctrl[i+8]);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3308      	adds	r3, #8
 80015be:	4a47      	ldr	r2, [pc, #284]	; (80016dc <rx_ctrl_get+0xa18>)
 80015c0:	5cd1      	ldrb	r1, [r2, r3]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3303      	adds	r3, #3
 80015c6:	4a45      	ldr	r2, [pc, #276]	; (80016dc <rx_ctrl_get+0xa18>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	b209      	sxth	r1, r1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3264      	adds	r2, #100	; 0x64
 80015da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5+2] = (rxbuf_get_ctrl[i+9]);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3309      	adds	r3, #9
 80015e2:	4a3e      	ldr	r2, [pc, #248]	; (80016dc <rx_ctrl_get+0xa18>)
 80015e4:	5cd1      	ldrb	r1, [r2, r3]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3303      	adds	r3, #3
 80015ea:	4a3c      	ldr	r2, [pc, #240]	; (80016dc <rx_ctrl_get+0xa18>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	1c9a      	adds	r2, r3, #2
 80015f8:	b209      	sxth	r1, r1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5+2] = (rxbuf_get_ctrl[i+10]);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	330a      	adds	r3, #10
 8001604:	4a35      	ldr	r2, [pc, #212]	; (80016dc <rx_ctrl_get+0xa18>)
 8001606:	5cd1      	ldrb	r1, [r2, r3]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3303      	adds	r3, #3
 800160c:	4a33      	ldr	r2, [pc, #204]	; (80016dc <rx_ctrl_get+0xa18>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	461a      	mov	r2, r3
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	1c9a      	adds	r2, r3, #2
 800161a:	b209      	sxth	r1, r1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3264      	adds	r2, #100	; 0x64
 8001620:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5+3] = (rxbuf_get_ctrl[i+11]);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	330b      	adds	r3, #11
 8001628:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <rx_ctrl_get+0xa18>)
 800162a:	5cd1      	ldrb	r1, [r2, r3]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3303      	adds	r3, #3
 8001630:	4a2a      	ldr	r2, [pc, #168]	; (80016dc <rx_ctrl_get+0xa18>)
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	461a      	mov	r2, r3
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	1cda      	adds	r2, r3, #3
 800163e:	b209      	sxth	r1, r1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5+3] = (rxbuf_get_ctrl[i+12]);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	330c      	adds	r3, #12
 800164a:	4a24      	ldr	r2, [pc, #144]	; (80016dc <rx_ctrl_get+0xa18>)
 800164c:	5cd1      	ldrb	r1, [r2, r3]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3303      	adds	r3, #3
 8001652:	4a22      	ldr	r2, [pc, #136]	; (80016dc <rx_ctrl_get+0xa18>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	461a      	mov	r2, r3
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	1cda      	adds	r2, r3, #3
 8001660:	b209      	sxth	r1, r1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3264      	adds	r2, #100	; 0x64
 8001666:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[i+3]*5+4] = (rxbuf_get_ctrl[i+13]);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	330d      	adds	r3, #13
 800166e:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <rx_ctrl_get+0xa18>)
 8001670:	5cd1      	ldrb	r1, [r2, r3]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3303      	adds	r3, #3
 8001676:	4a19      	ldr	r2, [pc, #100]	; (80016dc <rx_ctrl_get+0xa18>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	461a      	mov	r2, r3
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	1d1a      	adds	r2, r3, #4
 8001684:	b209      	sxth	r1, r1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[i+3]*5+4] = (rxbuf_get_ctrl[i+14]);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	330e      	adds	r3, #14
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <rx_ctrl_get+0xa18>)
 8001692:	5cd1      	ldrb	r1, [r2, r3]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3303      	adds	r3, #3
 8001698:	4a10      	ldr	r2, [pc, #64]	; (80016dc <rx_ctrl_get+0xa18>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	461a      	mov	r2, r3
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	1d1a      	adds	r2, r3, #4
 80016a6:	b209      	sxth	r1, r1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3264      	adds	r2, #100	; 0x64
 80016ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				get->cmd = MOVE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2203      	movs	r2, #3
 80016b4:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	for(int i = 0; i < 19; i++){
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	f77f ab07 	ble.w	8000cd4 <rx_ctrl_get+0x10>
			}

		}

	}
	HAL_UART_Receive_DMA(huart_ctrl, rxbuf_get_ctrl, 19);
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <rx_ctrl_get+0xa1c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2213      	movs	r2, #19
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <rx_ctrl_get+0xa18>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 fb11 	bl	8004cf6 <HAL_UART_Receive_DMA>
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000140 	.word	0x20000140
 80016e0:	2000013c 	.word	0x2000013c

080016e4 <komunikasi_pc_init>:

//**************************************************** COMMUNICATION TO JETSON NANO *******************************************//

void komunikasi_pc_init(UART_HandleTypeDef* uart_handler){
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	huart_pc = uart_handler;
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <komunikasi_pc_init+0x1c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000124 	.word	0x20000124

08001704 <checksum_pc_generator>:

uint8_t checksum_pc_generator(uint8_t* arr, uint8_t size){
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
	uint8_t chksm = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; i++) chksm += arr[i];
 8001714:	2300      	movs	r3, #0
 8001716:	73bb      	strb	r3, [r7, #14]
 8001718:	e009      	b.n	800172e <checksum_pc_generator+0x2a>
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	4413      	add	r3, r2
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	3301      	adds	r3, #1
 800172c:	73bb      	strb	r3, [r7, #14]
 800172e:	7bba      	ldrb	r2, [r7, #14]
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3f1      	bcc.n	800171a <checksum_pc_generator+0x16>
	return (chksm & 0xFF);
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <rx_pc_start_get>:

	if(HAL_UART_Transmit(huart_pc, odometry, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

void rx_pc_start_get(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_pc,rxbuf_get_pc, 19);
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <rx_pc_start_get+0x18>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2213      	movs	r2, #19
 800174e:	4904      	ldr	r1, [pc, #16]	; (8001760 <rx_pc_start_get+0x1c>)
 8001750:	4618      	mov	r0, r3
 8001752:	f003 fad0 	bl	8004cf6 <HAL_UART_Receive_DMA>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000124 	.word	0x20000124
 8001760:	20000128 	.word	0x20000128

08001764 <rx_pc_get>:

void rx_pc_get(com_pc_get_t* get){
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 19; i++){
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	f000 bc1b 	b.w	8001faa <rx_pc_get+0x846>
		if((rxbuf_get_pc[i] == 0xA5) && (rxbuf_get_pc[i+1] == 0x5A)){
 8001774:	4a88      	ldr	r2, [pc, #544]	; (8001998 <rx_pc_get+0x234>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2ba5      	cmp	r3, #165	; 0xa5
 800177e:	f040 8411 	bne.w	8001fa4 <rx_pc_get+0x840>
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	4a84      	ldr	r2, [pc, #528]	; (8001998 <rx_pc_get+0x234>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	2b5a      	cmp	r3, #90	; 0x5a
 800178c:	f040 840a 	bne.w	8001fa4 <rx_pc_get+0x840>

			// Check for ping
			if(rxbuf_get_pc[2] == 0x01){
 8001790:	4b81      	ldr	r3, [pc, #516]	; (8001998 <rx_pc_get+0x234>)
 8001792:	789b      	ldrb	r3, [r3, #2]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d103      	bne.n	80017a0 <rx_pc_get+0x3c>
				get->cmd = PING;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			}

			// Check for Task Done
			if(rxbuf_get_pc[2] == 0x03){
 80017a0:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <rx_pc_get+0x234>)
 80017a2:	789b      	ldrb	r3, [r3, #2]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d12c      	bne.n	8001802 <rx_pc_get+0x9e>
				if((rxbuf_get_pc[i+3] & 0x80)) get->step = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3303      	adds	r3, #3
 80017ac:	4a7a      	ldr	r2, [pc, #488]	; (8001998 <rx_pc_get+0x234>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da10      	bge.n	80017d8 <rx_pc_get+0x74>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3303      	adds	r3, #3
 80017ba:	4a77      	ldr	r2, [pc, #476]	; (8001998 <rx_pc_get+0x234>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	3304      	adds	r3, #4
 80017c6:	4974      	ldr	r1, [pc, #464]	; (8001998 <rx_pc_get+0x234>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
 80017d6:	e00f      	b.n	80017f8 <rx_pc_get+0x94>
				else get->step = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3303      	adds	r3, #3
 80017dc:	4a6e      	ldr	r2, [pc, #440]	; (8001998 <rx_pc_get+0x234>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3304      	adds	r3, #4
 80017e8:	496b      	ldr	r1, [pc, #428]	; (8001998 <rx_pc_get+0x234>)
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
				get->cmd = DATA;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2205      	movs	r2, #5
 80017fc:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001800:	e3d0      	b.n	8001fa4 <rx_pc_get+0x840>
			}

			// Check for Kinematic
			else if(rxbuf_get_pc[i+2] == 0x05){
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3302      	adds	r3, #2
 8001806:	4a64      	ldr	r2, [pc, #400]	; (8001998 <rx_pc_get+0x234>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	2b05      	cmp	r3, #5
 800180c:	f040 80a5 	bne.w	800195a <rx_pc_get+0x1f6>

				if((rxbuf_get_pc[i+3] & 0x80)) get->Sx = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	3303      	adds	r3, #3
 8001814:	4a60      	ldr	r2, [pc, #384]	; (8001998 <rx_pc_get+0x234>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	da10      	bge.n	8001840 <rx_pc_get+0xdc>
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3303      	adds	r3, #3
 8001822:	4a5d      	ldr	r2, [pc, #372]	; (8001998 <rx_pc_get+0x234>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b21a      	sxth	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3304      	adds	r3, #4
 800182e:	495a      	ldr	r1, [pc, #360]	; (8001998 <rx_pc_get+0x234>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	b21b      	sxth	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b21a      	sxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
 800183e:	e00f      	b.n	8001860 <rx_pc_get+0xfc>
				else get->Sx = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3303      	adds	r3, #3
 8001844:	4a54      	ldr	r2, [pc, #336]	; (8001998 <rx_pc_get+0x234>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b21a      	sxth	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3304      	adds	r3, #4
 8001850:	4951      	ldr	r1, [pc, #324]	; (8001998 <rx_pc_get+0x234>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21a      	sxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0

				if((rxbuf_get_pc[i+5] & 0x80)) get->Sy = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3305      	adds	r3, #5
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <rx_pc_get+0x234>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	b25b      	sxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	da10      	bge.n	8001890 <rx_pc_get+0x12c>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3305      	adds	r3, #5
 8001872:	4a49      	ldr	r2, [pc, #292]	; (8001998 <rx_pc_get+0x234>)
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21a      	sxth	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	3306      	adds	r3, #6
 800187e:	4946      	ldr	r1, [pc, #280]	; (8001998 <rx_pc_get+0x234>)
 8001880:	5ccb      	ldrb	r3, [r1, r3]
 8001882:	b21b      	sxth	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b21a      	sxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
 800188e:	e00f      	b.n	80018b0 <rx_pc_get+0x14c>
				else get->Sy = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3305      	adds	r3, #5
 8001894:	4a40      	ldr	r2, [pc, #256]	; (8001998 <rx_pc_get+0x234>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3306      	adds	r3, #6
 80018a0:	493d      	ldr	r1, [pc, #244]	; (8001998 <rx_pc_get+0x234>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2

				if((rxbuf_get_pc[i+7] & 0x80)) get->St = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3307      	adds	r3, #7
 80018b4:	4a38      	ldr	r2, [pc, #224]	; (8001998 <rx_pc_get+0x234>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da10      	bge.n	80018e0 <rx_pc_get+0x17c>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3307      	adds	r3, #7
 80018c2:	4a35      	ldr	r2, [pc, #212]	; (8001998 <rx_pc_get+0x234>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3308      	adds	r3, #8
 80018ce:	4932      	ldr	r1, [pc, #200]	; (8001998 <rx_pc_get+0x234>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 80018de:	e00f      	b.n	8001900 <rx_pc_get+0x19c>
				else get->St = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3307      	adds	r3, #7
 80018e4:	4a2c      	ldr	r2, [pc, #176]	; (8001998 <rx_pc_get+0x234>)
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3308      	adds	r3, #8
 80018f0:	4929      	ldr	r1, [pc, #164]	; (8001998 <rx_pc_get+0x234>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4

				if((rxbuf_get_pc[i+9] & 0x80)) get->T = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3309      	adds	r3, #9
 8001904:	4a24      	ldr	r2, [pc, #144]	; (8001998 <rx_pc_get+0x234>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	b25b      	sxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	da10      	bge.n	8001930 <rx_pc_get+0x1cc>
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3309      	adds	r3, #9
 8001912:	4a21      	ldr	r2, [pc, #132]	; (8001998 <rx_pc_get+0x234>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	b21a      	sxth	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	330a      	adds	r3, #10
 800191e:	491e      	ldr	r1, [pc, #120]	; (8001998 <rx_pc_get+0x234>)
 8001920:	5ccb      	ldrb	r3, [r1, r3]
 8001922:	b21b      	sxth	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b21a      	sxth	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
 800192e:	e00f      	b.n	8001950 <rx_pc_get+0x1ec>
				else get->T = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3309      	adds	r3, #9
 8001934:	4a18      	ldr	r2, [pc, #96]	; (8001998 <rx_pc_get+0x234>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b21a      	sxth	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	330a      	adds	r3, #10
 8001940:	4915      	ldr	r1, [pc, #84]	; (8001998 <rx_pc_get+0x234>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	b21b      	sxth	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b21a      	sxth	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6

				get->cmd = DATA;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2205      	movs	r2, #5
 8001954:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001958:	e324      	b.n	8001fa4 <rx_pc_get+0x840>

			}

			// Check for Encoder
			else if(rxbuf_get_pc[i+2] == 0x06){
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3302      	adds	r3, #2
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <rx_pc_get+0x234>)
 8001960:	5cd3      	ldrb	r3, [r2, r3]
 8001962:	2b06      	cmp	r3, #6
 8001964:	f040 80a7 	bne.w	8001ab6 <rx_pc_get+0x352>

				if((rxbuf_get_pc[i+3] & 0x80)) get->S3 = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3303      	adds	r3, #3
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <rx_pc_get+0x234>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	b25b      	sxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	da12      	bge.n	800199c <rx_pc_get+0x238>
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3303      	adds	r3, #3
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <rx_pc_get+0x234>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3304      	adds	r3, #4
 8001986:	4904      	ldr	r1, [pc, #16]	; (8001998 <rx_pc_get+0x234>)
 8001988:	5ccb      	ldrb	r3, [r1, r3]
 800198a:	b21b      	sxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	b21a      	sxth	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 8001996:	e011      	b.n	80019bc <rx_pc_get+0x258>
 8001998:	20000128 	.word	0x20000128
				else get->S3 = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3303      	adds	r3, #3
 80019a0:	4a90      	ldr	r2, [pc, #576]	; (8001be4 <rx_pc_get+0x480>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3304      	adds	r3, #4
 80019ac:	498d      	ldr	r1, [pc, #564]	; (8001be4 <rx_pc_get+0x480>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

				if((rxbuf_get_pc[i+5] & 0x80)) get->S4 = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3305      	adds	r3, #5
 80019c0:	4a88      	ldr	r2, [pc, #544]	; (8001be4 <rx_pc_get+0x480>)
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da10      	bge.n	80019ec <rx_pc_get+0x288>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3305      	adds	r3, #5
 80019ce:	4a85      	ldr	r2, [pc, #532]	; (8001be4 <rx_pc_get+0x480>)
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3306      	adds	r3, #6
 80019da:	4982      	ldr	r1, [pc, #520]	; (8001be4 <rx_pc_get+0x480>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
 80019ea:	e00f      	b.n	8001a0c <rx_pc_get+0x2a8>
				else get->S4 = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3305      	adds	r3, #5
 80019f0:	4a7c      	ldr	r2, [pc, #496]	; (8001be4 <rx_pc_get+0x480>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3306      	adds	r3, #6
 80019fc:	4979      	ldr	r1, [pc, #484]	; (8001be4 <rx_pc_get+0x480>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

				if((rxbuf_get_pc[i+7] & 0x80)) get->V3 = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3307      	adds	r3, #7
 8001a10:	4a74      	ldr	r2, [pc, #464]	; (8001be4 <rx_pc_get+0x480>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da10      	bge.n	8001a3c <rx_pc_get+0x2d8>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3307      	adds	r3, #7
 8001a1e:	4a71      	ldr	r2, [pc, #452]	; (8001be4 <rx_pc_get+0x480>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3308      	adds	r3, #8
 8001a2a:	496e      	ldr	r1, [pc, #440]	; (8001be4 <rx_pc_get+0x480>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
 8001a3a:	e00f      	b.n	8001a5c <rx_pc_get+0x2f8>
				else get->V3 = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3307      	adds	r3, #7
 8001a40:	4a68      	ldr	r2, [pc, #416]	; (8001be4 <rx_pc_get+0x480>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	4965      	ldr	r1, [pc, #404]	; (8001be4 <rx_pc_get+0x480>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac

				if((rxbuf_get_pc[i+9] & 0x80)) get->V4 = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3309      	adds	r3, #9
 8001a60:	4a60      	ldr	r2, [pc, #384]	; (8001be4 <rx_pc_get+0x480>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da10      	bge.n	8001a8c <rx_pc_get+0x328>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3309      	adds	r3, #9
 8001a6e:	4a5d      	ldr	r2, [pc, #372]	; (8001be4 <rx_pc_get+0x480>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	330a      	adds	r3, #10
 8001a7a:	495a      	ldr	r1, [pc, #360]	; (8001be4 <rx_pc_get+0x480>)
 8001a7c:	5ccb      	ldrb	r3, [r1, r3]
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
 8001a8a:	e00f      	b.n	8001aac <rx_pc_get+0x348>
				else get->V4 = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3309      	adds	r3, #9
 8001a90:	4a54      	ldr	r2, [pc, #336]	; (8001be4 <rx_pc_get+0x480>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	330a      	adds	r3, #10
 8001a9c:	4951      	ldr	r1, [pc, #324]	; (8001be4 <rx_pc_get+0x480>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae

				get->cmd = DATA;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2205      	movs	r2, #5
 8001ab0:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001ab4:	e276      	b.n	8001fa4 <rx_pc_get+0x840>
			}

			// Check for Data Odometry
			else if(rxbuf_get_pc[i+2] == 0x15){
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3302      	adds	r3, #2
 8001aba:	4a4a      	ldr	r2, [pc, #296]	; (8001be4 <rx_pc_get+0x480>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	2b15      	cmp	r3, #21
 8001ac0:	f040 80f7 	bne.w	8001cb2 <rx_pc_get+0x54e>

				if((rxbuf_get_pc[i+3] & 0x80)) get->x_pos = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	4a46      	ldr	r2, [pc, #280]	; (8001be4 <rx_pc_get+0x480>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da10      	bge.n	8001af4 <rx_pc_get+0x390>
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3303      	adds	r3, #3
 8001ad6:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <rx_pc_get+0x480>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	4940      	ldr	r1, [pc, #256]	; (8001be4 <rx_pc_get+0x480>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
 8001af2:	e00f      	b.n	8001b14 <rx_pc_get+0x3b0>
				else get->x_pos = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3303      	adds	r3, #3
 8001af8:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <rx_pc_get+0x480>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4937      	ldr	r1, [pc, #220]	; (8001be4 <rx_pc_get+0x480>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192

				if((rxbuf_get_pc[i+5] & 0x80)) get->y_pos = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3305      	adds	r3, #5
 8001b18:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <rx_pc_get+0x480>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da10      	bge.n	8001b44 <rx_pc_get+0x3e0>
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3305      	adds	r3, #5
 8001b26:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <rx_pc_get+0x480>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3306      	adds	r3, #6
 8001b32:	492c      	ldr	r1, [pc, #176]	; (8001be4 <rx_pc_get+0x480>)
 8001b34:	5ccb      	ldrb	r3, [r1, r3]
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
 8001b42:	e00f      	b.n	8001b64 <rx_pc_get+0x400>
				else get->y_pos = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3305      	adds	r3, #5
 8001b48:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <rx_pc_get+0x480>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3306      	adds	r3, #6
 8001b54:	4923      	ldr	r1, [pc, #140]	; (8001be4 <rx_pc_get+0x480>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194

				if((rxbuf_get_pc[i+7] & 0x80)) get->t_pos = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3307      	adds	r3, #7
 8001b68:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <rx_pc_get+0x480>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da10      	bge.n	8001b94 <rx_pc_get+0x430>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3307      	adds	r3, #7
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <rx_pc_get+0x480>)
 8001b78:	5cd3      	ldrb	r3, [r2, r3]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3308      	adds	r3, #8
 8001b82:	4918      	ldr	r1, [pc, #96]	; (8001be4 <rx_pc_get+0x480>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
 8001b92:	e00f      	b.n	8001bb4 <rx_pc_get+0x450>
				else get->t_pos = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3307      	adds	r3, #7
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <rx_pc_get+0x480>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	490f      	ldr	r1, [pc, #60]	; (8001be4 <rx_pc_get+0x480>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

				if((rxbuf_get_pc[i+9] & 0x80)) get->x_vel = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3309      	adds	r3, #9
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <rx_pc_get+0x480>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	da12      	bge.n	8001be8 <rx_pc_get+0x484>
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3309      	adds	r3, #9
 8001bc6:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <rx_pc_get+0x480>)
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	330a      	adds	r3, #10
 8001bd2:	4904      	ldr	r1, [pc, #16]	; (8001be4 <rx_pc_get+0x480>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 8001be2:	e011      	b.n	8001c08 <rx_pc_get+0x4a4>
 8001be4:	20000128 	.word	0x20000128
				else get->x_vel = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3309      	adds	r3, #9
 8001bec:	4a85      	ldr	r2, [pc, #532]	; (8001e04 <rx_pc_get+0x6a0>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	330a      	adds	r3, #10
 8001bf8:	4982      	ldr	r1, [pc, #520]	; (8001e04 <rx_pc_get+0x6a0>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198

				if((rxbuf_get_pc[i+11] & 0x80)) get->y_vel = ((rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12])-(65536);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	330b      	adds	r3, #11
 8001c0c:	4a7d      	ldr	r2, [pc, #500]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da10      	bge.n	8001c38 <rx_pc_get+0x4d4>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	330b      	adds	r3, #11
 8001c1a:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	330c      	adds	r3, #12
 8001c26:	4977      	ldr	r1, [pc, #476]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
 8001c36:	e00f      	b.n	8001c58 <rx_pc_get+0x4f4>
				else get->y_vel = (rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12];
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	330b      	adds	r3, #11
 8001c3c:	4a71      	ldr	r2, [pc, #452]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	330c      	adds	r3, #12
 8001c48:	496e      	ldr	r1, [pc, #440]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

				if((rxbuf_get_pc[i+13] & 0x80)) get->t_vel = ((rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14])-(65536);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	330d      	adds	r3, #13
 8001c5c:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da10      	bge.n	8001c88 <rx_pc_get+0x524>
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	330d      	adds	r3, #13
 8001c6a:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	330e      	adds	r3, #14
 8001c76:	4963      	ldr	r1, [pc, #396]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 8001c86:	e00f      	b.n	8001ca8 <rx_pc_get+0x544>
				else get->t_vel = (rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14];
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	330d      	adds	r3, #13
 8001c8c:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	330e      	adds	r3, #14
 8001c98:	495a      	ldr	r1, [pc, #360]	; (8001e04 <rx_pc_get+0x6a0>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
//					rx_buf_holder[j] = rxbuf_get_pc[i+j];
//				}
//				HAL_UART_Transmit(huart_ctrl, rx_buf_holder, 19, 500);
//				#endif

				get->cmd = DATA;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2205      	movs	r2, #5
 8001cac:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001cb0:	e178      	b.n	8001fa4 <rx_pc_get+0x840>

			}

			// Check for "Move" Instruction Given from Jetson Nano
			else if(rxbuf_get_pc[i+2] == 0x12){
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	4a53      	ldr	r2, [pc, #332]	; (8001e04 <rx_pc_get+0x6a0>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	f040 808d 	bne.w	8001dda <rx_pc_get+0x676>
				if((rxbuf_get_pc[i+3] & 0x80)) get->x_speed = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3303      	adds	r3, #3
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	; (8001e04 <rx_pc_get+0x6a0>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da10      	bge.n	8001cf0 <rx_pc_get+0x58c>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3303      	adds	r3, #3
 8001cd2:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <rx_pc_get+0x6a0>)
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	4949      	ldr	r1, [pc, #292]	; (8001e04 <rx_pc_get+0x6a0>)
 8001ce0:	5ccb      	ldrb	r3, [r1, r3]
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8001cee:	e00f      	b.n	8001d10 <rx_pc_get+0x5ac>
				else get->x_speed = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3303      	adds	r3, #3
 8001cf4:	4a43      	ldr	r2, [pc, #268]	; (8001e04 <rx_pc_get+0x6a0>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4940      	ldr	r1, [pc, #256]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4

				if((rxbuf_get_pc[i+5] & 0x80)) get->y_speed = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3305      	adds	r3, #5
 8001d14:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da10      	bge.n	8001d40 <rx_pc_get+0x5dc>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3305      	adds	r3, #5
 8001d22:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21a      	sxth	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3306      	adds	r3, #6
 8001d2e:	4935      	ldr	r1, [pc, #212]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d30:	5ccb      	ldrb	r3, [r1, r3]
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8001d3e:	e00f      	b.n	8001d60 <rx_pc_get+0x5fc>
				else get->y_speed = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3305      	adds	r3, #5
 8001d44:	4a2f      	ldr	r2, [pc, #188]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3306      	adds	r3, #6
 8001d50:	492c      	ldr	r1, [pc, #176]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6

				if((rxbuf_get_pc[i+7] & 0x80)) get->t_speed = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3307      	adds	r3, #7
 8001d64:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	da10      	bge.n	8001d90 <rx_pc_get+0x62c>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3307      	adds	r3, #7
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3308      	adds	r3, #8
 8001d7e:	4921      	ldr	r1, [pc, #132]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
 8001d8e:	e00f      	b.n	8001db0 <rx_pc_get+0x64c>
				else get->t_speed = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3307      	adds	r3, #7
 8001d94:	4a1b      	ldr	r2, [pc, #108]	; (8001e04 <rx_pc_get+0x6a0>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	4918      	ldr	r1, [pc, #96]	; (8001e04 <rx_pc_get+0x6a0>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8

				get->step = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3309      	adds	r3, #9
 8001db4:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <rx_pc_get+0x6a0>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	330a      	adds	r3, #10
 8001dc0:	4910      	ldr	r1, [pc, #64]	; (8001e04 <rx_pc_get+0x6a0>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

				get->cmd = MOVE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
 8001dd8:	e0e4      	b.n	8001fa4 <rx_pc_get+0x840>
//				HAL_UART_Transmit(huart_ctrl, rx_buf_holder, 19, TIMEOUT_SEND);
//				#endif
			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_pc[2] == 0x13){
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <rx_pc_get+0x6a0>)
 8001ddc:	789b      	ldrb	r3, [r3, #2]
 8001dde:	2b13      	cmp	r3, #19
 8001de0:	f040 80e0 	bne.w	8001fa4 <rx_pc_get+0x840>
				uint8_t chk = checksum_pc_generator(rxbuf_get_pc,18);
 8001de4:	2112      	movs	r1, #18
 8001de6:	4807      	ldr	r0, [pc, #28]	; (8001e04 <rx_pc_get+0x6a0>)
 8001de8:	f7ff fc8c 	bl	8001704 <checksum_pc_generator>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
				if(chk == rxbuf_get_pc[18]){
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <rx_pc_get+0x6a0>)
 8001df2:	7c9b      	ldrb	r3, [r3, #18]
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	f040 80d4 	bne.w	8001fa4 <rx_pc_get+0x840>
					for(int j=0; j<19; j++){
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	e00e      	b.n	8001e20 <rx_pc_get+0x6bc>
 8001e02:	bf00      	nop
 8001e04:	20000128 	.word	0x20000128
						rx_buf_holder[j] = rxbuf_get_pc[j];
 8001e08:	4a6f      	ldr	r2, [pc, #444]	; (8001fc8 <rx_pc_get+0x864>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	7819      	ldrb	r1, [r3, #0]
 8001e10:	4a6e      	ldr	r2, [pc, #440]	; (8001fcc <rx_pc_get+0x868>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	460a      	mov	r2, r1
 8001e18:	701a      	strb	r2, [r3, #0]
					for(int j=0; j<19; j++){
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	ddf0      	ble.n	8001e08 <rx_pc_get+0x6a4>
					}
				get->astar_id = (rxbuf_get_pc[i+3]);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3303      	adds	r3, #3
 8001e2a:	4a67      	ldr	r2, [pc, #412]	; (8001fc8 <rx_pc_get+0x864>)
 8001e2c:	5cd2      	ldrb	r2, [r2, r3]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
				get->astar_length = (rxbuf_get_pc[i+4]);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4a63      	ldr	r2, [pc, #396]	; (8001fc8 <rx_pc_get+0x864>)
 8001e3a:	5cd2      	ldrb	r2, [r2, r3]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+0] = (rxbuf_get_pc[i+5]);
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3305      	adds	r3, #5
 8001e46:	4a60      	ldr	r2, [pc, #384]	; (8001fc8 <rx_pc_get+0x864>)
 8001e48:	5cd1      	ldrb	r1, [r2, r3]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	; (8001fc8 <rx_pc_get+0x864>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	461a      	mov	r2, r3
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	b209      	sxth	r1, r1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+0] = (rxbuf_get_pc[i+6]);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3306      	adds	r3, #6
 8001e66:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <rx_pc_get+0x864>)
 8001e68:	5cd1      	ldrb	r1, [r2, r3]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <rx_pc_get+0x864>)
 8001e70:	5cd3      	ldrb	r3, [r2, r3]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	b209      	sxth	r1, r1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3264      	adds	r2, #100	; 0x64
 8001e80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+1] = (rxbuf_get_pc[i+7]);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3307      	adds	r3, #7
 8001e88:	4a4f      	ldr	r2, [pc, #316]	; (8001fc8 <rx_pc_get+0x864>)
 8001e8a:	5cd1      	ldrb	r1, [r2, r3]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3303      	adds	r3, #3
 8001e90:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <rx_pc_get+0x864>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	b209      	sxth	r1, r1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+1] = (rxbuf_get_pc[i+8]);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3308      	adds	r3, #8
 8001eaa:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <rx_pc_get+0x864>)
 8001eac:	5cd1      	ldrb	r1, [r2, r3]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <rx_pc_get+0x864>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	b209      	sxth	r1, r1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3264      	adds	r2, #100	; 0x64
 8001ec6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+2] = (rxbuf_get_pc[i+9]);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3309      	adds	r3, #9
 8001ece:	4a3e      	ldr	r2, [pc, #248]	; (8001fc8 <rx_pc_get+0x864>)
 8001ed0:	5cd1      	ldrb	r1, [r2, r3]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3303      	adds	r3, #3
 8001ed6:	4a3c      	ldr	r2, [pc, #240]	; (8001fc8 <rx_pc_get+0x864>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	461a      	mov	r2, r3
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	1c9a      	adds	r2, r3, #2
 8001ee4:	b209      	sxth	r1, r1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+2] = (rxbuf_get_pc[i+10]);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	330a      	adds	r3, #10
 8001ef0:	4a35      	ldr	r2, [pc, #212]	; (8001fc8 <rx_pc_get+0x864>)
 8001ef2:	5cd1      	ldrb	r1, [r2, r3]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3303      	adds	r3, #3
 8001ef8:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <rx_pc_get+0x864>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	1c9a      	adds	r2, r3, #2
 8001f06:	b209      	sxth	r1, r1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3264      	adds	r2, #100	; 0x64
 8001f0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+3] = (rxbuf_get_pc[i+11]);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	330b      	adds	r3, #11
 8001f14:	4a2c      	ldr	r2, [pc, #176]	; (8001fc8 <rx_pc_get+0x864>)
 8001f16:	5cd1      	ldrb	r1, [r2, r3]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3303      	adds	r3, #3
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <rx_pc_get+0x864>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	1cda      	adds	r2, r3, #3
 8001f2a:	b209      	sxth	r1, r1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+3] = (rxbuf_get_pc[i+12]);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	330c      	adds	r3, #12
 8001f36:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <rx_pc_get+0x864>)
 8001f38:	5cd1      	ldrb	r1, [r2, r3]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <rx_pc_get+0x864>)
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	1cda      	adds	r2, r3, #3
 8001f4c:	b209      	sxth	r1, r1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3264      	adds	r2, #100	; 0x64
 8001f52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+4] = (rxbuf_get_pc[i+13]);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	330d      	adds	r3, #13
 8001f5a:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <rx_pc_get+0x864>)
 8001f5c:	5cd1      	ldrb	r1, [r2, r3]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3303      	adds	r3, #3
 8001f62:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <rx_pc_get+0x864>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	1d1a      	adds	r2, r3, #4
 8001f70:	b209      	sxth	r1, r1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+4] = (rxbuf_get_pc[i+14]);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	330e      	adds	r3, #14
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <rx_pc_get+0x864>)
 8001f7e:	5cd1      	ldrb	r1, [r2, r3]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3303      	adds	r3, #3
 8001f84:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <rx_pc_get+0x864>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	1d1a      	adds	r2, r3, #4
 8001f92:	b209      	sxth	r1, r1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3264      	adds	r2, #100	; 0x64
 8001f98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				get->cmd = MOVE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	for(int i = 0; i < 19; i++){
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	f77f abe1 	ble.w	8001774 <rx_pc_get+0x10>
				}
			}

		}
	}
	HAL_UART_Receive_DMA(huart_pc, rxbuf_get_pc, 19);
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <rx_pc_get+0x86c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2213      	movs	r2, #19
 8001fb8:	4903      	ldr	r1, [pc, #12]	; (8001fc8 <rx_pc_get+0x864>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f002 fe9b 	bl	8004cf6 <HAL_UART_Receive_DMA>
}
 8001fc0:	bf00      	nop
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000128 	.word	0x20000128
 8001fcc:	20000154 	.word	0x20000154
 8001fd0:	20000124 	.word	0x20000124
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <HAL_UART_RxCpltCallback>:
bool is_calibrated = false;
uint16_t id_astar= 0;
////////////////////////////////////// COMMUNICATION CALLBACK ////////////////////////////////////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <HAL_UART_RxCpltCallback+0xd0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d147      	bne.n	8002078 <HAL_UART_RxCpltCallback+0xa0>

		// Callback for BNO08X Data
		#ifdef USE_BNO08X
	    BNO08X_GetData(&BNO08x_Data);
 8001fe8:	4830      	ldr	r0, [pc, #192]	; (80020ac <HAL_UART_RxCpltCallback+0xd4>)
 8001fea:	f7fe fcb7 	bl	800095c <BNO08X_GetData>
	    // Handling Calibration
	    if(!is_calibrated && BNO08x_Data.yaw != 0){
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_UART_RxCpltCallback+0xd8>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f083 0301 	eor.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d04c      	beq.n	8002096 <HAL_UART_RxCpltCallback+0xbe>
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_UART_RxCpltCallback+0xd4>)
 8001ffe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d047      	beq.n	8002096 <HAL_UART_RxCpltCallback+0xbe>
	    	if(sample_yaw >= 4){
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_UART_RxCpltCallback+0xdc>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d924      	bls.n	8002058 <HAL_UART_RxCpltCallback+0x80>
	    		// Find Average value
	    		double sum_yaw = 0;
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	e9c7 2302 	strd	r2, r3, [r7, #8]
//	    		for(uint8_t i = 0; i < 5; i++){
//	    			sum_yaw += diff_data_yaw[i];
//	    		}
//	    		sum_yaw = sum_yaw/5;

	    		sum_yaw = diff_data_yaw[4] - diff_data_yaw[0];
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_UART_RxCpltCallback+0xe0>)
 800201c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002020:	461a      	mov	r2, r3
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_UART_RxCpltCallback+0xe0>)
 8002024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa26 	bl	800047c <__aeabi_i2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	e9c7 2302 	strd	r2, r3, [r7, #8]

	    		// Decision making
	    		if(sum_yaw > 10000){
 8002038:	a319      	add	r3, pc, #100	; (adr r3, 80020a0 <HAL_UART_RxCpltCallback+0xc8>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002042:	f7fe fb03 	bl	800064c <__aeabi_dcmpgt>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_UART_RxCpltCallback+0x7a>
	    			// RESET STM
	    			HAL_NVIC_SystemReset();
 800204c:	f001 f8cd 	bl	80031ea <HAL_NVIC_SystemReset>
 8002050:	e002      	b.n	8002058 <HAL_UART_RxCpltCallback+0x80>
	    		}
	    		else{
	    			is_calibrated = true;
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_UART_RxCpltCallback+0xd8>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
	    		}
	    	}
	    	diff_data_yaw[sample_yaw] = BNO08x_Data.yaw;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_UART_RxCpltCallback+0xdc>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <HAL_UART_RxCpltCallback+0xd4>)
 8002060:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_UART_RxCpltCallback+0xe0>)
 8002066:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	    	sample_yaw++;
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_UART_RxCpltCallback+0xdc>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_UART_RxCpltCallback+0xdc>)
 8002074:	701a      	strb	r2, [r3, #0]
		#ifdef USE_COM_CONTROL
		rx_ctrl_get(&message_from_ctrl);

		#endif
	}
}
 8002076:	e00e      	b.n	8002096 <HAL_UART_RxCpltCallback+0xbe>
	} else if (huart == &huart1) {
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_UART_RxCpltCallback+0xe4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d103      	bne.n	8002088 <HAL_UART_RxCpltCallback+0xb0>
		rx_pc_get(&message_from_pc);
 8002080:	480f      	ldr	r0, [pc, #60]	; (80020c0 <HAL_UART_RxCpltCallback+0xe8>)
 8002082:	f7ff fb6f 	bl	8001764 <rx_pc_get>
}
 8002086:	e006      	b.n	8002096 <HAL_UART_RxCpltCallback+0xbe>
	} else if(huart == &huart6){
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_UART_RxCpltCallback+0xec>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d102      	bne.n	8002096 <HAL_UART_RxCpltCallback+0xbe>
		rx_ctrl_get(&message_from_ctrl);
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <HAL_UART_RxCpltCallback+0xf0>)
 8002092:	f7fe fe17 	bl	8000cc4 <rx_ctrl_get>
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40c38800 	.word	0x40c38800
 80020a8:	20000618 	.word	0x20000618
 80020ac:	20000168 	.word	0x20000168
 80020b0:	200007d3 	.word	0x200007d3
 80020b4:	200007d2 	.word	0x200007d2
 80020b8:	200007c8 	.word	0x200007c8
 80020bc:	200005d0 	.word	0x200005d0
 80020c0:	200001a0 	.word	0x200001a0
 80020c4:	20000660 	.word	0x20000660
 80020c8:	20000370 	.word	0x20000370

080020cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d2:	f000 fd99 	bl	8002c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d6:	f000 f85d 	bl	8002194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020da:	f000 fa43 	bl	8002564 <MX_GPIO_Init>
  MX_DMA_Init();
 80020de:	f000 fa03 	bl	80024e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80020e2:	f000 f8c1 	bl	8002268 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80020e6:	f000 f981 	bl	80023ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80020ea:	f000 f9a9 	bl	8002440 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80020ee:	f000 f9d1 	bl	8002494 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80020f2:	f000 f92b 	bl	800234c <MX_TIM1_Init>
  MX_SPI1_Init();
 80020f6:	f000 f8f1 	bl	80022dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////// SENSOR INITIALIZATION ////////////////////////////////////

    // BNO08X initialization
    #ifdef USE_BNO08X
    BNO08X_Init(&huart2);
 80020fa:	481b      	ldr	r0, [pc, #108]	; (8002168 <main+0x9c>)
 80020fc:	f7fe fca0 	bl	8000a40 <BNO08X_Init>
    DHT_Start();
    #endif

    // Volt & Current Initialization
    #ifdef USE_VOLT_CURRENT
    VoltCurrent_Init(&hadc1);
 8002100:	481a      	ldr	r0, [pc, #104]	; (800216c <main+0xa0>)
 8002102:	f7fe fd07 	bl	8000b14 <VoltCurrent_Init>
    #endif

    // Load cell Initialization
    #ifdef USE_LOADCELL
//    hx711_calibration(&Loadcell_Data, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1);
    hx711_init(&Loadcell_Data, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1);
 8002106:	2302      	movs	r3, #2
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <main+0xa4>)
 800210c:	2201      	movs	r2, #1
 800210e:	4918      	ldr	r1, [pc, #96]	; (8002170 <main+0xa4>)
 8002110:	4818      	ldr	r0, [pc, #96]	; (8002174 <main+0xa8>)
 8002112:	f7fe fcaf 	bl	8000a74 <hx711_init>
    set_scale(&Loadcell_Data, 115.598, 72.818);
 8002116:	eddf 0a18 	vldr	s1, [pc, #96]	; 8002178 <main+0xac>
 800211a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800217c <main+0xb0>
 800211e:	4815      	ldr	r0, [pc, #84]	; (8002174 <main+0xa8>)
 8002120:	f7fe fce4 	bl	8000aec <set_scale>
    #endif

    // Initialize Communication to Control
    #ifdef USE_COM_CONTROL
    komunikasi_ctrl_init(&huart6);
 8002124:	4816      	ldr	r0, [pc, #88]	; (8002180 <main+0xb4>)
 8002126:	f7fe fd07 	bl	8000b38 <komunikasi_ctrl_init>
    rx_ctrl_start_get();
 800212a:	f7fe fdbb 	bl	8000ca4 <rx_ctrl_start_get>
    #endif

    // Initialize Communication to PC
    #ifdef USE_COM_PC
    komunikasi_pc_init(&huart1);
 800212e:	4815      	ldr	r0, [pc, #84]	; (8002184 <main+0xb8>)
 8002130:	f7ff fad8 	bl	80016e4 <komunikasi_pc_init>
    rx_pc_start_get();
 8002134:	f7ff fb06 	bl	8001744 <rx_pc_start_get>
    HAL_Delay(1000);
    fillScreen(BLACK);
    setRotation(135);
    #endif

    HAL_Delay(5000);
 8002138:	f241 3088 	movw	r0, #5000	; 0x1388
 800213c:	f000 fdd6 	bl	8002cec <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002146:	4810      	ldr	r0, [pc, #64]	; (8002188 <main+0xbc>)
 8002148:	f001 fd54 	bl	8003bf4 <HAL_GPIO_WritePin>


	  ////////////////////////////////////// SENDING DATA TO CONTROL ///////////////////////////

	  // Sending BNO08X Data
	  tx_ctrl_send_Astar();
 800214c:	f7fe fd94 	bl	8000c78 <tx_ctrl_send_Astar>
	  if(is_calibrated) tx_ctrl_send_BNO08X(BNO08x_Data);
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <main+0xc0>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f9      	beq.n	800214c <main+0x80>
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <main+0xc4>)
 800215a:	8a1a      	ldrh	r2, [r3, #16]
 800215c:	f8ad 2000 	strh.w	r2, [sp]
 8002160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002162:	f7fe fd19 	bl	8000b98 <tx_ctrl_send_BNO08X>
	  tx_ctrl_send_Astar();
 8002166:	e7f1      	b.n	800214c <main+0x80>
 8002168:	20000618 	.word	0x20000618
 800216c:	20000540 	.word	0x20000540
 8002170:	40020400 	.word	0x40020400
 8002174:	2000017c 	.word	0x2000017c
 8002178:	4291a2d1 	.word	0x4291a2d1
 800217c:	42e7322d 	.word	0x42e7322d
 8002180:	20000660 	.word	0x20000660
 8002184:	200005d0 	.word	0x200005d0
 8002188:	40020800 	.word	0x40020800
 800218c:	200007d3 	.word	0x200007d3
 8002190:	20000168 	.word	0x20000168

08002194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b094      	sub	sp, #80	; 0x50
 8002198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219a:	f107 0320 	add.w	r3, r7, #32
 800219e:	2230      	movs	r2, #48	; 0x30
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fade 	bl	8005764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <SystemClock_Config+0xcc>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <SystemClock_Config+0xcc>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6413      	str	r3, [r2, #64]	; 0x40
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <SystemClock_Config+0xcc>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <SystemClock_Config+0xd0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021e0:	4a20      	ldr	r2, [pc, #128]	; (8002264 <SystemClock_Config+0xd0>)
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <SystemClock_Config+0xd0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fc:	2310      	movs	r3, #16
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002200:	2302      	movs	r3, #2
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002208:	2308      	movs	r3, #8
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800220c:	2354      	movs	r3, #84	; 0x54
 800220e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002210:	2302      	movs	r3, #2
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002214:	2304      	movs	r3, #4
 8002216:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	4618      	mov	r0, r3
 800221e:	f001 fd03 	bl	8003c28 <HAL_RCC_OscConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002228:	f000 fa44 	bl	80026b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222c:	230f      	movs	r3, #15
 800222e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002230:	2302      	movs	r3, #2
 8002232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	2102      	movs	r1, #2
 8002248:	4618      	mov	r0, r3
 800224a:	f001 ff65 	bl	8004118 <HAL_RCC_ClockConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002254:	f000 fa2e 	bl	80026b4 <Error_Handler>
  }
}
 8002258:	bf00      	nop
 800225a:	3750      	adds	r7, #80	; 0x50
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	40007000 	.word	0x40007000

08002268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <MX_ADC1_Init+0x68>)
 800226e:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <MX_ADC1_Init+0x6c>)
 8002270:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_ADC1_Init+0x68>)
 8002274:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002278:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <MX_ADC1_Init+0x68>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <MX_ADC1_Init+0x68>)
 8002282:	2201      	movs	r2, #1
 8002284:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <MX_ADC1_Init+0x68>)
 8002288:	2201      	movs	r2, #1
 800228a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <MX_ADC1_Init+0x68>)
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_ADC1_Init+0x68>)
 8002296:	2200      	movs	r2, #0
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <MX_ADC1_Init+0x68>)
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <MX_ADC1_Init+0x70>)
 800229e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MX_ADC1_Init+0x68>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MX_ADC1_Init+0x68>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_ADC1_Init+0x68>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_ADC1_Init+0x68>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_ADC1_Init+0x68>)
 80022bc:	f000 fd3a 	bl	8002d34 <HAL_ADC_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80022c6:	f000 f9f5 	bl	80026b4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000540 	.word	0x20000540
 80022d4:	40012000 	.word	0x40012000
 80022d8:	0f000001 	.word	0x0f000001

080022dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <MX_SPI1_Init+0x68>)
 80022e2:	4a19      	ldr	r2, [pc, #100]	; (8002348 <MX_SPI1_Init+0x6c>)
 80022e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <MX_SPI1_Init+0x68>)
 80022e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <MX_SPI1_Init+0x68>)
 80022f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <MX_SPI1_Init+0x68>)
 80022f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_SPI1_Init+0x68>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_SPI1_Init+0x68>)
 8002306:	2200      	movs	r2, #0
 8002308:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_SPI1_Init+0x68>)
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_SPI1_Init+0x68>)
 8002314:	2238      	movs	r2, #56	; 0x38
 8002316:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <MX_SPI1_Init+0x68>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_SPI1_Init+0x68>)
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <MX_SPI1_Init+0x68>)
 8002326:	2200      	movs	r2, #0
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_SPI1_Init+0x68>)
 800232c:	220a      	movs	r2, #10
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <MX_SPI1_Init+0x68>)
 8002332:	f002 f8d1 	bl	80044d8 <HAL_SPI_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800233c:	f000 f9ba 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000084 	.word	0x20000084
 8002348:	40013000 	.word	0x40013000

0800234c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <MX_TIM1_Init+0x98>)
 800236a:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <MX_TIM1_Init+0x9c>)
 800236c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM1_Init+0x98>)
 8002370:	2253      	movs	r2, #83	; 0x53
 8002372:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <MX_TIM1_Init+0x98>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM1_Init+0x98>)
 800237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002380:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM1_Init+0x98>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <MX_TIM1_Init+0x98>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <MX_TIM1_Init+0x98>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002394:	4813      	ldr	r0, [pc, #76]	; (80023e4 <MX_TIM1_Init+0x98>)
 8002396:	f002 f928 	bl	80045ea <HAL_TIM_Base_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80023a0:	f000 f988 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <MX_TIM1_Init+0x98>)
 80023b2:	f002 f969 	bl	8004688 <HAL_TIM_ConfigClockSource>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80023bc:	f000 f97a 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023c8:	463b      	mov	r3, r7
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_TIM1_Init+0x98>)
 80023ce:	f002 fb49 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023d8:	f000 f96c 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000588 	.word	0x20000588
 80023e8:	40010000 	.word	0x40010000

080023ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <MX_USART1_UART_Init+0x50>)
 80023f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 80023f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002412:	220c      	movs	r2, #12
 8002414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_USART1_UART_Init+0x4c>)
 8002424:	f002 fb8c 	bl	8004b40 <HAL_UART_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800242e:	f000 f941 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200005d0 	.word	0x200005d0
 800243c:	40011000 	.word	0x40011000

08002440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <MX_USART2_UART_Init+0x50>)
 8002448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800244c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002466:	220c      	movs	r2, #12
 8002468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <MX_USART2_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_USART2_UART_Init+0x4c>)
 8002478:	f002 fb62 	bl	8004b40 <HAL_UART_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002482:	f000 f917 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000618 	.word	0x20000618
 8002490:	40004400 	.word	0x40004400

08002494 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <MX_USART6_UART_Init+0x50>)
 800249c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 80024a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 80024ba:	220c      	movs	r2, #12
 80024bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <MX_USART6_UART_Init+0x4c>)
 80024cc:	f002 fb38 	bl	8004b40 <HAL_UART_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024d6:	f000 f8ed 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000660 	.word	0x20000660
 80024e4:	40011400 	.word	0x40011400

080024e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <MX_DMA_Init+0x78>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <MX_DMA_Init+0x78>)
 80024f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x78>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <MX_DMA_Init+0x78>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a13      	ldr	r2, [pc, #76]	; (8002560 <MX_DMA_Init+0x78>)
 8002514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <MX_DMA_Init+0x78>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2010      	movs	r0, #16
 800252c:	f000 fe33 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002530:	2010      	movs	r0, #16
 8002532:	f000 fe4c 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2039      	movs	r0, #57	; 0x39
 800253c:	f000 fe2b 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002540:	2039      	movs	r0, #57	; 0x39
 8002542:	f000 fe44 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	203a      	movs	r0, #58	; 0x3a
 800254c:	f000 fe23 	bl	8003196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002550:	203a      	movs	r0, #58	; 0x3a
 8002552:	f000 fe3c 	bl	80031ce <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b49      	ldr	r3, [pc, #292]	; (80026a4 <MX_GPIO_Init+0x140>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a48      	ldr	r2, [pc, #288]	; (80026a4 <MX_GPIO_Init+0x140>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <MX_GPIO_Init+0x140>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <MX_GPIO_Init+0x140>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a41      	ldr	r2, [pc, #260]	; (80026a4 <MX_GPIO_Init+0x140>)
 80025a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <MX_GPIO_Init+0x140>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <MX_GPIO_Init+0x140>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <MX_GPIO_Init+0x140>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <MX_GPIO_Init+0x140>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <MX_GPIO_Init+0x140>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a33      	ldr	r2, [pc, #204]	; (80026a4 <MX_GPIO_Init+0x140>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <MX_GPIO_Init+0x140>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025f0:	482d      	ldr	r0, [pc, #180]	; (80026a8 <MX_GPIO_Init+0x144>)
 80025f2:	f001 faff 	bl	8003bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MX7665_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin
 80025f6:	2200      	movs	r2, #0
 80025f8:	f24e 51f8 	movw	r1, #58872	; 0xe5f8
 80025fc:	482b      	ldr	r0, [pc, #172]	; (80026ac <MX_GPIO_Init+0x148>)
 80025fe:	f001 faf9 	bl	8003bf4 <HAL_GPIO_WritePin>
                          |MUL_SCK_Pin|MUL_Latch_Pin|MUL_MOSI_Pin|LCD_CS_Pin
                          |LCD_RS_Pin|LCD_WR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002602:	2200      	movs	r2, #0
 8002604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002608:	4829      	ldr	r0, [pc, #164]	; (80026b0 <MX_GPIO_Init+0x14c>)
 800260a:	f001 faf3 	bl	8003bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 800260e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	2301      	movs	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4820      	ldr	r0, [pc, #128]	; (80026a8 <MX_GPIO_Init+0x144>)
 8002628:	f001 f960 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 800262c:	2301      	movs	r3, #1
 800262e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	481c      	ldr	r0, [pc, #112]	; (80026b0 <MX_GPIO_Init+0x14c>)
 8002640:	f001 f954 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : MX7665_Pin LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin
                           MUL_SCK_Pin MUL_Latch_Pin MUL_MOSI_Pin LCD_CS_Pin
                           LCD_RS_Pin LCD_WR_Pin */
  GPIO_InitStruct.Pin = MX7665_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin
 8002644:	f24e 53f8 	movw	r3, #58872	; 0xe5f8
 8002648:	617b      	str	r3, [r7, #20]
                          |MUL_SCK_Pin|MUL_Latch_Pin|MUL_MOSI_Pin|LCD_CS_Pin
                          |LCD_RS_Pin|LCD_WR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_GPIO_Init+0x148>)
 800265e:	f001 f945 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002668:	2301      	movs	r3, #1
 800266a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <MX_GPIO_Init+0x14c>)
 800267c:	f001 f936 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RD_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin;
 8002680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RD_GPIO_Port, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_GPIO_Init+0x148>)
 8002696:	f001 f929 	bl	80038ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	; 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020000 	.word	0x40020000

080026b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b8:	b672      	cpsid	i
}
 80026ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026bc:	e7fe      	b.n	80026bc <Error_Handler+0x8>
	...

080026c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_MspInit+0x4c>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_MspInit+0x4c>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_MspInit+0x4c>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_MspInit+0x4c>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_ADC_MspInit+0x7c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d127      	bne.n	8002782 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <HAL_ADC_MspInit+0x80>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_ADC_MspInit+0x80>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800276a:	2312      	movs	r3, #18
 800276c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276e:	2303      	movs	r3, #3
 8002770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_ADC_MspInit+0x84>)
 800277e:	f001 f8b5 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40012000 	.word	0x40012000
 8002790:	40023800 	.word	0x40023800
 8002794:	40020000 	.word	0x40020000

08002798 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_SPI_MspInit+0x84>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d12b      	bne.n	8002812 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_SPI_MspInit+0x88>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	4a17      	ldr	r2, [pc, #92]	; (8002820 <HAL_SPI_MspInit+0x88>)
 80027c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027c8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_SPI_MspInit+0x88>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b11      	ldr	r3, [pc, #68]	; (8002820 <HAL_SPI_MspInit+0x88>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a10      	ldr	r2, [pc, #64]	; (8002820 <HAL_SPI_MspInit+0x88>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_SPI_MspInit+0x88>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027f2:	2360      	movs	r3, #96	; 0x60
 80027f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002802:	2305      	movs	r3, #5
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <HAL_SPI_MspInit+0x8c>)
 800280e:	f001 f86d 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002812:	bf00      	nop
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40013000 	.word	0x40013000
 8002820:	40023800 	.word	0x40023800
 8002824:	40020000 	.word	0x40020000

08002828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <HAL_TIM_Base_MspInit+0x3c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10d      	bne.n	8002856 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_TIM_Base_MspInit+0x40>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_TIM_Base_MspInit+0x40>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <HAL_TIM_Base_MspInit+0x40>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40010000 	.word	0x40010000
 8002868:	40023800 	.word	0x40023800

0800286c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08e      	sub	sp, #56	; 0x38
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a92      	ldr	r2, [pc, #584]	; (8002ad4 <HAL_UART_MspInit+0x268>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d15c      	bne.n	8002948 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	4b91      	ldr	r3, [pc, #580]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a90      	ldr	r2, [pc, #576]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002898:	f043 0310 	orr.w	r3, r3, #16
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b8e      	ldr	r3, [pc, #568]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	4b8a      	ldr	r3, [pc, #552]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a89      	ldr	r2, [pc, #548]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b87      	ldr	r3, [pc, #540]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80028c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028d8:	2307      	movs	r3, #7
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	487e      	ldr	r0, [pc, #504]	; (8002adc <HAL_UART_MspInit+0x270>)
 80028e4:	f001 f802 	bl	80038ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80028e8:	4b7d      	ldr	r3, [pc, #500]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 80028ea:	4a7e      	ldr	r2, [pc, #504]	; (8002ae4 <HAL_UART_MspInit+0x278>)
 80028ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80028ee:	4b7c      	ldr	r3, [pc, #496]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 80028f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f6:	4b7a      	ldr	r3, [pc, #488]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fc:	4b78      	ldr	r3, [pc, #480]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002902:	4b77      	ldr	r3, [pc, #476]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 8002904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002908:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800290a:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 800290c:	2200      	movs	r2, #0
 800290e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002910:	4b73      	ldr	r3, [pc, #460]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002916:	4b72      	ldr	r3, [pc, #456]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 8002918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800291c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800291e:	4b70      	ldr	r3, [pc, #448]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002924:	4b6e      	ldr	r3, [pc, #440]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800292a:	486d      	ldr	r0, [pc, #436]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 800292c:	f000 fc6e 	bl	800320c <HAL_DMA_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002936:	f7ff febd 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a68      	ldr	r2, [pc, #416]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 800293e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002940:	4a67      	ldr	r2, [pc, #412]	; (8002ae0 <HAL_UART_MspInit+0x274>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002946:	e0c1      	b.n	8002acc <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a66      	ldr	r2, [pc, #408]	; (8002ae8 <HAL_UART_MspInit+0x27c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d15b      	bne.n	8002a0a <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	4b60      	ldr	r3, [pc, #384]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a5f      	ldr	r2, [pc, #380]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 800295c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800298a:	230c      	movs	r3, #12
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800299a:	2307      	movs	r3, #7
 800299c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a2:	4619      	mov	r1, r3
 80029a4:	484d      	ldr	r0, [pc, #308]	; (8002adc <HAL_UART_MspInit+0x270>)
 80029a6:	f000 ffa1 	bl	80038ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029aa:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029ac:	4a50      	ldr	r2, [pc, #320]	; (8002af0 <HAL_UART_MspInit+0x284>)
 80029ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80029b0:	4b4e      	ldr	r3, [pc, #312]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029b8:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029be:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029c4:	4b49      	ldr	r3, [pc, #292]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029cc:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d2:	4b46      	ldr	r3, [pc, #280]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80029d8:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029de:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029e0:	4b42      	ldr	r3, [pc, #264]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029ec:	483f      	ldr	r0, [pc, #252]	; (8002aec <HAL_UART_MspInit+0x280>)
 80029ee:	f000 fc0d 	bl	800320c <HAL_DMA_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_MspInit+0x190>
      Error_Handler();
 80029f8:	f7ff fe5c 	bl	80026b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <HAL_UART_MspInit+0x280>)
 8002a00:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a02:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <HAL_UART_MspInit+0x280>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a08:	e060      	b.n	8002acc <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART6)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <HAL_UART_MspInit+0x288>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d15b      	bne.n	8002acc <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	4a2e      	ldr	r2, [pc, #184]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002a1e:	f043 0320 	orr.w	r3, r3, #32
 8002a22:	6453      	str	r3, [r2, #68]	; 0x44
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_UART_MspInit+0x26c>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a5e:	2308      	movs	r3, #8
 8002a60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a66:	4619      	mov	r1, r3
 8002a68:	481c      	ldr	r0, [pc, #112]	; (8002adc <HAL_UART_MspInit+0x270>)
 8002a6a:	f000 ff3f 	bl	80038ec <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <HAL_UART_MspInit+0x290>)
 8002a72:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002a76:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a7a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a8e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002ab0:	4811      	ldr	r0, [pc, #68]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002ab2:	f000 fbab 	bl	800320c <HAL_DMA_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_UART_MspInit+0x254>
      Error_Handler();
 8002abc:	f7ff fdfa 	bl	80026b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <HAL_UART_MspInit+0x28c>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002acc:	bf00      	nop
 8002ace:	3738      	adds	r7, #56	; 0x38
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40011000 	.word	0x40011000
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	200006a8 	.word	0x200006a8
 8002ae4:	40026440 	.word	0x40026440
 8002ae8:	40004400 	.word	0x40004400
 8002aec:	20000708 	.word	0x20000708
 8002af0:	40026088 	.word	0x40026088
 8002af4:	40011400 	.word	0x40011400
 8002af8:	20000768 	.word	0x20000768
 8002afc:	40026428 	.word	0x40026428

08002b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b04:	e7fe      	b.n	8002b04 <NMI_Handler+0x4>

08002b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0a:	e7fe      	b.n	8002b0a <HardFault_Handler+0x4>

08002b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <MemManage_Handler+0x4>

08002b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <BusFault_Handler+0x4>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <UsageFault_Handler+0x4>

08002b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b4c:	f000 f8ae 	bl	8002cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <DMA1_Stream5_IRQHandler+0x10>)
 8002b5a:	f000 fc5d 	bl	8003418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000708 	.word	0x20000708

08002b68 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <DMA2_Stream1_IRQHandler+0x10>)
 8002b6e:	f000 fc53 	bl	8003418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000768 	.word	0x20000768

08002b7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <DMA2_Stream2_IRQHandler+0x10>)
 8002b82:	f000 fc49 	bl	8003418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200006a8 	.word	0x200006a8

08002b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <SystemInit+0x20>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <SystemInit+0x20>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bb8:	f7ff ffea 	bl	8002b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bbc:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bbe:	490d      	ldr	r1, [pc, #52]	; (8002bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	; (8002c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002be2:	f002 fdc7 	bl	8005774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7ff fa71 	bl	80020cc <main>
  bx  lr    
 8002bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002bf8:	08005820 	.word	0x08005820
  ldr r2, =_sbss
 8002bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002c00:	200007d8 	.word	0x200007d8

08002c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC_IRQHandler>
	...

08002c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_Init+0x40>)
 8002c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_Init+0x40>)
 8002c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <HAL_Init+0x40>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c30:	2003      	movs	r0, #3
 8002c32:	f000 faa5 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c36:	200f      	movs	r0, #15
 8002c38:	f000 f808 	bl	8002c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c3c:	f7ff fd40 	bl	80026c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00

08002c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_InitTick+0x54>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_InitTick+0x58>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fac1 	bl	80031f2 <HAL_SYSTICK_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00e      	b.n	8002c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d80a      	bhi.n	8002c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c80:	2200      	movs	r2, #0
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c88:	f000 fa85 	bl	8003196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c8c:	4a06      	ldr	r2, [pc, #24]	; (8002ca8 <HAL_InitTick+0x5c>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_IncTick+0x20>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_IncTick+0x24>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_IncTick+0x24>)
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	200007d4 	.word	0x200007d4

08002cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <HAL_GetTick+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	200007d4 	.word	0x200007d4

08002cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf4:	f7ff ffee 	bl	8002cd4 <HAL_GetTick>
 8002cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d04:	d005      	beq.n	8002d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_Delay+0x44>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d12:	bf00      	nop
 8002d14:	f7ff ffde 	bl	8002cd4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d8f7      	bhi.n	8002d14 <HAL_Delay+0x28>
  {
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000008 	.word	0x20000008

08002d34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e033      	b.n	8002db2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fcdc 	bl	8002710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d7a:	f023 0302 	bic.w	r3, r3, #2
 8002d7e:	f043 0202 	orr.w	r2, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f818 	bl	8002dbc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
 8002da2:	e001      	b.n	8002da8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dc4:	4b79      	ldr	r3, [pc, #484]	; (8002fac <ADC_Init+0x1f0>)
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6859      	ldr	r1, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	021a      	lsls	r2, r3, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	4a58      	ldr	r2, [pc, #352]	; (8002fb0 <ADC_Init+0x1f4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e00f      	b.n	8002eba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002eb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0202 	bic.w	r2, r2, #2
 8002ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6899      	ldr	r1, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7e1b      	ldrb	r3, [r3, #24]
 8002ed4:	005a      	lsls	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01b      	beq.n	8002f20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	3b01      	subs	r3, #1
 8002f14:	035a      	lsls	r2, r3, #13
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	e007      	b.n	8002f30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	051a      	lsls	r2, r3, #20
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6899      	ldr	r1, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f72:	025a      	lsls	r2, r3, #9
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6899      	ldr	r1, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	029a      	lsls	r2, r3, #10
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40012300 	.word	0x40012300
 8002fb0:	0f000001 	.word	0x0f000001

08002fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4907      	ldr	r1, [pc, #28]	; (8003050 <__NVIC_EnableIRQ+0x38>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db0a      	blt.n	800307e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	490c      	ldr	r1, [pc, #48]	; (80030a0 <__NVIC_SetPriority+0x4c>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	440b      	add	r3, r1
 8003078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800307c:	e00a      	b.n	8003094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4908      	ldr	r1, [pc, #32]	; (80030a4 <__NVIC_SetPriority+0x50>)
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3b04      	subs	r3, #4
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	440b      	add	r3, r1
 8003092:	761a      	strb	r2, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000e100 	.word	0xe000e100
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f1c3 0307 	rsb	r3, r3, #7
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf28      	it	cs
 80030c6:	2304      	movcs	r3, #4
 80030c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d902      	bls.n	80030d8 <NVIC_EncodePriority+0x30>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3b03      	subs	r3, #3
 80030d6:	e000      	b.n	80030da <NVIC_EncodePriority+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	43d9      	mvns	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	4313      	orrs	r3, r2
         );
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	; 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003114:	f3bf 8f4f 	dsb	sy
}
 8003118:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <__NVIC_SystemReset+0x24>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003122:	4904      	ldr	r1, [pc, #16]	; (8003134 <__NVIC_SystemReset+0x24>)
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <__NVIC_SystemReset+0x28>)
 8003126:	4313      	orrs	r3, r2
 8003128:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800312a:	f3bf 8f4f 	dsb	sy
}
 800312e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <__NVIC_SystemReset+0x20>
 8003134:	e000ed00 	.word	0xe000ed00
 8003138:	05fa0004 	.word	0x05fa0004

0800313c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314c:	d301      	bcc.n	8003152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314e:	2301      	movs	r3, #1
 8003150:	e00f      	b.n	8003172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <SysTick_Config+0x40>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315a:	210f      	movs	r1, #15
 800315c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003160:	f7ff ff78 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <SysTick_Config+0x40>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <SysTick_Config+0x40>)
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff13 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff28 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff78 	bl	80030a8 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff47 	bl	8003054 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff1b 	bl	8003018 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80031ee:	f7ff ff8f 	bl	8003110 <__NVIC_SystemReset>

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ff9e 	bl	800313c <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff fd5c 	bl	8002cd4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e099      	b.n	800335c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003248:	e00f      	b.n	800326a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800324a:	f7ff fd43 	bl	8002cd4 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b05      	cmp	r3, #5
 8003256:	d908      	bls.n	800326a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e078      	b.n	800335c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e8      	bne.n	800324a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <HAL_DMA_Init+0x158>)
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d107      	bne.n	80032d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4313      	orrs	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d117      	bne.n	800332e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fa6f 	bl	80037f4 <DMA_CheckFifoParam>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2240      	movs	r2, #64	; 0x40
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800332a:	2301      	movs	r3, #1
 800332c:	e016      	b.n	800335c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa26 	bl	8003788 <DMA_CalcBaseAndBitshift>
 800333c:	4603      	mov	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	f010803f 	.word	0xf010803f

08003368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_DMA_Start_IT+0x26>
 800338a:	2302      	movs	r3, #2
 800338c:	e040      	b.n	8003410 <HAL_DMA_Start_IT+0xa8>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d12f      	bne.n	8003402 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f9b8 	bl	800372c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	223f      	movs	r2, #63	; 0x3f
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0216 	orr.w	r2, r2, #22
 80033d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0208 	orr.w	r2, r2, #8
 80033ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e005      	b.n	800340e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800340a:	2302      	movs	r3, #2
 800340c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003424:	4b8e      	ldr	r3, [pc, #568]	; (8003660 <HAL_DMA_IRQHandler+0x248>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a8e      	ldr	r2, [pc, #568]	; (8003664 <HAL_DMA_IRQHandler+0x24c>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0a9b      	lsrs	r3, r3, #10
 8003430:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	2208      	movs	r2, #8
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01a      	beq.n	8003484 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	2208      	movs	r2, #8
 8003472:	409a      	lsls	r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	2201      	movs	r2, #1
 800348a:	409a      	lsls	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	2201      	movs	r2, #1
 80034a8:	409a      	lsls	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f043 0202 	orr.w	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	2204      	movs	r2, #4
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d012      	beq.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2204      	movs	r2, #4
 80034de:	409a      	lsls	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	2210      	movs	r2, #16
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d043      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d03c      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	2210      	movs	r2, #16
 8003514:	409a      	lsls	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d018      	beq.n	800355a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d024      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
 8003546:	e01f      	b.n	8003588 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
 8003558:	e016      	b.n	8003588 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d107      	bne.n	8003578 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0208 	bic.w	r2, r2, #8
 8003576:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2220      	movs	r2, #32
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 808f 	beq.w	80036b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8087 	beq.w	80036b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	2220      	movs	r2, #32
 80035b0:	409a      	lsls	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d136      	bne.n	8003630 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0216 	bic.w	r2, r2, #22
 80035d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_DMA_IRQHandler+0x1da>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0208 	bic.w	r2, r2, #8
 8003600:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	223f      	movs	r2, #63	; 0x3f
 8003608:	409a      	lsls	r2, r3
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	2b00      	cmp	r3, #0
 8003624:	d07e      	beq.n	8003724 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
        }
        return;
 800362e:	e079      	b.n	8003724 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01d      	beq.n	800367a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	2b00      	cmp	r3, #0
 8003652:	d031      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
 800365c:	e02c      	b.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
 800365e:	bf00      	nop
 8003660:	20000000 	.word	0x20000000
 8003664:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e01e      	b.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10f      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0210 	bic.w	r2, r2, #16
 8003696:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d032      	beq.n	8003726 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2205      	movs	r2, #5
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	3301      	adds	r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d307      	bcc.n	8003700 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f2      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x2cc>
 80036fe:	e000      	b.n	8003702 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003700:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e000      	b.n	8003726 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003724:	bf00      	nop
    }
  }
}
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003748:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d108      	bne.n	800376c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800376a:	e007      	b.n	800377c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	60da      	str	r2, [r3, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3b10      	subs	r3, #16
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <DMA_CalcBaseAndBitshift+0x64>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037a2:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <DMA_CalcBaseAndBitshift+0x68>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d909      	bls.n	80037ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	1d1a      	adds	r2, r3, #4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	659a      	str	r2, [r3, #88]	; 0x58
 80037c8:	e007      	b.n	80037da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	aaaaaaab 	.word	0xaaaaaaab
 80037f0:	08005808 	.word	0x08005808

080037f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11f      	bne.n	800384e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d856      	bhi.n	80038c2 <DMA_CheckFifoParam+0xce>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <DMA_CheckFifoParam+0x28>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	0800383f 	.word	0x0800383f
 8003824:	0800382d 	.word	0x0800382d
 8003828:	080038c3 	.word	0x080038c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d046      	beq.n	80038c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383c:	e043      	b.n	80038c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003846:	d140      	bne.n	80038ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384c:	e03d      	b.n	80038ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003856:	d121      	bne.n	800389c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d837      	bhi.n	80038ce <DMA_CheckFifoParam+0xda>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <DMA_CheckFifoParam+0x70>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003875 	.word	0x08003875
 8003868:	0800387b 	.word	0x0800387b
 800386c:	08003875 	.word	0x08003875
 8003870:	0800388d 	.word	0x0800388d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e030      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d025      	beq.n	80038d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388a:	e022      	b.n	80038d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003894:	d11f      	bne.n	80038d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800389a:	e01c      	b.n	80038d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d903      	bls.n	80038aa <DMA_CheckFifoParam+0xb6>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d003      	beq.n	80038b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038a8:	e018      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      break;
 80038ae:	e015      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e00b      	b.n	80038da <DMA_CheckFifoParam+0xe6>
      break;
 80038c2:	bf00      	nop
 80038c4:	e00a      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038c6:	bf00      	nop
 80038c8:	e008      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038ca:	bf00      	nop
 80038cc:	e006      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038ce:	bf00      	nop
 80038d0:	e004      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038d2:	bf00      	nop
 80038d4:	e002      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;   
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038da:	bf00      	nop
    }
  } 
  
  return status; 
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e159      	b.n	8003bbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003908:	2201      	movs	r2, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	f040 8148 	bne.w	8003bb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d005      	beq.n	800393e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800393a:	2b02      	cmp	r3, #2
 800393c:	d130      	bne.n	80039a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	2203      	movs	r2, #3
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003974:	2201      	movs	r2, #1
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 0201 	and.w	r2, r3, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d017      	beq.n	80039dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	2203      	movs	r2, #3
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d123      	bne.n	8003a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3208      	adds	r2, #8
 80039f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	220f      	movs	r2, #15
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	08da      	lsrs	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3208      	adds	r2, #8
 8003a2a:	69b9      	ldr	r1, [r7, #24]
 8003a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0203 	and.w	r2, r3, #3
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a2 	beq.w	8003bb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b57      	ldr	r3, [pc, #348]	; (8003bd4 <HAL_GPIO_Init+0x2e8>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	4a56      	ldr	r2, [pc, #344]	; (8003bd4 <HAL_GPIO_Init+0x2e8>)
 8003a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a80:	6453      	str	r3, [r2, #68]	; 0x44
 8003a82:	4b54      	ldr	r3, [pc, #336]	; (8003bd4 <HAL_GPIO_Init+0x2e8>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a8e:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_GPIO_Init+0x2ec>)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	3302      	adds	r3, #2
 8003a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	220f      	movs	r2, #15
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a49      	ldr	r2, [pc, #292]	; (8003bdc <HAL_GPIO_Init+0x2f0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d019      	beq.n	8003aee <HAL_GPIO_Init+0x202>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a48      	ldr	r2, [pc, #288]	; (8003be0 <HAL_GPIO_Init+0x2f4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_GPIO_Init+0x1fe>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a47      	ldr	r2, [pc, #284]	; (8003be4 <HAL_GPIO_Init+0x2f8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a46      	ldr	r2, [pc, #280]	; (8003be8 <HAL_GPIO_Init+0x2fc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <HAL_GPIO_Init+0x1f6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a45      	ldr	r2, [pc, #276]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_GPIO_Init+0x1f2>
 8003ada:	2304      	movs	r3, #4
 8003adc:	e008      	b.n	8003af0 <HAL_GPIO_Init+0x204>
 8003ade:	2307      	movs	r3, #7
 8003ae0:	e006      	b.n	8003af0 <HAL_GPIO_Init+0x204>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e004      	b.n	8003af0 <HAL_GPIO_Init+0x204>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e002      	b.n	8003af0 <HAL_GPIO_Init+0x204>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_GPIO_Init+0x204>
 8003aee:	2300      	movs	r3, #0
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	f002 0203 	and.w	r2, r2, #3
 8003af6:	0092      	lsls	r2, r2, #2
 8003af8:	4093      	lsls	r3, r2
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b00:	4935      	ldr	r1, [pc, #212]	; (8003bd8 <HAL_GPIO_Init+0x2ec>)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	3302      	adds	r3, #2
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <HAL_GPIO_Init+0x304>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b32:	4a2f      	ldr	r2, [pc, #188]	; (8003bf0 <HAL_GPIO_Init+0x304>)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b38:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <HAL_GPIO_Init+0x304>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b5c:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <HAL_GPIO_Init+0x304>)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b62:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <HAL_GPIO_Init+0x304>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b86:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_GPIO_Init+0x304>)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b8c:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <HAL_GPIO_Init+0x304>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bb0:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <HAL_GPIO_Init+0x304>)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	f67f aea2 	bls.w	8003908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	3724      	adds	r7, #36	; 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	40020000 	.word	0x40020000
 8003be0:	40020400 	.word	0x40020400
 8003be4:	40020800 	.word	0x40020800
 8003be8:	40020c00 	.word	0x40020c00
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40013c00 	.word	0x40013c00

08003bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	807b      	strh	r3, [r7, #2]
 8003c00:	4613      	mov	r3, r2
 8003c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c04:	787b      	ldrb	r3, [r7, #1]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c0a:	887a      	ldrh	r2, [r7, #2]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c10:	e003      	b.n	8003c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c12:	887b      	ldrh	r3, [r7, #2]
 8003c14:	041a      	lsls	r2, r3, #16
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	619a      	str	r2, [r3, #24]
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e267      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d075      	beq.n	8003d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c46:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d00c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b85      	ldr	r3, [pc, #532]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d112      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5e:	4b82      	ldr	r3, [pc, #520]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05b      	beq.n	8003d30 <HAL_RCC_OscConfig+0x108>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d157      	bne.n	8003d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e242      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d106      	bne.n	8003c9c <HAL_RCC_OscConfig+0x74>
 8003c8e:	4b76      	ldr	r3, [pc, #472]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a75      	ldr	r2, [pc, #468]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e01d      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x98>
 8003ca6:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a6f      	ldr	r2, [pc, #444]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6c      	ldr	r2, [pc, #432]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
 8003cc0:	4b69      	ldr	r3, [pc, #420]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a68      	ldr	r2, [pc, #416]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b66      	ldr	r3, [pc, #408]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a65      	ldr	r2, [pc, #404]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d013      	beq.n	8003d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe fff8 	bl	8002cd4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7fe fff4 	bl	8002cd4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e207      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b5b      	ldr	r3, [pc, #364]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
 8003d06:	e014      	b.n	8003d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fe ffe4 	bl	8002cd4 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fe ffe0 	bl	8002cd4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1f3      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	4b51      	ldr	r3, [pc, #324]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0xe8>
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d063      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d11c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d56:	4b44      	ldr	r3, [pc, #272]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d116      	bne.n	8003d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <HAL_RCC_OscConfig+0x152>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e1c7      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4937      	ldr	r1, [pc, #220]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	e03a      	b.n	8003e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d020      	beq.n	8003dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d98:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <HAL_RCC_OscConfig+0x244>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fe ff99 	bl	8002cd4 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fe ff95 	bl	8002cd4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e1a8      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc4:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4925      	ldr	r1, [pc, #148]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
 8003dd8:	e015      	b.n	8003e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dda:	4b24      	ldr	r3, [pc, #144]	; (8003e6c <HAL_RCC_OscConfig+0x244>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fe ff78 	bl	8002cd4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003de8:	f7fe ff74 	bl	8002cd4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e187      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d036      	beq.n	8003e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_RCC_OscConfig+0x248>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe ff58 	bl	8002cd4 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fe ff54 	bl	8002cd4 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e167      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x200>
 8003e46:	e01b      	b.n	8003e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_OscConfig+0x248>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fe ff41 	bl	8002cd4 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	e00e      	b.n	8003e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e56:	f7fe ff3d 	bl	8002cd4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d907      	bls.n	8003e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e150      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	42470000 	.word	0x42470000
 8003e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	4b88      	ldr	r3, [pc, #544]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ea      	bne.n	8003e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8097 	beq.w	8003fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e92:	4b81      	ldr	r3, [pc, #516]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a7c      	ldr	r2, [pc, #496]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
 8003eae:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b77      	ldr	r3, [pc, #476]	; (800409c <HAL_RCC_OscConfig+0x474>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d118      	bne.n	8003efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eca:	4b74      	ldr	r3, [pc, #464]	; (800409c <HAL_RCC_OscConfig+0x474>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a73      	ldr	r2, [pc, #460]	; (800409c <HAL_RCC_OscConfig+0x474>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fefd 	bl	8002cd4 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ede:	f7fe fef9 	bl	8002cd4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e10c      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x474>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x2ea>
 8003f04:	4b64      	ldr	r3, [pc, #400]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	4a63      	ldr	r2, [pc, #396]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f10:	e01c      	b.n	8003f4c <HAL_RCC_OscConfig+0x324>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b05      	cmp	r3, #5
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x30c>
 8003f1a:	4b5f      	ldr	r3, [pc, #380]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a5e      	ldr	r2, [pc, #376]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f20:	f043 0304 	orr.w	r3, r3, #4
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a5b      	ldr	r2, [pc, #364]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0x324>
 8003f34:	4b58      	ldr	r3, [pc, #352]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	4a57      	ldr	r2, [pc, #348]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f40:	4b55      	ldr	r3, [pc, #340]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	4a54      	ldr	r2, [pc, #336]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f46:	f023 0304 	bic.w	r3, r3, #4
 8003f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d015      	beq.n	8003f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7fe febe 	bl	8002cd4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fe feba 	bl	8002cd4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0cb      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f72:	4b49      	ldr	r3, [pc, #292]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ee      	beq.n	8003f5c <HAL_RCC_OscConfig+0x334>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f80:	f7fe fea8 	bl	8002cd4 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fe fea4 	bl	8002cd4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0b5      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ee      	bne.n	8003f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb0:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	4a38      	ldr	r2, [pc, #224]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a1 	beq.w	8004108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc6:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d05c      	beq.n	800408c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d141      	bne.n	800405e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <HAL_RCC_OscConfig+0x478>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fe fe78 	bl	8002cd4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe8:	f7fe fe74 	bl	8002cd4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e087      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffa:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	491b      	ldr	r1, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x478>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fe fe4d 	bl	8002cd4 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403e:	f7fe fe49 	bl	8002cd4 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e05c      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x416>
 800405c:	e054      	b.n	8004108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <HAL_RCC_OscConfig+0x478>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fe fe36 	bl	8002cd4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406c:	f7fe fe32 	bl	8002cd4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e045      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_RCC_OscConfig+0x470>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x444>
 800408a:	e03d      	b.n	8004108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e038      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000
 80040a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_RCC_OscConfig+0x4ec>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d028      	beq.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d121      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11a      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040dc:	4293      	cmp	r3, r2
 80040de:	d111      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0cc      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d90c      	bls.n	8004154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b65      	ldr	r3, [pc, #404]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0b8      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800416c:	4b59      	ldr	r3, [pc, #356]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a58      	ldr	r2, [pc, #352]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004184:	4b53      	ldr	r3, [pc, #332]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4a52      	ldr	r2, [pc, #328]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800418e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b50      	ldr	r3, [pc, #320]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	494d      	ldr	r1, [pc, #308]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d044      	beq.n	8004238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d119      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e07f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d003      	beq.n	80041d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d6:	4b3f      	ldr	r3, [pc, #252]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e06f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e6:	4b3b      	ldr	r3, [pc, #236]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e067      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b37      	ldr	r3, [pc, #220]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 0203 	bic.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4934      	ldr	r1, [pc, #208]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004208:	f7fe fd64 	bl	8002cd4 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	e00a      	b.n	8004226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004210:	f7fe fd60 	bl	8002cd4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f241 3288 	movw	r2, #5000	; 0x1388
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e04f      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 020c 	and.w	r2, r3, #12
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d1eb      	bne.n	8004210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d20c      	bcs.n	8004260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e032      	b.n	80042c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4916      	ldr	r1, [pc, #88]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	490e      	ldr	r1, [pc, #56]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800429e:	f000 f821 	bl	80042e4 <HAL_RCC_GetSysClockFreq>
 80042a2:	4602      	mov	r2, r0
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	490a      	ldr	r1, [pc, #40]	; (80042d8 <HAL_RCC_ClockConfig+0x1c0>)
 80042b0:	5ccb      	ldrb	r3, [r1, r3]
 80042b2:	fa22 f303 	lsr.w	r3, r2, r3
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe fcc4 	bl	8002c4c <HAL_InitTick>

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023c00 	.word	0x40023c00
 80042d4:	40023800 	.word	0x40023800
 80042d8:	080057f0 	.word	0x080057f0
 80042dc:	20000000 	.word	0x20000000
 80042e0:	20000004 	.word	0x20000004

080042e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b090      	sub	sp, #64	; 0x40
 80042ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
 80042f0:	2300      	movs	r3, #0
 80042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f4:	2300      	movs	r3, #0
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fc:	4b59      	ldr	r3, [pc, #356]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d00d      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x40>
 8004308:	2b08      	cmp	r3, #8
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x16c>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x34>
 8004312:	2b04      	cmp	r3, #4
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x3a>
 8004316:	e09b      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b53      	ldr	r3, [pc, #332]	; (8004468 <HAL_RCC_GetSysClockFreq+0x184>)
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800431c:	e09b      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800431e:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 8004320:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004322:	e098      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004324:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800432e:	4b4d      	ldr	r3, [pc, #308]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d028      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	2200      	movs	r2, #0
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	627a      	str	r2, [r7, #36]	; 0x24
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800434c:	2100      	movs	r1, #0
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 8004350:	fb03 f201 	mul.w	r2, r3, r1
 8004354:	2300      	movs	r3, #0
 8004356:	fb00 f303 	mul.w	r3, r0, r3
 800435a:	4413      	add	r3, r2
 800435c:	4a43      	ldr	r2, [pc, #268]	; (800446c <HAL_RCC_GetSysClockFreq+0x188>)
 800435e:	fba0 1202 	umull	r1, r2, r0, r2
 8004362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004364:	460a      	mov	r2, r1
 8004366:	62ba      	str	r2, [r7, #40]	; 0x28
 8004368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436a:	4413      	add	r3, r2
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004370:	2200      	movs	r2, #0
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800437e:	f7fc f96f 	bl	8000660 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4613      	mov	r3, r2
 8004388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438a:	e053      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438c:	4b35      	ldr	r3, [pc, #212]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	2200      	movs	r2, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	617a      	str	r2, [r7, #20]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800439e:	f04f 0b00 	mov.w	fp, #0
 80043a2:	4652      	mov	r2, sl
 80043a4:	465b      	mov	r3, fp
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b4:	0150      	lsls	r0, r2, #5
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	ebb2 080a 	subs.w	r8, r2, sl
 80043be:	eb63 090b 	sbc.w	r9, r3, fp
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043d6:	ebb2 0408 	subs.w	r4, r2, r8
 80043da:	eb63 0509 	sbc.w	r5, r3, r9
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	00eb      	lsls	r3, r5, #3
 80043e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ec:	00e2      	lsls	r2, r4, #3
 80043ee:	4614      	mov	r4, r2
 80043f0:	461d      	mov	r5, r3
 80043f2:	eb14 030a 	adds.w	r3, r4, sl
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	eb45 030b 	adc.w	r3, r5, fp
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800440a:	4629      	mov	r1, r5
 800440c:	028b      	lsls	r3, r1, #10
 800440e:	4621      	mov	r1, r4
 8004410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004414:	4621      	mov	r1, r4
 8004416:	028a      	lsls	r2, r1, #10
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	2200      	movs	r2, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	60fa      	str	r2, [r7, #12]
 8004424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004428:	f7fc f91a 	bl	8000660 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_GetSysClockFreq+0x180>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetSysClockFreq+0x184>)
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004458:	4618      	mov	r0, r3
 800445a:	3740      	adds	r7, #64	; 0x40
 800445c:	46bd      	mov	sp, r7
 800445e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	00f42400 	.word	0x00f42400
 800446c:	017d7840 	.word	0x017d7840

08004470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	; (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	08005800 	.word	0x08005800

080044b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044b4:	f7ff ffdc 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0b5b      	lsrs	r3, r3, #13
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	08005800 	.word	0x08005800

080044d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e07b      	b.n	80045e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d108      	bne.n	8004504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fa:	d009      	beq.n	8004510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	61da      	str	r2, [r3, #28]
 8004502:	e005      	b.n	8004510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fe f934 	bl	8002798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004546:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	ea42 0103 	orr.w	r1, r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	f003 0104 	and.w	r1, r3, #4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f003 0210 	and.w	r2, r3, #16
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e041      	b.n	8004680 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7fe f909 	bl	8002828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f000 f8f5 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0b4      	b.n	800480e <HAL_TIM_ConfigClockSource+0x186>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046dc:	d03e      	beq.n	800475c <HAL_TIM_ConfigClockSource+0xd4>
 80046de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e2:	f200 8087 	bhi.w	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	f000 8086 	beq.w	80047fa <HAL_TIM_ConfigClockSource+0x172>
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d87f      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b70      	cmp	r3, #112	; 0x70
 80046f6:	d01a      	beq.n	800472e <HAL_TIM_ConfigClockSource+0xa6>
 80046f8:	2b70      	cmp	r3, #112	; 0x70
 80046fa:	d87b      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b60      	cmp	r3, #96	; 0x60
 80046fe:	d050      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004700:	2b60      	cmp	r3, #96	; 0x60
 8004702:	d877      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b50      	cmp	r3, #80	; 0x50
 8004706:	d03c      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xfa>
 8004708:	2b50      	cmp	r3, #80	; 0x50
 800470a:	d873      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d058      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d86f      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b30      	cmp	r3, #48	; 0x30
 8004716:	d064      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	d86b      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b20      	cmp	r3, #32
 800471e:	d060      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d867      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d05c      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004728:	2b10      	cmp	r3, #16
 800472a:	d05a      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 800472c:	e062      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800473e:	f000 f971 	bl	8004a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	609a      	str	r2, [r3, #8]
      break;
 800475a:	e04f      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800476c:	f000 f95a 	bl	8004a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477e:	609a      	str	r2, [r3, #8]
      break;
 8004780:	e03c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800478e:	461a      	mov	r2, r3
 8004790:	f000 f8ce 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2150      	movs	r1, #80	; 0x50
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f927 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 80047a0:	e02c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 f8ed 	bl	800498e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2160      	movs	r1, #96	; 0x60
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f917 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 80047c0:	e01c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	461a      	mov	r2, r3
 80047d0:	f000 f8ae 	bl	8004930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f907 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 80047e0:	e00c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f000 f8fe 	bl	80049ee <TIM_ITRx_SetConfig>
      break;
 80047f2:	e003      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
      break;
 80047f8:	e000      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3a      	ldr	r2, [pc, #232]	; (8004914 <TIM_Base_SetConfig+0xfc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00f      	beq.n	8004850 <TIM_Base_SetConfig+0x38>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d00b      	beq.n	8004850 <TIM_Base_SetConfig+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a37      	ldr	r2, [pc, #220]	; (8004918 <TIM_Base_SetConfig+0x100>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_Base_SetConfig+0x38>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a36      	ldr	r2, [pc, #216]	; (800491c <TIM_Base_SetConfig+0x104>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0x38>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a35      	ldr	r2, [pc, #212]	; (8004920 <TIM_Base_SetConfig+0x108>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d108      	bne.n	8004862 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <TIM_Base_SetConfig+0xfc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01b      	beq.n	80048a2 <TIM_Base_SetConfig+0x8a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004870:	d017      	beq.n	80048a2 <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a28      	ldr	r2, [pc, #160]	; (8004918 <TIM_Base_SetConfig+0x100>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <TIM_Base_SetConfig+0x104>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00f      	beq.n	80048a2 <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <TIM_Base_SetConfig+0x108>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00b      	beq.n	80048a2 <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a25      	ldr	r2, [pc, #148]	; (8004924 <TIM_Base_SetConfig+0x10c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a24      	ldr	r2, [pc, #144]	; (8004928 <TIM_Base_SetConfig+0x110>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a23      	ldr	r2, [pc, #140]	; (800492c <TIM_Base_SetConfig+0x114>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <TIM_Base_SetConfig+0xfc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f023 0201 	bic.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]
  }
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40010000 	.word	0x40010000
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800

08004930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f023 030a 	bic.w	r3, r3, #10
 800496c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800498e:	b480      	push	{r7}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f023 0210 	bic.w	r2, r3, #16
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	031b      	lsls	r3, r3, #12
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f043 0307 	orr.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	609a      	str	r2, [r3, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e050      	b.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1c      	ldr	r2, [pc, #112]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d013      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a13      	ldr	r2, [pc, #76]	; (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10c      	bne.n	8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40014000 	.word	0x40014000

08004b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e042      	b.n	8004bd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fd fe80 	bl	800286c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	; 0x24
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb79 	bl	800527c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d175      	bne.n	8004cec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Transmit+0x2c>
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e06e      	b.n	8004cee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2221      	movs	r2, #33	; 0x21
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c1e:	f7fe f859 	bl	8002cd4 <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	88fa      	ldrh	r2, [r7, #6]
 8004c2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c38:	d108      	bne.n	8004c4c <HAL_UART_Transmit+0x6c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e003      	b.n	8004c54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c54:	e02e      	b.n	8004cb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f98b 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e03a      	b.n	8004cee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3302      	adds	r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
 8004c94:	e007      	b.n	8004ca6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1cb      	bne.n	8004c56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2140      	movs	r1, #64	; 0x40
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f957 	bl	8004f7c <UART_WaitOnFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	4613      	mov	r3, r2
 8004d02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d112      	bne.n	8004d36 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_Receive_DMA+0x26>
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e00b      	b.n	8004d38 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f97f 	bl	8005030 <UART_Start_Receive_DMA>
 8004d32:	4603      	mov	r3, r0
 8004d34:	e000      	b.n	8004d38 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d36:	2302      	movs	r3, #2
  }
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b09c      	sub	sp, #112	; 0x70
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d172      	bne.n	8004e82 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9e:	2200      	movs	r2, #0
 8004da0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dc4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e5      	bne.n	8004da2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3314      	adds	r3, #20
 8004ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	667b      	str	r3, [r7, #100]	; 0x64
 8004dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3314      	adds	r3, #20
 8004df4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004df6:	647a      	str	r2, [r7, #68]	; 0x44
 8004df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e5      	bne.n	8004dd6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	623b      	str	r3, [r7, #32]
   return(result);
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e20:	663b      	str	r3, [r7, #96]	; 0x60
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3314      	adds	r3, #20
 8004e28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e5      	bne.n	8004e0a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d119      	bne.n	8004e82 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f023 0310 	bic.w	r3, r3, #16
 8004e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e6e:	61fa      	str	r2, [r7, #28]
 8004e70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	69b9      	ldr	r1, [r7, #24]
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	2200      	movs	r2, #0
 8004e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d106      	bne.n	8004e9e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e94:	4619      	mov	r1, r3
 8004e96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e98:	f7ff ff66 	bl	8004d68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e9c:	e002      	b.n	8004ea4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004e9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ea0:	f7fd f89a 	bl	8001fd8 <HAL_UART_RxCpltCallback>
}
 8004ea4:	bf00      	nop
 8004ea6:	3770      	adds	r7, #112	; 0x70
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d108      	bne.n	8004eda <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff ff48 	bl	8004d68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ed8:	e002      	b.n	8004ee0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff ff30 	bl	8004d40 <HAL_UART_RxHalfCpltCallback>
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f04:	2b80      	cmp	r3, #128	; 0x80
 8004f06:	bf0c      	ite	eq
 8004f08:	2301      	moveq	r3, #1
 8004f0a:	2300      	movne	r3, #0
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b21      	cmp	r3, #33	; 0x21
 8004f1a:	d108      	bne.n	8004f2e <UART_DMAError+0x46>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2200      	movs	r2, #0
 8004f26:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f28:	68b8      	ldr	r0, [r7, #8]
 8004f2a:	f000 f91b 	bl	8005164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b22      	cmp	r3, #34	; 0x22
 8004f4e:	d108      	bne.n	8004f62 <UART_DMAError+0x7a>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f5c:	68b8      	ldr	r0, [r7, #8]
 8004f5e:	f000 f929 	bl	80051b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f043 0210 	orr.w	r2, r3, #16
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f6e:	68b8      	ldr	r0, [r7, #8]
 8004f70:	f7ff fef0 	bl	8004d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8c:	e03b      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f94:	d037      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fd fe9d 	bl	8002cd4 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e03a      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d023      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d020      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d01d      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d116      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f8e0 	bl	80051b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e00f      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	429a      	cmp	r2, r3
 8005022:	d0b4      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b098      	sub	sp, #96	; 0x60
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2222      	movs	r2, #34	; 0x22
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505c:	4a3e      	ldr	r2, [pc, #248]	; (8005158 <UART_Start_Receive_DMA+0x128>)
 800505e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005064:	4a3d      	ldr	r2, [pc, #244]	; (800515c <UART_Start_Receive_DMA+0x12c>)
 8005066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506c:	4a3c      	ldr	r2, [pc, #240]	; (8005160 <UART_Start_Receive_DMA+0x130>)
 800506e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	2200      	movs	r2, #0
 8005076:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	f7fe f96a 	bl	8003368 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d019      	beq.n	80050e6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80050d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80050d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80050e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e5      	bne.n	80050b2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3314      	adds	r3, #20
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	657b      	str	r3, [r7, #84]	; 0x54
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005106:	63ba      	str	r2, [r7, #56]	; 0x38
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800510c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e5      	bne.n	80050e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3314      	adds	r3, #20
 8005120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	617b      	str	r3, [r7, #20]
   return(result);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005130:	653b      	str	r3, [r7, #80]	; 0x50
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3314      	adds	r3, #20
 8005138:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800513a:	627a      	str	r2, [r7, #36]	; 0x24
 800513c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6a39      	ldr	r1, [r7, #32]
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	61fb      	str	r3, [r7, #28]
   return(result);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e5      	bne.n	800511a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3760      	adds	r7, #96	; 0x60
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	08004d81 	.word	0x08004d81
 800515c:	08004ead 	.word	0x08004ead
 8005160:	08004ee9 	.word	0x08004ee9

08005164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	60bb      	str	r3, [r7, #8]
   return(result);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	61ba      	str	r2, [r7, #24]
 800518e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	613b      	str	r3, [r7, #16]
   return(result);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e5      	bne.n	800516c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80051a8:	bf00      	nop
 80051aa:	3724      	adds	r7, #36	; 0x24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b095      	sub	sp, #84	; 0x54
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051dc:	643a      	str	r2, [r7, #64]	; 0x40
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e5      	bne.n	80051bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3314      	adds	r3, #20
 80051f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	64bb      	str	r3, [r7, #72]	; 0x48
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3314      	adds	r3, #20
 800520e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	2b01      	cmp	r3, #1
 800522a:	d119      	bne.n	8005260 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	60bb      	str	r3, [r7, #8]
   return(result);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f023 0310 	bic.w	r3, r3, #16
 8005242:	647b      	str	r3, [r7, #68]	; 0x44
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800524c:	61ba      	str	r2, [r7, #24]
 800524e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6979      	ldr	r1, [r7, #20]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	613b      	str	r3, [r7, #16]
   return(result);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800526e:	bf00      	nop
 8005270:	3754      	adds	r7, #84	; 0x54
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800527c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005280:	b0c0      	sub	sp, #256	; 0x100
 8005282:	af00      	add	r7, sp, #0
 8005284:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	68d9      	ldr	r1, [r3, #12]
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	ea40 0301 	orr.w	r3, r0, r1
 80052a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052d4:	f021 010c 	bic.w	r1, r1, #12
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052e2:	430b      	orrs	r3, r1
 80052e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f6:	6999      	ldr	r1, [r3, #24]
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	ea40 0301 	orr.w	r3, r0, r1
 8005302:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b8f      	ldr	r3, [pc, #572]	; (8005548 <UART_SetConfig+0x2cc>)
 800530c:	429a      	cmp	r2, r3
 800530e:	d005      	beq.n	800531c <UART_SetConfig+0xa0>
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b8d      	ldr	r3, [pc, #564]	; (800554c <UART_SetConfig+0x2d0>)
 8005318:	429a      	cmp	r2, r3
 800531a:	d104      	bne.n	8005326 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800531c:	f7ff f8c8 	bl	80044b0 <HAL_RCC_GetPCLK2Freq>
 8005320:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005324:	e003      	b.n	800532e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005326:	f7ff f8af 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 800532a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005338:	f040 810c 	bne.w	8005554 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800533c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005340:	2200      	movs	r2, #0
 8005342:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005346:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800534a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800534e:	4622      	mov	r2, r4
 8005350:	462b      	mov	r3, r5
 8005352:	1891      	adds	r1, r2, r2
 8005354:	65b9      	str	r1, [r7, #88]	; 0x58
 8005356:	415b      	adcs	r3, r3
 8005358:	65fb      	str	r3, [r7, #92]	; 0x5c
 800535a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800535e:	4621      	mov	r1, r4
 8005360:	eb12 0801 	adds.w	r8, r2, r1
 8005364:	4629      	mov	r1, r5
 8005366:	eb43 0901 	adc.w	r9, r3, r1
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800537a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800537e:	4690      	mov	r8, r2
 8005380:	4699      	mov	r9, r3
 8005382:	4623      	mov	r3, r4
 8005384:	eb18 0303 	adds.w	r3, r8, r3
 8005388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800538c:	462b      	mov	r3, r5
 800538e:	eb49 0303 	adc.w	r3, r9, r3
 8005392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053aa:	460b      	mov	r3, r1
 80053ac:	18db      	adds	r3, r3, r3
 80053ae:	653b      	str	r3, [r7, #80]	; 0x50
 80053b0:	4613      	mov	r3, r2
 80053b2:	eb42 0303 	adc.w	r3, r2, r3
 80053b6:	657b      	str	r3, [r7, #84]	; 0x54
 80053b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053c0:	f7fb f94e 	bl	8000660 <__aeabi_uldivmod>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4b61      	ldr	r3, [pc, #388]	; (8005550 <UART_SetConfig+0x2d4>)
 80053ca:	fba3 2302 	umull	r2, r3, r3, r2
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	011c      	lsls	r4, r3, #4
 80053d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053e4:	4642      	mov	r2, r8
 80053e6:	464b      	mov	r3, r9
 80053e8:	1891      	adds	r1, r2, r2
 80053ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80053ec:	415b      	adcs	r3, r3
 80053ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053f4:	4641      	mov	r1, r8
 80053f6:	eb12 0a01 	adds.w	sl, r2, r1
 80053fa:	4649      	mov	r1, r9
 80053fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800540c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005414:	4692      	mov	sl, r2
 8005416:	469b      	mov	fp, r3
 8005418:	4643      	mov	r3, r8
 800541a:	eb1a 0303 	adds.w	r3, sl, r3
 800541e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005422:	464b      	mov	r3, r9
 8005424:	eb4b 0303 	adc.w	r3, fp, r3
 8005428:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005438:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800543c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005440:	460b      	mov	r3, r1
 8005442:	18db      	adds	r3, r3, r3
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
 8005446:	4613      	mov	r3, r2
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	647b      	str	r3, [r7, #68]	; 0x44
 800544e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005452:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005456:	f7fb f903 	bl	8000660 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4611      	mov	r1, r2
 8005460:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <UART_SetConfig+0x2d4>)
 8005462:	fba3 2301 	umull	r2, r3, r3, r1
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	2264      	movs	r2, #100	; 0x64
 800546a:	fb02 f303 	mul.w	r3, r2, r3
 800546e:	1acb      	subs	r3, r1, r3
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005476:	4b36      	ldr	r3, [pc, #216]	; (8005550 <UART_SetConfig+0x2d4>)
 8005478:	fba3 2302 	umull	r2, r3, r3, r2
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005484:	441c      	add	r4, r3
 8005486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005490:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005494:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	1891      	adds	r1, r2, r2
 800549e:	63b9      	str	r1, [r7, #56]	; 0x38
 80054a0:	415b      	adcs	r3, r3
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054a8:	4641      	mov	r1, r8
 80054aa:	1851      	adds	r1, r2, r1
 80054ac:	6339      	str	r1, [r7, #48]	; 0x30
 80054ae:	4649      	mov	r1, r9
 80054b0:	414b      	adcs	r3, r1
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054c0:	4659      	mov	r1, fp
 80054c2:	00cb      	lsls	r3, r1, #3
 80054c4:	4651      	mov	r1, sl
 80054c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ca:	4651      	mov	r1, sl
 80054cc:	00ca      	lsls	r2, r1, #3
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	4642      	mov	r2, r8
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054dc:	464b      	mov	r3, r9
 80054de:	460a      	mov	r2, r1
 80054e0:	eb42 0303 	adc.w	r3, r2, r3
 80054e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054fc:	460b      	mov	r3, r1
 80054fe:	18db      	adds	r3, r3, r3
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
 8005502:	4613      	mov	r3, r2
 8005504:	eb42 0303 	adc.w	r3, r2, r3
 8005508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800550a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800550e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005512:	f7fb f8a5 	bl	8000660 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <UART_SetConfig+0x2d4>)
 800551c:	fba3 1302 	umull	r1, r3, r3, r2
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	2164      	movs	r1, #100	; 0x64
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	3332      	adds	r3, #50	; 0x32
 800552e:	4a08      	ldr	r2, [pc, #32]	; (8005550 <UART_SetConfig+0x2d4>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	f003 0207 	and.w	r2, r3, #7
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4422      	add	r2, r4
 8005542:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005544:	e106      	b.n	8005754 <UART_SetConfig+0x4d8>
 8005546:	bf00      	nop
 8005548:	40011000 	.word	0x40011000
 800554c:	40011400 	.word	0x40011400
 8005550:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005558:	2200      	movs	r2, #0
 800555a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800555e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005562:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005566:	4642      	mov	r2, r8
 8005568:	464b      	mov	r3, r9
 800556a:	1891      	adds	r1, r2, r2
 800556c:	6239      	str	r1, [r7, #32]
 800556e:	415b      	adcs	r3, r3
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
 8005572:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005576:	4641      	mov	r1, r8
 8005578:	1854      	adds	r4, r2, r1
 800557a:	4649      	mov	r1, r9
 800557c:	eb43 0501 	adc.w	r5, r3, r1
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	00eb      	lsls	r3, r5, #3
 800558a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800558e:	00e2      	lsls	r2, r4, #3
 8005590:	4614      	mov	r4, r2
 8005592:	461d      	mov	r5, r3
 8005594:	4643      	mov	r3, r8
 8005596:	18e3      	adds	r3, r4, r3
 8005598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800559c:	464b      	mov	r3, r9
 800559e:	eb45 0303 	adc.w	r3, r5, r3
 80055a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055c2:	4629      	mov	r1, r5
 80055c4:	008b      	lsls	r3, r1, #2
 80055c6:	4621      	mov	r1, r4
 80055c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055cc:	4621      	mov	r1, r4
 80055ce:	008a      	lsls	r2, r1, #2
 80055d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055d4:	f7fb f844 	bl	8000660 <__aeabi_uldivmod>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4b60      	ldr	r3, [pc, #384]	; (8005760 <UART_SetConfig+0x4e4>)
 80055de:	fba3 2302 	umull	r2, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	011c      	lsls	r4, r3, #4
 80055e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055f8:	4642      	mov	r2, r8
 80055fa:	464b      	mov	r3, r9
 80055fc:	1891      	adds	r1, r2, r2
 80055fe:	61b9      	str	r1, [r7, #24]
 8005600:	415b      	adcs	r3, r3
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005608:	4641      	mov	r1, r8
 800560a:	1851      	adds	r1, r2, r1
 800560c:	6139      	str	r1, [r7, #16]
 800560e:	4649      	mov	r1, r9
 8005610:	414b      	adcs	r3, r1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005620:	4659      	mov	r1, fp
 8005622:	00cb      	lsls	r3, r1, #3
 8005624:	4651      	mov	r1, sl
 8005626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800562a:	4651      	mov	r1, sl
 800562c:	00ca      	lsls	r2, r1, #3
 800562e:	4610      	mov	r0, r2
 8005630:	4619      	mov	r1, r3
 8005632:	4603      	mov	r3, r0
 8005634:	4642      	mov	r2, r8
 8005636:	189b      	adds	r3, r3, r2
 8005638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800563c:	464b      	mov	r3, r9
 800563e:	460a      	mov	r2, r1
 8005640:	eb42 0303 	adc.w	r3, r2, r3
 8005644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	67bb      	str	r3, [r7, #120]	; 0x78
 8005652:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005660:	4649      	mov	r1, r9
 8005662:	008b      	lsls	r3, r1, #2
 8005664:	4641      	mov	r1, r8
 8005666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800566a:	4641      	mov	r1, r8
 800566c:	008a      	lsls	r2, r1, #2
 800566e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005672:	f7fa fff5 	bl	8000660 <__aeabi_uldivmod>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4611      	mov	r1, r2
 800567c:	4b38      	ldr	r3, [pc, #224]	; (8005760 <UART_SetConfig+0x4e4>)
 800567e:	fba3 2301 	umull	r2, r3, r3, r1
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	2264      	movs	r2, #100	; 0x64
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	1acb      	subs	r3, r1, r3
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	3332      	adds	r3, #50	; 0x32
 8005690:	4a33      	ldr	r2, [pc, #204]	; (8005760 <UART_SetConfig+0x4e4>)
 8005692:	fba2 2303 	umull	r2, r3, r2, r3
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800569c:	441c      	add	r4, r3
 800569e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a2:	2200      	movs	r2, #0
 80056a4:	673b      	str	r3, [r7, #112]	; 0x70
 80056a6:	677a      	str	r2, [r7, #116]	; 0x74
 80056a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056ac:	4642      	mov	r2, r8
 80056ae:	464b      	mov	r3, r9
 80056b0:	1891      	adds	r1, r2, r2
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	415b      	adcs	r3, r3
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056bc:	4641      	mov	r1, r8
 80056be:	1851      	adds	r1, r2, r1
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	4649      	mov	r1, r9
 80056c4:	414b      	adcs	r3, r1
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056d4:	4659      	mov	r1, fp
 80056d6:	00cb      	lsls	r3, r1, #3
 80056d8:	4651      	mov	r1, sl
 80056da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056de:	4651      	mov	r1, sl
 80056e0:	00ca      	lsls	r2, r1, #3
 80056e2:	4610      	mov	r0, r2
 80056e4:	4619      	mov	r1, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	4642      	mov	r2, r8
 80056ea:	189b      	adds	r3, r3, r2
 80056ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ee:	464b      	mov	r3, r9
 80056f0:	460a      	mov	r2, r1
 80056f2:	eb42 0303 	adc.w	r3, r2, r3
 80056f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	663b      	str	r3, [r7, #96]	; 0x60
 8005702:	667a      	str	r2, [r7, #100]	; 0x64
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005710:	4649      	mov	r1, r9
 8005712:	008b      	lsls	r3, r1, #2
 8005714:	4641      	mov	r1, r8
 8005716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800571a:	4641      	mov	r1, r8
 800571c:	008a      	lsls	r2, r1, #2
 800571e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005722:	f7fa ff9d 	bl	8000660 <__aeabi_uldivmod>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <UART_SetConfig+0x4e4>)
 800572c:	fba3 1302 	umull	r1, r3, r3, r2
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	2164      	movs	r1, #100	; 0x64
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	3332      	adds	r3, #50	; 0x32
 800573e:	4a08      	ldr	r2, [pc, #32]	; (8005760 <UART_SetConfig+0x4e4>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
 8005744:	095b      	lsrs	r3, r3, #5
 8005746:	f003 020f 	and.w	r2, r3, #15
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4422      	add	r2, r4
 8005752:	609a      	str	r2, [r3, #8]
}
 8005754:	bf00      	nop
 8005756:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800575a:	46bd      	mov	sp, r7
 800575c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005760:	51eb851f 	.word	0x51eb851f

08005764 <memset>:
 8005764:	4402      	add	r2, r0
 8005766:	4603      	mov	r3, r0
 8005768:	4293      	cmp	r3, r2
 800576a:	d100      	bne.n	800576e <memset+0xa>
 800576c:	4770      	bx	lr
 800576e:	f803 1b01 	strb.w	r1, [r3], #1
 8005772:	e7f9      	b.n	8005768 <memset+0x4>

08005774 <__libc_init_array>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	4d0d      	ldr	r5, [pc, #52]	; (80057ac <__libc_init_array+0x38>)
 8005778:	4c0d      	ldr	r4, [pc, #52]	; (80057b0 <__libc_init_array+0x3c>)
 800577a:	1b64      	subs	r4, r4, r5
 800577c:	10a4      	asrs	r4, r4, #2
 800577e:	2600      	movs	r6, #0
 8005780:	42a6      	cmp	r6, r4
 8005782:	d109      	bne.n	8005798 <__libc_init_array+0x24>
 8005784:	4d0b      	ldr	r5, [pc, #44]	; (80057b4 <__libc_init_array+0x40>)
 8005786:	4c0c      	ldr	r4, [pc, #48]	; (80057b8 <__libc_init_array+0x44>)
 8005788:	f000 f826 	bl	80057d8 <_init>
 800578c:	1b64      	subs	r4, r4, r5
 800578e:	10a4      	asrs	r4, r4, #2
 8005790:	2600      	movs	r6, #0
 8005792:	42a6      	cmp	r6, r4
 8005794:	d105      	bne.n	80057a2 <__libc_init_array+0x2e>
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	f855 3b04 	ldr.w	r3, [r5], #4
 800579c:	4798      	blx	r3
 800579e:	3601      	adds	r6, #1
 80057a0:	e7ee      	b.n	8005780 <__libc_init_array+0xc>
 80057a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a6:	4798      	blx	r3
 80057a8:	3601      	adds	r6, #1
 80057aa:	e7f2      	b.n	8005792 <__libc_init_array+0x1e>
 80057ac:	08005818 	.word	0x08005818
 80057b0:	08005818 	.word	0x08005818
 80057b4:	08005818 	.word	0x08005818
 80057b8:	0800581c 	.word	0x0800581c

080057bc <memcpy>:
 80057bc:	440a      	add	r2, r1
 80057be:	4291      	cmp	r1, r2
 80057c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057c4:	d100      	bne.n	80057c8 <memcpy+0xc>
 80057c6:	4770      	bx	lr
 80057c8:	b510      	push	{r4, lr}
 80057ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057d2:	4291      	cmp	r1, r2
 80057d4:	d1f9      	bne.n	80057ca <memcpy+0xe>
 80057d6:	bd10      	pop	{r4, pc}

080057d8 <_init>:
 80057d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057da:	bf00      	nop
 80057dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057de:	bc08      	pop	{r3}
 80057e0:	469e      	mov	lr, r3
 80057e2:	4770      	bx	lr

080057e4 <_fini>:
 80057e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e6:	bf00      	nop
 80057e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ea:	bc08      	pop	{r3}
 80057ec:	469e      	mov	lr, r3
 80057ee:	4770      	bx	lr
