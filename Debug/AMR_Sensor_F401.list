
AMR_Sensor_F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dac  08006dac  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db4  08006db4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  20000014  08006dd0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  08006dd0  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130d0  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac0  00000000  00000000  00033157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00035c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d66  00000000  00000000  00036d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f57  00000000  00000000  00037aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001485b  00000000  00000000  0004f9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c071  00000000  00000000  00064258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049ac  00000000  00000000  001002cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00104c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006d74 	.word	0x08006d74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08006d74 	.word	0x08006d74

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a28:	f000 b970 	b.w	8000d0c <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9e08      	ldr	r6, [sp, #32]
 8000a4a:	460d      	mov	r5, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	460f      	mov	r7, r1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d14a      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4694      	mov	ip, r2
 8000a58:	d965      	bls.n	8000b26 <__udivmoddi4+0xe2>
 8000a5a:	fab2 f382 	clz	r3, r2
 8000a5e:	b143      	cbz	r3, 8000a72 <__udivmoddi4+0x2e>
 8000a60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a64:	f1c3 0220 	rsb	r2, r3, #32
 8000a68:	409f      	lsls	r7, r3
 8000a6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a6e:	4317      	orrs	r7, r2
 8000a70:	409c      	lsls	r4, r3
 8000a72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a76:	fa1f f58c 	uxth.w	r5, ip
 8000a7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a7e:	0c22      	lsrs	r2, r4, #16
 8000a80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a88:	fb01 f005 	mul.w	r0, r1, r5
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x62>
 8000a90:	eb1c 0202 	adds.w	r2, ip, r2
 8000a94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000a98:	f080 811c 	bcs.w	8000cd4 <__udivmoddi4+0x290>
 8000a9c:	4290      	cmp	r0, r2
 8000a9e:	f240 8119 	bls.w	8000cd4 <__udivmoddi4+0x290>
 8000aa2:	3902      	subs	r1, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a12      	subs	r2, r2, r0
 8000aa8:	b2a4      	uxth	r4, r4
 8000aaa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ab2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ab6:	fb00 f505 	mul.w	r5, r0, r5
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	d90a      	bls.n	8000ad4 <__udivmoddi4+0x90>
 8000abe:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ac6:	f080 8107 	bcs.w	8000cd8 <__udivmoddi4+0x294>
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	f240 8104 	bls.w	8000cd8 <__udivmoddi4+0x294>
 8000ad0:	4464      	add	r4, ip
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11e      	cbz	r6, 8000ae6 <__udivmoddi4+0xa2>
 8000ade:	40dc      	lsrs	r4, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0xbc>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	f000 80ed 	beq.w	8000cce <__udivmoddi4+0x28a>
 8000af4:	2100      	movs	r1, #0
 8000af6:	e9c6 0500 	strd	r0, r5, [r6]
 8000afa:	4608      	mov	r0, r1
 8000afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b00:	fab3 f183 	clz	r1, r3
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d149      	bne.n	8000b9c <__udivmoddi4+0x158>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	d302      	bcc.n	8000b12 <__udivmoddi4+0xce>
 8000b0c:	4282      	cmp	r2, r0
 8000b0e:	f200 80f8 	bhi.w	8000d02 <__udivmoddi4+0x2be>
 8000b12:	1a84      	subs	r4, r0, r2
 8000b14:	eb65 0203 	sbc.w	r2, r5, r3
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4617      	mov	r7, r2
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d0e2      	beq.n	8000ae6 <__udivmoddi4+0xa2>
 8000b20:	e9c6 4700 	strd	r4, r7, [r6]
 8000b24:	e7df      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000b26:	b902      	cbnz	r2, 8000b2a <__udivmoddi4+0xe6>
 8000b28:	deff      	udf	#255	; 0xff
 8000b2a:	fab2 f382 	clz	r3, r2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8090 	bne.w	8000c54 <__udivmoddi4+0x210>
 8000b34:	1a8a      	subs	r2, r1, r2
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b44:	fb07 2015 	mls	r0, r7, r5, r2
 8000b48:	0c22      	lsrs	r2, r4, #16
 8000b4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b4e:	fb0e f005 	mul.w	r0, lr, r5
 8000b52:	4290      	cmp	r0, r2
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x124>
 8000b56:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x122>
 8000b60:	4290      	cmp	r0, r2
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2b8>
 8000b66:	4645      	mov	r5, r8
 8000b68:	1a12      	subs	r2, r2, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b70:	fb07 2210 	mls	r2, r7, r0, r2
 8000b74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x14e>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x14c>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2c2>
 8000b90:	4610      	mov	r0, r2
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b9a:	e79f      	b.n	8000adc <__udivmoddi4+0x98>
 8000b9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ba0:	408b      	lsls	r3, r1
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bae:	fa20 f307 	lsr.w	r3, r0, r7
 8000bb2:	40fd      	lsrs	r5, r7
 8000bb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb8:	4323      	orrs	r3, r4
 8000bba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bbe:	fa1f fe8c 	uxth.w	lr, ip
 8000bc2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bc6:	0c1c      	lsrs	r4, r3, #16
 8000bc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bcc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b0>
 8000bdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2b4>
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2b4>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4464      	add	r4, ip
 8000bf4:	1b64      	subs	r4, r4, r5
 8000bf6:	b29d      	uxth	r5, r3
 8000bf8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bfc:	fb09 4413 	mls	r4, r9, r3, r4
 8000c00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1da>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2ac>
 8000c1a:	3b02      	subs	r3, #2
 8000c1c:	4464      	add	r4, ip
 8000c1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c22:	fba3 9502 	umull	r9, r5, r3, r2
 8000c26:	eba4 040e 	sub.w	r4, r4, lr
 8000c2a:	42ac      	cmp	r4, r5
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46ae      	mov	lr, r5
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x29c>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x298>
 8000c34:	b156      	cbz	r6, 8000c4c <__udivmoddi4+0x208>
 8000c36:	ebb0 0208 	subs.w	r2, r0, r8
 8000c3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c42:	40ca      	lsrs	r2, r1
 8000c44:	40cc      	lsrs	r4, r1
 8000c46:	4317      	orrs	r7, r2
 8000c48:	e9c6 7400 	strd	r7, r4, [r6]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c54:	f1c3 0120 	rsb	r1, r3, #32
 8000c58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c60:	fa25 f101 	lsr.w	r1, r5, r1
 8000c64:	409d      	lsls	r5, r3
 8000c66:	432a      	orrs	r2, r5
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c74:	fb07 1510 	mls	r5, r7, r0, r1
 8000c78:	0c11      	lsrs	r1, r2, #16
 8000c7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c82:	428d      	cmp	r5, r1
 8000c84:	fa04 f403 	lsl.w	r4, r4, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x258>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c94:	428d      	cmp	r5, r1
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1b49      	subs	r1, r1, r5
 8000c9e:	b292      	uxth	r2, r2
 8000ca0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ca4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cac:	fb05 f10e 	mul.w	r1, r5, lr
 8000cb0:	4291      	cmp	r1, r2
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x282>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2a8>
 8000cbe:	4291      	cmp	r1, r2
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2a8>
 8000cc2:	3d02      	subs	r5, #2
 8000cc4:	4462      	add	r2, ip
 8000cc6:	1a52      	subs	r2, r2, r1
 8000cc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0xfc>
 8000cce:	4631      	mov	r1, r6
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	e708      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000cd4:	4639      	mov	r1, r7
 8000cd6:	e6e6      	b.n	8000aa6 <__udivmoddi4+0x62>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	e6fb      	b.n	8000ad4 <__udivmoddi4+0x90>
 8000cdc:	4548      	cmp	r0, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f0>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f0>
 8000cec:	4645      	mov	r5, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x282>
 8000cf0:	462b      	mov	r3, r5
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1da>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x258>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b0>
 8000cfc:	3d02      	subs	r5, #2
 8000cfe:	4462      	add	r2, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x124>
 8000d02:	4608      	mov	r0, r1
 8000d04:	e70a      	b.n	8000b1c <__udivmoddi4+0xd8>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x14e>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <BNO08X_GetData>:
#include "BNO08X.h"

static uint8_t RX_Data[19];
static UART_HandleTypeDef huart;

void BNO08X_GetData(BNO08X_Typedef *sensorData){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    sensorData->header = RX_Data[0];
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	701a      	strb	r2, [r3, #0]
    sensorData->index = RX_Data[2];
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d22:	789a      	ldrb	r2, [r3, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	705a      	strb	r2, [r3, #1]
    sensorData->yaw = (int16_t)((RX_Data[4] << 8) | RX_Data[3]);
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d2a:	791b      	ldrb	r3, [r3, #4]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d32:	78db      	ldrb	r3, [r3, #3]
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	805a      	strh	r2, [r3, #2]
    sensorData->pitch = (int16_t)((RX_Data[6] << 8) | RX_Data[5]);
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d40:	799b      	ldrb	r3, [r3, #6]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d48:	795b      	ldrb	r3, [r3, #5]
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	809a      	strh	r2, [r3, #4]
    sensorData->roll = (int16_t)((RX_Data[8] << 8) | RX_Data[7]);
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d56:	7a1b      	ldrb	r3, [r3, #8]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d5e:	79db      	ldrb	r3, [r3, #7]
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21a      	sxth	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	80da      	strh	r2, [r3, #6]
    sensorData->x_acceleration = (int16_t)((RX_Data[10] << 8) | RX_Data[9]);
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d6c:	7a9b      	ldrb	r3, [r3, #10]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d74:	7a5b      	ldrb	r3, [r3, #9]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	811a      	strh	r2, [r3, #8]
    sensorData->y_acceleration = (int16_t)((RX_Data[12] << 8) | RX_Data[11]);
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d82:	7b1b      	ldrb	r3, [r3, #12]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d8a:	7adb      	ldrb	r3, [r3, #11]
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b21a      	sxth	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	815a      	strh	r2, [r3, #10]
    sensorData->z_acceleration = (int16_t)((RX_Data[14] << 8) | RX_Data[13]);
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <BNO08X_GetData+0xdc>)
 8000d98:	7b9b      	ldrb	r3, [r3, #14]
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <BNO08X_GetData+0xdc>)
 8000da0:	7b5b      	ldrb	r3, [r3, #13]
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	819a      	strh	r2, [r3, #12]

    // MI, MR, Reserved bytes
    for (int i = 0; i < 3; i++) {
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e00c      	b.n	8000dcc <BNO08X_GetData+0xbc>
        sensorData->mi_mr_reserved[i] = RX_Data[15 + i];
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	330f      	adds	r3, #15
 8000db6:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <BNO08X_GetData+0xdc>)
 8000db8:	5cd1      	ldrb	r1, [r2, r3]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	330e      	adds	r3, #14
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	ddef      	ble.n	8000db2 <BNO08X_GetData+0xa2>
    }

    sensorData->checksum = RX_Data[18];
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <BNO08X_GetData+0xdc>)
 8000dd4:	7c9a      	ldrb	r2, [r3, #18]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	745a      	strb	r2, [r3, #17]

    HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000dda:	2213      	movs	r2, #19
 8000ddc:	4903      	ldr	r1, [pc, #12]	; (8000dec <BNO08X_GetData+0xdc>)
 8000dde:	4804      	ldr	r0, [pc, #16]	; (8000df0 <BNO08X_GetData+0xe0>)
 8000de0:	f005 fa57 	bl	8006292 <HAL_UART_Receive_DMA>
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000030 	.word	0x20000030
 8000df0:	20000044 	.word	0x20000044

08000df4 <BNO08X_Init>:

void BNO08X_Init(UART_HandleTypeDef *huart_instance){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	huart = *huart_instance;
 8000dfc:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <BNO08X_Init+0x2c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	2348      	movs	r3, #72	; 0x48
 8000e06:	461a      	mov	r2, r3
 8000e08:	f005 ffa6 	bl	8006d58 <memcpy>
	HAL_UART_Receive_DMA(&huart, RX_Data, sizeof(RX_Data));
 8000e0c:	2213      	movs	r2, #19
 8000e0e:	4905      	ldr	r1, [pc, #20]	; (8000e24 <BNO08X_Init+0x30>)
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <BNO08X_Init+0x2c>)
 8000e12:	f005 fa3e 	bl	8006292 <HAL_UART_Receive_DMA>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000044 	.word	0x20000044
 8000e24:	20000030 	.word	0x20000030

08000e28 <hx711_init>:
 *      Author: greatreyhan
 */

#include "HX711.h"

void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80fb      	strh	r3, [r7, #6]
  hx711->clk_gpio = clk_gpio;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	88fa      	ldrh	r2, [r7, #6]
 8000e42:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000e4e:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	68b8      	ldr	r0, [r7, #8]
 8000e78:	f003 fbfc 	bl	8004674 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000e88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	6838      	ldr	r0, [r7, #0]
 8000e94:	f003 fbee 	bl	8004674 <HAL_GPIO_Init>

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <set_scale>:

void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eac:	edc7 0a01 	vstr	s1, [r7, #4]
	hx711->Ascale = Ascale;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	61da      	str	r2, [r3, #28]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <Max6675_Read_Temp>:
// ------------------- Variables ----------------
_Bool TCF=0;                                          // Thermocouple Connection acknowledge Flag
uint8_t DATARX[2];                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max6675_Read_Temp(void){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
float Temp=0;                                         // Temperature Variable
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_RESET);       // Low State for SPI Communication
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	4820      	ldr	r0, [pc, #128]	; (8000f5c <Max6675_Read_Temp+0x94>)
 8000edc:	f003 fd4e 	bl	800497c <HAL_GPIO_WritePin>
HAL_SPI_Receive(&hspi1,DATARX,1,50);                  // DATA Transfer
 8000ee0:	2332      	movs	r3, #50	; 0x32
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	491e      	ldr	r1, [pc, #120]	; (8000f60 <Max6675_Read_Temp+0x98>)
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <Max6675_Read_Temp+0x9c>)
 8000ee8:	f004 fa43 	bl	8005372 <HAL_SPI_Receive>
HAL_GPIO_WritePin(SSPORT,SSPIN,GPIO_PIN_SET);         // High State for SPI Communication
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef2:	481a      	ldr	r0, [pc, #104]	; (8000f5c <Max6675_Read_Temp+0x94>)
 8000ef4:	f003 fd42 	bl	800497c <HAL_GPIO_WritePin>
TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <Max6675_Read_Temp+0x98>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <Max6675_Read_Temp+0x98>)
 8000f00:	785b      	ldrb	r3, [r3, #1]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	4313      	orrs	r3, r2
 8000f06:	109b      	asrs	r3, r3, #2
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <Max6675_Read_Temp+0xa0>)
 8000f18:	701a      	strb	r2, [r3, #0]
Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <Max6675_Read_Temp+0x98>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <Max6675_Read_Temp+0x98>)
 8000f22:	785b      	ldrb	r3, [r3, #1]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	4313      	orrs	r3, r2
 8000f28:	10db      	asrs	r3, r3, #3
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f32:	edc7 7a01 	vstr	s15, [r7, #4]
Temp*=0.25;                                           // Data to Centigrade Conversation
 8000f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f42:	edc7 7a01 	vstr	s15, [r7, #4]
HAL_Delay(250);                                       // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8000f46:	20fa      	movs	r0, #250	; 0xfa
 8000f48:	f002 fb0c 	bl	8003564 <HAL_Delay>
return Temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	ee07 3a90 	vmov	s15, r3
}
 8000f52:	eeb0 0a67 	vmov.f32	s0, s15
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	200000e8 	.word	0x200000e8
 8000f64:	2000008c 	.word	0x2000008c
 8000f68:	200000e4 	.word	0x200000e4

08000f6c <VoltCurrent_Init>:
//static float const_voltage = 1.488;
static float const_voltage = 1.035;

ADC_HandleTypeDef hadc;

void VoltCurrent_Init(ADC_HandleTypeDef *hadc_config){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	hadc = *hadc_config;
 8000f74:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <VoltCurrent_Init+0x20>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2348      	movs	r3, #72	; 0x48
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f005 feea 	bl	8006d58 <memcpy>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000f4 	.word	0x200000f4

08000f90 <ADC_Select_Voltage>:

void ADC_Select_Voltage(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <ADC_Select_Voltage+0x3c>)
 8000fb4:	f002 fcbe 	bl	8003934 <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <ADC_Select_Voltage+0x32>
	  {
	    Error_Handler();
 8000fbe:	f001 ffb5 	bl	8002f2c <Error_Handler>
	  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000f4 	.word	0x200000f4

08000fd0 <ADC_Select_Current>:

void ADC_Select_Current(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_4;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <ADC_Select_Current+0x38>)
 8000ff0:	f002 fca0 	bl	8003934 <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <ADC_Select_Current+0x2e>
	  {
	    Error_Handler();
 8000ffa:	f001 ff97 	bl	8002f2c <Error_Handler>
	  }
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000f4 	.word	0x200000f4

0800100c <Get_Voltage_Measurement>:

void Get_Voltage_Measurement(Voltage_Current_Typedef *config){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	  // Reading Voltage Sensor
	  ADC_Select_Voltage();
 8001014:	f7ff ffbc 	bl	8000f90 <ADC_Select_Voltage>
	  HAL_ADC_Start(&hadc);
 8001018:	4812      	ldr	r0, [pc, #72]	; (8001064 <Get_Voltage_Measurement+0x58>)
 800101a:	f002 fb0b 	bl	8003634 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 800101e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001022:	4810      	ldr	r0, [pc, #64]	; (8001064 <Get_Voltage_Measurement+0x58>)
 8001024:	f002 fbed 	bl	8003802 <HAL_ADC_PollForConversion>
	  value[0] = HAL_ADC_GetValue(&hadc);
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <Get_Voltage_Measurement+0x58>)
 800102a:	f002 fc75 	bl	8003918 <HAL_ADC_GetValue>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <Get_Voltage_Measurement+0x5c>)
 8001032:	6013      	str	r3, [r2, #0]
	  config->voltage = (float)value[0]/4095*24;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <Get_Voltage_Measurement+0x5c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001040:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800106c <Get_Voltage_Measurement+0x60>
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 800104c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edc3 7a00 	vstr	s15, [r3]
	  HAL_ADC_Stop(&hadc);
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <Get_Voltage_Measurement+0x58>)
 8001058:	f002 fba0 	bl	800379c <HAL_ADC_Stop>

}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000f4 	.word	0x200000f4
 8001068:	200000ec 	.word	0x200000ec
 800106c:	457ff000 	.word	0x457ff000

08001070 <Get_Current_Measurement>:

void Get_Current_Measurement(Voltage_Current_Typedef *config){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	  // Reading Current Sensor
	  ADC_Select_Current();
 8001078:	f7ff ffaa 	bl	8000fd0 <ADC_Select_Current>
	  HAL_ADC_Start(&hadc);
 800107c:	483c      	ldr	r0, [pc, #240]	; (8001170 <Get_Current_Measurement+0x100>)
 800107e:	f002 fad9 	bl	8003634 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1000);
 8001082:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001086:	483a      	ldr	r0, [pc, #232]	; (8001170 <Get_Current_Measurement+0x100>)
 8001088:	f002 fbbb 	bl	8003802 <HAL_ADC_PollForConversion>
	  value[1] = HAL_ADC_GetValue(&hadc);
 800108c:	4838      	ldr	r0, [pc, #224]	; (8001170 <Get_Current_Measurement+0x100>)
 800108e:	f002 fc43 	bl	8003918 <HAL_ADC_GetValue>
 8001092:	4603      	mov	r3, r0
 8001094:	4a37      	ldr	r2, [pc, #220]	; (8001174 <Get_Current_Measurement+0x104>)
 8001096:	6053      	str	r3, [r2, #4]
	  float rawVoltage = (float) value[1]*3.3*2*const_voltage/4095;
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <Get_Current_Measurement+0x104>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	ee17 0a90 	vmov	r0, s15
 80010a8:	f7ff f9fa 	bl	80004a0 <__aeabi_f2d>
 80010ac:	a32c      	add	r3, pc, #176	; (adr r3, 8001160 <Get_Current_Measurement+0xf0>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff fa4d 	bl	8000550 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	f7ff f88f 	bl	80001e4 <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4614      	mov	r4, r2
 80010cc:	461d      	mov	r5, r3
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <Get_Current_Measurement+0x108>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f9e4 	bl	80004a0 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff fa36 	bl	8000550 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	a31e      	add	r3, pc, #120	; (adr r3, 8001168 <Get_Current_Measurement+0xf8>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fb57 	bl	80007a4 <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fc39 	bl	8000974 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	60fb      	str	r3, [r7, #12]
	  config->rawVoltage = rawVoltage;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	609a      	str	r2, [r3, #8]
	  config->current  = (rawVoltage - 2.5)/sensitivity;
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff f9c7 	bl	80004a0 <__aeabi_f2d>
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <Get_Current_Measurement+0x10c>)
 8001118:	f7ff f862 	bl	80001e0 <__aeabi_dsub>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4614      	mov	r4, r2
 8001122:	461d      	mov	r5, r3
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <Get_Current_Measurement+0x110>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9b9 	bl	80004a0 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fb35 	bl	80007a4 <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fc17 	bl	8000974 <__aeabi_d2f>
 8001146:	4602      	mov	r2, r0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc);
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <Get_Current_Measurement+0x100>)
 800114e:	f002 fb25 	bl	800379c <HAL_ADC_Stop>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	66666666 	.word	0x66666666
 8001164:	400a6666 	.word	0x400a6666
 8001168:	00000000 	.word	0x00000000
 800116c:	40affe00 	.word	0x40affe00
 8001170:	200000f4 	.word	0x200000f4
 8001174:	200000ec 	.word	0x200000ec
 8001178:	20000004 	.word	0x20000004
 800117c:	40040000 	.word	0x40040000
 8001180:	20000000 	.word	0x20000000

08001184 <komunikasi_ctrl_init>:
static uint8_t rx_buf_command[19];
static uint8_t rx_buf_holder[100];
static uint8_t id_holder = 0;
//******************************************** COMMUNICATION TO CONTROL **********************************************//

void komunikasi_ctrl_init(UART_HandleTypeDef* uart_handler){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	huart_ctrl = uart_handler;
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <komunikasi_ctrl_init+0x1c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000154 	.word	0x20000154

080011a4 <checksum_ctrl_generator>:

uint8_t checksum_ctrl_generator(uint8_t* arr, uint8_t size){
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	uint8_t chksm = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; i++) chksm += arr[i];
 80011b4:	2300      	movs	r3, #0
 80011b6:	73bb      	strb	r3, [r7, #14]
 80011b8:	e009      	b.n	80011ce <checksum_ctrl_generator+0x2a>
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	4413      	add	r3, r2
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	3301      	adds	r3, #1
 80011cc:	73bb      	strb	r3, [r7, #14]
 80011ce:	7bba      	ldrb	r2, [r7, #14]
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d3f1      	bcc.n	80011ba <checksum_ctrl_generator+0x16>
	return (chksm & 0xFF);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <tx_ctrl_send_BNO08X>:

	if(HAL_UART_Transmit(huart_ctrl, ping, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

bool tx_ctrl_send_BNO08X(BNO08X_Typedef BNO08x){
 80011e4:	b084      	sub	sp, #16
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	f107 0c20 	add.w	ip, r7, #32
 80011f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t BNO[] = {0xA5, 0x5A, 0x02, ((BNO08x.yaw >> 8) & 0XFF), ((BNO08x.yaw) & 0XFF), ((BNO08x.pitch >> 8) & 0XFF), ((BNO08x.pitch) & 0XFF), ((BNO08x.roll >> 8) & 0XFF), ((BNO08x.roll) & 0XFF), ((BNO08x.x_acceleration >> 8) & 0XFF), ((BNO08x.x_acceleration) & 0XFF), ((BNO08x.y_acceleration >> 8) & 0XFF), ((BNO08x.y_acceleration) & 0XFF), ((BNO08x.z_acceleration >> 8) & 0XFF), ((BNO08x.z_acceleration) & 0XFF), 0x00, 0x00, 0x00, 0x00};
 80011f4:	23a5      	movs	r3, #165	; 0xa5
 80011f6:	713b      	strb	r3, [r7, #4]
 80011f8:	235a      	movs	r3, #90	; 0x5a
 80011fa:	717b      	strb	r3, [r7, #5]
 80011fc:	2302      	movs	r3, #2
 80011fe:	71bb      	strb	r3, [r7, #6]
 8001200:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001204:	121b      	asrs	r3, r3, #8
 8001206:	b21b      	sxth	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001210:	b2db      	uxtb	r3, r3
 8001212:	723b      	strb	r3, [r7, #8]
 8001214:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001218:	121b      	asrs	r3, r3, #8
 800121a:	b21b      	sxth	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	727b      	strb	r3, [r7, #9]
 8001220:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001224:	b2db      	uxtb	r3, r3
 8001226:	72bb      	strb	r3, [r7, #10]
 8001228:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800122c:	121b      	asrs	r3, r3, #8
 800122e:	b21b      	sxth	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	72fb      	strb	r3, [r7, #11]
 8001234:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
 800123c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001240:	121b      	asrs	r3, r3, #8
 8001242:	b21b      	sxth	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	737b      	strb	r3, [r7, #13]
 8001248:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800124c:	b2db      	uxtb	r3, r3
 800124e:	73bb      	strb	r3, [r7, #14]
 8001250:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001254:	121b      	asrs	r3, r3, #8
 8001256:	b21b      	sxth	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001260:	b2db      	uxtb	r3, r3
 8001262:	743b      	strb	r3, [r7, #16]
 8001264:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001268:	121b      	asrs	r3, r3, #8
 800126a:	b21b      	sxth	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	747b      	strb	r3, [r7, #17]
 8001270:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001274:	b2db      	uxtb	r3, r3
 8001276:	74bb      	strb	r3, [r7, #18]
 8001278:	2300      	movs	r3, #0
 800127a:	74fb      	strb	r3, [r7, #19]
 800127c:	2300      	movs	r3, #0
 800127e:	753b      	strb	r3, [r7, #20]
 8001280:	2300      	movs	r3, #0
 8001282:	757b      	strb	r3, [r7, #21]
 8001284:	2300      	movs	r3, #0
 8001286:	75bb      	strb	r3, [r7, #22]
	BNO[18] = checksum_ctrl_generator(BNO, 19);
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2113      	movs	r1, #19
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff89 	bl	80011a4 <checksum_ctrl_generator>
 8001292:	4603      	mov	r3, r0
 8001294:	75bb      	strb	r3, [r7, #22]

	if(HAL_UART_Transmit(huart_ctrl, BNO, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <tx_ctrl_send_BNO08X+0xdc>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	1d39      	adds	r1, r7, #4
 800129c:	2364      	movs	r3, #100	; 0x64
 800129e:	2213      	movs	r2, #19
 80012a0:	f004 ff6c 	bl	800617c <HAL_UART_Transmit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <tx_ctrl_send_BNO08X+0xca>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <tx_ctrl_send_BNO08X+0xcc>
	else return false;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012ba:	b004      	add	sp, #16
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000154 	.word	0x20000154

080012c4 <tx_ctrl_send_Astar>:

bool tx_ctrl_send_Astar(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
	for(int i = 0; i <= id_holder; i++){
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e021      	b.n	8001314 <tx_ctrl_send_Astar+0x50>
		uint8_t tx_data[19];
		for(int j = 0; j < 19;j++){
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	e011      	b.n	80012fa <tx_ctrl_send_Astar+0x36>
			tx_data[j] = rx_buf_holder[(i*19)+j];
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	4613      	mov	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	441a      	add	r2, r3
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <tx_ctrl_send_Astar+0x68>)
 80012e8:	5cd1      	ldrb	r1, [r2, r3]
 80012ea:	1d3a      	adds	r2, r7, #4
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	4413      	add	r3, r2
 80012f0:	460a      	mov	r2, r1
 80012f2:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 19;j++){
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	3301      	adds	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b12      	cmp	r3, #18
 80012fe:	ddea      	ble.n	80012d6 <tx_ctrl_send_Astar+0x12>
		}
		HAL_UART_Transmit(huart_ctrl, tx_data, 19, TIMEOUT_SEND);
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <tx_ctrl_send_Astar+0x6c>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	1d39      	adds	r1, r7, #4
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	2213      	movs	r2, #19
 800130a:	f004 ff37 	bl	800617c <HAL_UART_Transmit>
	for(int i = 0; i <= id_holder; i++){
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <tx_ctrl_send_Astar+0x70>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	4293      	cmp	r3, r2
 800131e:	ddd7      	ble.n	80012d0 <tx_ctrl_send_Astar+0xc>
	}
	return true;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	3720      	adds	r7, #32
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000180 	.word	0x20000180
 8001330:	20000154 	.word	0x20000154
 8001334:	200001e4 	.word	0x200001e4

08001338 <tx_ctrl_send_Command>:

bool tx_ctrl_send_Command(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	if(HAL_UART_Transmit(huart_ctrl, rx_buf_command, 19, TIMEOUT_SEND) == HAL_OK) return true;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <tx_ctrl_send_Command+0x24>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	2213      	movs	r2, #19
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <tx_ctrl_send_Command+0x28>)
 8001346:	f004 ff19 	bl	800617c <HAL_UART_Transmit>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <tx_ctrl_send_Command+0x1c>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <tx_ctrl_send_Command+0x1e>
	else return false;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000154 	.word	0x20000154
 8001360:	2000016c 	.word	0x2000016c

08001364 <rx_ctrl_start_get>:

	if(HAL_UART_Transmit(huart_ctrl, odom_data, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

void rx_ctrl_start_get(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_ctrl,rxbuf_get_ctrl, 19);
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <rx_ctrl_start_get+0x18>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2213      	movs	r2, #19
 800136e:	4904      	ldr	r1, [pc, #16]	; (8001380 <rx_ctrl_start_get+0x1c>)
 8001370:	4618      	mov	r0, r3
 8001372:	f004 ff8e 	bl	8006292 <HAL_UART_Receive_DMA>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000154 	.word	0x20000154
 8001380:	20000158 	.word	0x20000158

08001384 <rx_ctrl_get>:

void rx_ctrl_get(com_ctrl_get_t* get){
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
		if((rxbuf_get_ctrl[0] == 0xA5) && (rxbuf_get_ctrl[1] == 0x5A)){
 800138c:	4b86      	ldr	r3, [pc, #536]	; (80015a8 <rx_ctrl_get+0x224>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2ba5      	cmp	r3, #165	; 0xa5
 8001392:	f040 83e5 	bne.w	8001b60 <rx_ctrl_get+0x7dc>
 8001396:	4b84      	ldr	r3, [pc, #528]	; (80015a8 <rx_ctrl_get+0x224>)
 8001398:	785b      	ldrb	r3, [r3, #1]
 800139a:	2b5a      	cmp	r3, #90	; 0x5a
 800139c:	f040 83e0 	bne.w	8001b60 <rx_ctrl_get+0x7dc>

			// Check for ping
			if(rxbuf_get_ctrl[2] == 0x01){
 80013a0:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <rx_ctrl_get+0x224>)
 80013a2:	789b      	ldrb	r3, [r3, #2]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d104      	bne.n	80013b2 <rx_ctrl_get+0x2e>
				get->cmd = PING;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 80013b0:	e0bc      	b.n	800152c <rx_ctrl_get+0x1a8>
			}
			// Check for BNO08X Sensor
			else if(rxbuf_get_ctrl[2] == 0x02){
 80013b2:	4b7d      	ldr	r3, [pc, #500]	; (80015a8 <rx_ctrl_get+0x224>)
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	f040 80b8 	bne.w	800152c <rx_ctrl_get+0x1a8>

				if((rxbuf_get_ctrl[3] & 0x80)) get->yaw = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 80013bc:	4b7a      	ldr	r3, [pc, #488]	; (80015a8 <rx_ctrl_get+0x224>)
 80013be:	78db      	ldrb	r3, [r3, #3]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da0c      	bge.n	80013e0 <rx_ctrl_get+0x5c>
 80013c6:	4b78      	ldr	r3, [pc, #480]	; (80015a8 <rx_ctrl_get+0x224>)
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <rx_ctrl_get+0x224>)
 80013d0:	791b      	ldrb	r3, [r3, #4]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
 80013de:	e00b      	b.n	80013f8 <rx_ctrl_get+0x74>
				else get->yaw = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 80013e0:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <rx_ctrl_get+0x224>)
 80013e2:	78db      	ldrb	r3, [r3, #3]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	4b6f      	ldr	r3, [pc, #444]	; (80015a8 <rx_ctrl_get+0x224>)
 80013ea:	791b      	ldrb	r3, [r3, #4]
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

				if((rxbuf_get_ctrl[5] & 0x80)) get->pitch = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 80013f8:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <rx_ctrl_get+0x224>)
 80013fa:	795b      	ldrb	r3, [r3, #5]
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da0c      	bge.n	800141c <rx_ctrl_get+0x98>
 8001402:	4b69      	ldr	r3, [pc, #420]	; (80015a8 <rx_ctrl_get+0x224>)
 8001404:	795b      	ldrb	r3, [r3, #5]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <rx_ctrl_get+0x224>)
 800140c:	799b      	ldrb	r3, [r3, #6]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
 800141a:	e00b      	b.n	8001434 <rx_ctrl_get+0xb0>
				else get->pitch = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 800141c:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <rx_ctrl_get+0x224>)
 800141e:	795b      	ldrb	r3, [r3, #5]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <rx_ctrl_get+0x224>)
 8001426:	799b      	ldrb	r3, [r3, #6]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8

				if((rxbuf_get_ctrl[7] & 0x80)) get->roll = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 8001434:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <rx_ctrl_get+0x224>)
 8001436:	79db      	ldrb	r3, [r3, #7]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	da0c      	bge.n	8001458 <rx_ctrl_get+0xd4>
 800143e:	4b5a      	ldr	r3, [pc, #360]	; (80015a8 <rx_ctrl_get+0x224>)
 8001440:	79db      	ldrb	r3, [r3, #7]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b58      	ldr	r3, [pc, #352]	; (80015a8 <rx_ctrl_get+0x224>)
 8001448:	7a1b      	ldrb	r3, [r3, #8]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21a      	sxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
 8001456:	e00b      	b.n	8001470 <rx_ctrl_get+0xec>
				else get->roll = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 8001458:	4b53      	ldr	r3, [pc, #332]	; (80015a8 <rx_ctrl_get+0x224>)
 800145a:	79db      	ldrb	r3, [r3, #7]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b21a      	sxth	r2, r3
 8001460:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <rx_ctrl_get+0x224>)
 8001462:	7a1b      	ldrb	r3, [r3, #8]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21a      	sxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6

				if((rxbuf_get_ctrl[9] & 0x80)) get->x_acceleration = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 8001470:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <rx_ctrl_get+0x224>)
 8001472:	7a5b      	ldrb	r3, [r3, #9]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	da0c      	bge.n	8001494 <rx_ctrl_get+0x110>
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <rx_ctrl_get+0x224>)
 800147c:	7a5b      	ldrb	r3, [r3, #9]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <rx_ctrl_get+0x224>)
 8001484:	7a9b      	ldrb	r3, [r3, #10]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
 8001492:	e00b      	b.n	80014ac <rx_ctrl_get+0x128>
				else get->x_acceleration = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8001494:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <rx_ctrl_get+0x224>)
 8001496:	7a5b      	ldrb	r3, [r3, #9]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <rx_ctrl_get+0x224>)
 800149e:	7a9b      	ldrb	r3, [r3, #10]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc

				if((rxbuf_get_ctrl[11] & 0x80)) get->y_acceleration = ((rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12])-(65536);
 80014ac:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <rx_ctrl_get+0x224>)
 80014ae:	7adb      	ldrb	r3, [r3, #11]
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da0c      	bge.n	80014d0 <rx_ctrl_get+0x14c>
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <rx_ctrl_get+0x224>)
 80014b8:	7adb      	ldrb	r3, [r3, #11]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <rx_ctrl_get+0x224>)
 80014c0:	7b1b      	ldrb	r3, [r3, #12]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
 80014ce:	e00b      	b.n	80014e8 <rx_ctrl_get+0x164>
				else get->y_acceleration = (rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12];
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <rx_ctrl_get+0x224>)
 80014d2:	7adb      	ldrb	r3, [r3, #11]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <rx_ctrl_get+0x224>)
 80014da:	7b1b      	ldrb	r3, [r3, #12]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce

				if((rxbuf_get_ctrl[13] & 0x80)) get->z_acceleration = ((rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14])-(65536);
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <rx_ctrl_get+0x224>)
 80014ea:	7b5b      	ldrb	r3, [r3, #13]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da0c      	bge.n	800150c <rx_ctrl_get+0x188>
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <rx_ctrl_get+0x224>)
 80014f4:	7b5b      	ldrb	r3, [r3, #13]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <rx_ctrl_get+0x224>)
 80014fc:	7b9b      	ldrb	r3, [r3, #14]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21a      	sxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
 800150a:	e00b      	b.n	8001524 <rx_ctrl_get+0x1a0>
				else get->z_acceleration = (rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14];
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <rx_ctrl_get+0x224>)
 800150e:	7b5b      	ldrb	r3, [r3, #13]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <rx_ctrl_get+0x224>)
 8001516:	7b9b      	ldrb	r3, [r3, #14]
 8001518:	b21b      	sxth	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b21a      	sxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0

				get->cmd = DATA;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2205      	movs	r2, #5
 8001528:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
			}

			// Check for Task Done
			if(rxbuf_get_ctrl[2] == 0x03){
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <rx_ctrl_get+0x224>)
 800152e:	789b      	ldrb	r3, [r3, #2]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d122      	bne.n	800157a <rx_ctrl_get+0x1f6>
				if((rxbuf_get_ctrl[3] & 0x80)) get->step = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <rx_ctrl_get+0x224>)
 8001536:	78db      	ldrb	r3, [r3, #3]
 8001538:	b25b      	sxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	da0c      	bge.n	8001558 <rx_ctrl_get+0x1d4>
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <rx_ctrl_get+0x224>)
 8001540:	78db      	ldrb	r3, [r3, #3]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <rx_ctrl_get+0x224>)
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21a      	sxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 8001556:	e00b      	b.n	8001570 <rx_ctrl_get+0x1ec>
				else get->step = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <rx_ctrl_get+0x224>)
 800155a:	78db      	ldrb	r3, [r3, #3]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <rx_ctrl_get+0x224>)
 8001562:	791b      	ldrb	r3, [r3, #4]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8

				get->cmd = DATA;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2205      	movs	r2, #5
 8001574:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8001578:	e2f2      	b.n	8001b60 <rx_ctrl_get+0x7dc>
			}

			// Check for Kinematic
			else if(rxbuf_get_ctrl[2] == 0x05){
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <rx_ctrl_get+0x224>)
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d17f      	bne.n	8001682 <rx_ctrl_get+0x2fe>

				if((rxbuf_get_ctrl[3] & 0x80)) get->Sx = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <rx_ctrl_get+0x224>)
 8001584:	78db      	ldrb	r3, [r3, #3]
 8001586:	b25b      	sxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	da0f      	bge.n	80015ac <rx_ctrl_get+0x228>
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <rx_ctrl_get+0x224>)
 800158e:	78db      	ldrb	r3, [r3, #3]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <rx_ctrl_get+0x224>)
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21a      	sxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
 80015a4:	e00e      	b.n	80015c4 <rx_ctrl_get+0x240>
 80015a6:	bf00      	nop
 80015a8:	20000158 	.word	0x20000158
				else get->Sx = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 80015ac:	4b90      	ldr	r3, [pc, #576]	; (80017f0 <rx_ctrl_get+0x46c>)
 80015ae:	78db      	ldrb	r3, [r3, #3]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	4b8e      	ldr	r3, [pc, #568]	; (80017f0 <rx_ctrl_get+0x46c>)
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

				if((rxbuf_get_ctrl[5] & 0x80)) get->Sy = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 80015c4:	4b8a      	ldr	r3, [pc, #552]	; (80017f0 <rx_ctrl_get+0x46c>)
 80015c6:	795b      	ldrb	r3, [r3, #5]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da0c      	bge.n	80015e8 <rx_ctrl_get+0x264>
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <rx_ctrl_get+0x46c>)
 80015d0:	795b      	ldrb	r3, [r3, #5]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	4b86      	ldr	r3, [pc, #536]	; (80017f0 <rx_ctrl_get+0x46c>)
 80015d8:	799b      	ldrb	r3, [r3, #6]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b21a      	sxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
 80015e6:	e00b      	b.n	8001600 <rx_ctrl_get+0x27c>
				else get->Sy = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 80015e8:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <rx_ctrl_get+0x46c>)
 80015ea:	795b      	ldrb	r3, [r3, #5]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b7f      	ldr	r3, [pc, #508]	; (80017f0 <rx_ctrl_get+0x46c>)
 80015f2:	799b      	ldrb	r3, [r3, #6]
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

				if((rxbuf_get_ctrl[7] & 0x80)) get->St = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001602:	79db      	ldrb	r3, [r3, #7]
 8001604:	b25b      	sxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	da0c      	bge.n	8001624 <rx_ctrl_get+0x2a0>
 800160a:	4b79      	ldr	r3, [pc, #484]	; (80017f0 <rx_ctrl_get+0x46c>)
 800160c:	79db      	ldrb	r3, [r3, #7]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001614:	7a1b      	ldrb	r3, [r3, #8]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21a      	sxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
 8001622:	e00b      	b.n	800163c <rx_ctrl_get+0x2b8>
				else get->St = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 8001624:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001626:	79db      	ldrb	r3, [r3, #7]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <rx_ctrl_get+0x46c>)
 800162e:	7a1b      	ldrb	r3, [r3, #8]
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b21a      	sxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2

				if((rxbuf_get_ctrl[9] & 0x80)) get->T = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 800163c:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <rx_ctrl_get+0x46c>)
 800163e:	7a5b      	ldrb	r3, [r3, #9]
 8001640:	b25b      	sxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	da0c      	bge.n	8001660 <rx_ctrl_get+0x2dc>
 8001646:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001648:	7a5b      	ldrb	r3, [r3, #9]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001650:	7a9b      	ldrb	r3, [r3, #10]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21a      	sxth	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 800165e:	e00b      	b.n	8001678 <rx_ctrl_get+0x2f4>
				else get->T = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8001660:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001662:	7a5b      	ldrb	r3, [r3, #9]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b61      	ldr	r3, [pc, #388]	; (80017f0 <rx_ctrl_get+0x46c>)
 800166a:	7a9b      	ldrb	r3, [r3, #10]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21a      	sxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4

				get->cmd = DATA;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2205      	movs	r2, #5
 800167c:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8001680:	e26e      	b.n	8001b60 <rx_ctrl_get+0x7dc>
			}

			// Check for Encoder
			else if(rxbuf_get_ctrl[2] == 0x06){
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001684:	789b      	ldrb	r3, [r3, #2]
 8001686:	2b06      	cmp	r3, #6
 8001688:	d17c      	bne.n	8001784 <rx_ctrl_get+0x400>

				if((rxbuf_get_ctrl[3] & 0x80)) get->S3 = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <rx_ctrl_get+0x46c>)
 800168c:	78db      	ldrb	r3, [r3, #3]
 800168e:	b25b      	sxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	da0c      	bge.n	80016ae <rx_ctrl_get+0x32a>
 8001694:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001696:	78db      	ldrb	r3, [r3, #3]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <rx_ctrl_get+0x46c>)
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
 80016ac:	e00b      	b.n	80016c6 <rx_ctrl_get+0x342>
				else get->S3 = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 80016ae:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <rx_ctrl_get+0x46c>)
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b4e      	ldr	r3, [pc, #312]	; (80017f0 <rx_ctrl_get+0x46c>)
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21a      	sxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2

				if((rxbuf_get_ctrl[5] & 0x80)) get->S4 = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <rx_ctrl_get+0x46c>)
 80016c8:	795b      	ldrb	r3, [r3, #5]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da0c      	bge.n	80016ea <rx_ctrl_get+0x366>
 80016d0:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <rx_ctrl_get+0x46c>)
 80016d2:	795b      	ldrb	r3, [r3, #5]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b45      	ldr	r3, [pc, #276]	; (80017f0 <rx_ctrl_get+0x46c>)
 80016da:	799b      	ldrb	r3, [r3, #6]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 80016e8:	e00b      	b.n	8001702 <rx_ctrl_get+0x37e>
				else get->S4 = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <rx_ctrl_get+0x46c>)
 80016ec:	795b      	ldrb	r3, [r3, #5]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <rx_ctrl_get+0x46c>)
 80016f4:	799b      	ldrb	r3, [r3, #6]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4

				if((rxbuf_get_ctrl[7] & 0x80)) get->V3 = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001704:	79db      	ldrb	r3, [r3, #7]
 8001706:	b25b      	sxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	da0c      	bge.n	8001726 <rx_ctrl_get+0x3a2>
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <rx_ctrl_get+0x46c>)
 800170e:	79db      	ldrb	r3, [r3, #7]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21a      	sxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 8001724:	e00b      	b.n	800173e <rx_ctrl_get+0x3ba>
				else get->V3 = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001728:	79db      	ldrb	r3, [r3, #7]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21a      	sxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba

				if((rxbuf_get_ctrl[9] & 0x80)) get->V4 = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001740:	7a5b      	ldrb	r3, [r3, #9]
 8001742:	b25b      	sxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	da0c      	bge.n	8001762 <rx_ctrl_get+0x3de>
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <rx_ctrl_get+0x46c>)
 800174a:	7a5b      	ldrb	r3, [r3, #9]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b21a      	sxth	r2, r3
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001752:	7a9b      	ldrb	r3, [r3, #10]
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21a      	sxth	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 8001760:	e00b      	b.n	800177a <rx_ctrl_get+0x3f6>
				else get->V4 = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001764:	7a5b      	ldrb	r3, [r3, #9]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <rx_ctrl_get+0x46c>)
 800176c:	7a9b      	ldrb	r3, [r3, #10]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21a      	sxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc

				get->cmd = DATA;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2205      	movs	r2, #5
 800177e:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8001782:	e1ed      	b.n	8001b60 <rx_ctrl_get+0x7dc>
			}

			// Check for Odometry
			else if(rxbuf_get_ctrl[2] == 0x15){
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001786:	789b      	ldrb	r3, [r3, #2]
 8001788:	2b15      	cmp	r3, #21
 800178a:	f040 80bc 	bne.w	8001906 <rx_ctrl_get+0x582>
				if((rxbuf_get_ctrl[3] & 0x80)) get->x_pos = ((rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4])-(65536);
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <rx_ctrl_get+0x46c>)
 8001790:	78db      	ldrb	r3, [r3, #3]
 8001792:	b25b      	sxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	da0c      	bge.n	80017b2 <rx_ctrl_get+0x42e>
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <rx_ctrl_get+0x46c>)
 800179a:	78db      	ldrb	r3, [r3, #3]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <rx_ctrl_get+0x46c>)
 80017a2:	791b      	ldrb	r3, [r3, #4]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
 80017b0:	e00b      	b.n	80017ca <rx_ctrl_get+0x446>
				else get->x_pos = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4];
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <rx_ctrl_get+0x46c>)
 80017b4:	78db      	ldrb	r3, [r3, #3]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <rx_ctrl_get+0x46c>)
 80017bc:	791b      	ldrb	r3, [r3, #4]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

				if((rxbuf_get_ctrl[5] & 0x80)) get->y_pos = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <rx_ctrl_get+0x46c>)
 80017cc:	795b      	ldrb	r3, [r3, #5]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da0f      	bge.n	80017f4 <rx_ctrl_get+0x470>
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <rx_ctrl_get+0x46c>)
 80017d6:	795b      	ldrb	r3, [r3, #5]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <rx_ctrl_get+0x46c>)
 80017de:	799b      	ldrb	r3, [r3, #6]
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
 80017ec:	e00e      	b.n	800180c <rx_ctrl_get+0x488>
 80017ee:	bf00      	nop
 80017f0:	20000158 	.word	0x20000158
				else get->y_pos = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 80017f4:	4b7e      	ldr	r3, [pc, #504]	; (80019f0 <rx_ctrl_get+0x66c>)
 80017f6:	795b      	ldrb	r3, [r3, #5]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	4b7c      	ldr	r3, [pc, #496]	; (80019f0 <rx_ctrl_get+0x66c>)
 80017fe:	799b      	ldrb	r3, [r3, #6]
 8001800:	b21b      	sxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b21a      	sxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

				if((rxbuf_get_ctrl[7] & 0x80)) get->t_pos = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 800180c:	4b78      	ldr	r3, [pc, #480]	; (80019f0 <rx_ctrl_get+0x66c>)
 800180e:	79db      	ldrb	r3, [r3, #7]
 8001810:	b25b      	sxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	da0c      	bge.n	8001830 <rx_ctrl_get+0x4ac>
 8001816:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001818:	79db      	ldrb	r3, [r3, #7]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	b21a      	sxth	r2, r3
 800181e:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001820:	7a1b      	ldrb	r3, [r3, #8]
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b21a      	sxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 800182e:	e00b      	b.n	8001848 <rx_ctrl_get+0x4c4>
				else get->t_pos = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 8001830:	4b6f      	ldr	r3, [pc, #444]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001832:	79db      	ldrb	r3, [r3, #7]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <rx_ctrl_get+0x66c>)
 800183a:	7a1b      	ldrb	r3, [r3, #8]
 800183c:	b21b      	sxth	r3, r3
 800183e:	4313      	orrs	r3, r2
 8001840:	b21a      	sxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

				if((rxbuf_get_ctrl[9] & 0x80)) get->x_vel = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 8001848:	4b69      	ldr	r3, [pc, #420]	; (80019f0 <rx_ctrl_get+0x66c>)
 800184a:	7a5b      	ldrb	r3, [r3, #9]
 800184c:	b25b      	sxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	da0c      	bge.n	800186c <rx_ctrl_get+0x4e8>
 8001852:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001854:	7a5b      	ldrb	r3, [r3, #9]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <rx_ctrl_get+0x66c>)
 800185c:	7a9b      	ldrb	r3, [r3, #10]
 800185e:	b21b      	sxth	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b21a      	sxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
 800186a:	e00b      	b.n	8001884 <rx_ctrl_get+0x500>
				else get->x_vel = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 800186c:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <rx_ctrl_get+0x66c>)
 800186e:	7a5b      	ldrb	r3, [r3, #9]
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b21a      	sxth	r2, r3
 8001874:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001876:	7a9b      	ldrb	r3, [r3, #10]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21a      	sxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

				if((rxbuf_get_ctrl[11] & 0x80)) get->y_vel = ((rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12])-(65536);
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001886:	7adb      	ldrb	r3, [r3, #11]
 8001888:	b25b      	sxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	da0c      	bge.n	80018a8 <rx_ctrl_get+0x524>
 800188e:	4b58      	ldr	r3, [pc, #352]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001890:	7adb      	ldrb	r3, [r3, #11]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b21a      	sxth	r2, r3
 8001896:	4b56      	ldr	r3, [pc, #344]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001898:	7b1b      	ldrb	r3, [r3, #12]
 800189a:	b21b      	sxth	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b21a      	sxth	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
 80018a6:	e00b      	b.n	80018c0 <rx_ctrl_get+0x53c>
				else get->y_vel = (rxbuf_get_ctrl[11] << 8) | rxbuf_get_ctrl[12];
 80018a8:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <rx_ctrl_get+0x66c>)
 80018aa:	7adb      	ldrb	r3, [r3, #11]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <rx_ctrl_get+0x66c>)
 80018b2:	7b1b      	ldrb	r3, [r3, #12]
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8

				if((rxbuf_get_ctrl[13] & 0x80)) get->t_vel = ((rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14])-(65536);
 80018c0:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <rx_ctrl_get+0x66c>)
 80018c2:	7b5b      	ldrb	r3, [r3, #13]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da0c      	bge.n	80018e4 <rx_ctrl_get+0x560>
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <rx_ctrl_get+0x66c>)
 80018cc:	7b5b      	ldrb	r3, [r3, #13]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <rx_ctrl_get+0x66c>)
 80018d4:	7b9b      	ldrb	r3, [r3, #14]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	b21a      	sxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
 80018e2:	e00b      	b.n	80018fc <rx_ctrl_get+0x578>
				else get->t_vel = (rxbuf_get_ctrl[13] << 8) | rxbuf_get_ctrl[14];
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <rx_ctrl_get+0x66c>)
 80018e6:	7b5b      	ldrb	r3, [r3, #13]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <rx_ctrl_get+0x66c>)
 80018ee:	7b9b      	ldrb	r3, [r3, #14]
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa

				get->cmd = DATA;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2205      	movs	r2, #5
 8001900:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8001904:	e12c      	b.n	8001b60 <rx_ctrl_get+0x7dc>

			}

			// Check for "Move" Instruction Given from Jetson Nano
			else if(rxbuf_get_ctrl[2] == 0x12){
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001908:	789b      	ldrb	r3, [r3, #2]
 800190a:	2b12      	cmp	r3, #18
 800190c:	d172      	bne.n	80019f4 <rx_ctrl_get+0x670>

				get->id_data = (rxbuf_get_ctrl[3] << 8) | rxbuf_get_ctrl[4] ;
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001910:	78db      	ldrb	r3, [r3, #3]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	b21a      	sxth	r2, r3
 8001916:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001918:	791b      	ldrb	r3, [r3, #4]
 800191a:	b21b      	sxth	r3, r3
 800191c:	4313      	orrs	r3, r2
 800191e:	b21b      	sxth	r3, r3
 8001920:	b29a      	uxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

				if((rxbuf_get_ctrl[5] & 0x80)) get->x_data = ((rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6])-(65536);
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <rx_ctrl_get+0x66c>)
 800192a:	795b      	ldrb	r3, [r3, #5]
 800192c:	b25b      	sxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	da0c      	bge.n	800194c <rx_ctrl_get+0x5c8>
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001934:	795b      	ldrb	r3, [r3, #5]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <rx_ctrl_get+0x66c>)
 800193c:	799b      	ldrb	r3, [r3, #6]
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21a      	sxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 800194a:	e00b      	b.n	8001964 <rx_ctrl_get+0x5e0>
				else get->x_data = (rxbuf_get_ctrl[5] << 8) | rxbuf_get_ctrl[6];
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <rx_ctrl_get+0x66c>)
 800194e:	795b      	ldrb	r3, [r3, #5]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21a      	sxth	r2, r3
 8001954:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001956:	799b      	ldrb	r3, [r3, #6]
 8001958:	b21b      	sxth	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b21a      	sxth	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198

				if((rxbuf_get_ctrl[7] & 0x80)) get->y_data = ((rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8])-(65536);
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001966:	79db      	ldrb	r3, [r3, #7]
 8001968:	b25b      	sxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	da0c      	bge.n	8001988 <rx_ctrl_get+0x604>
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001970:	79db      	ldrb	r3, [r3, #7]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	b21a      	sxth	r2, r3
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001978:	7a1b      	ldrb	r3, [r3, #8]
 800197a:	b21b      	sxth	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b21a      	sxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
 8001986:	e00b      	b.n	80019a0 <rx_ctrl_get+0x61c>
				else get->y_data = (rxbuf_get_ctrl[7] << 8) | rxbuf_get_ctrl[8];
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <rx_ctrl_get+0x66c>)
 800198a:	79db      	ldrb	r3, [r3, #7]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21a      	sxth	r2, r3
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <rx_ctrl_get+0x66c>)
 8001992:	7a1b      	ldrb	r3, [r3, #8]
 8001994:	b21b      	sxth	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b21a      	sxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

				if((rxbuf_get_ctrl[9] & 0x80)) get->t_data = ((rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10])-(65536);
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <rx_ctrl_get+0x66c>)
 80019a2:	7a5b      	ldrb	r3, [r3, #9]
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da0c      	bge.n	80019c4 <rx_ctrl_get+0x640>
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <rx_ctrl_get+0x66c>)
 80019ac:	7a5b      	ldrb	r3, [r3, #9]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <rx_ctrl_get+0x66c>)
 80019b4:	7a9b      	ldrb	r3, [r3, #10]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 80019c2:	e00b      	b.n	80019dc <rx_ctrl_get+0x658>
				else get->t_data = (rxbuf_get_ctrl[9] << 8) | rxbuf_get_ctrl[10];
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <rx_ctrl_get+0x66c>)
 80019c6:	7a5b      	ldrb	r3, [r3, #9]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <rx_ctrl_get+0x66c>)
 80019ce:	7a9b      	ldrb	r3, [r3, #10]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

				get->aktuator = rxbuf_get_ctrl[11] ;
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <rx_ctrl_get+0x66c>)
 80019de:	7ada      	ldrb	r2, [r3, #11]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e

				get->cmd = MOVE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2203      	movs	r2, #3
 80019ea:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 80019ee:	e0b7      	b.n	8001b60 <rx_ctrl_get+0x7dc>
 80019f0:	20000158 	.word	0x20000158

			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_ctrl[2] == 0x13){
 80019f4:	4b60      	ldr	r3, [pc, #384]	; (8001b78 <rx_ctrl_get+0x7f4>)
 80019f6:	789b      	ldrb	r3, [r3, #2]
 80019f8:	2b13      	cmp	r3, #19
 80019fa:	f040 80b1 	bne.w	8001b60 <rx_ctrl_get+0x7dc>
				uint8_t chk = checksum_ctrl_generator(rxbuf_get_ctrl,18);
 80019fe:	2112      	movs	r1, #18
 8001a00:	485d      	ldr	r0, [pc, #372]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a02:	f7ff fbcf 	bl	80011a4 <checksum_ctrl_generator>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]
				if(chk == rxbuf_get_ctrl[18]){
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a0c:	7c9b      	ldrb	r3, [r3, #18]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 80a5 	bne.w	8001b60 <rx_ctrl_get+0x7dc>
				get->astar_id = (rxbuf_get_ctrl[3]);
 8001a16:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a18:	78da      	ldrb	r2, [r3, #3]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
				get->astar_length = (rxbuf_get_ctrl[4]);
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a22:	791a      	ldrb	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+0] = (rxbuf_get_ctrl[5]);
 8001a2a:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a2c:	7959      	ldrb	r1, [r3, #5]
 8001a2e:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a30:	78db      	ldrb	r3, [r3, #3]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	441a      	add	r2, r3
 8001a3a:	b209      	sxth	r1, r1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+0] = (rxbuf_get_ctrl[6]);
 8001a42:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a44:	7999      	ldrb	r1, [r3, #6]
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a48:	78db      	ldrb	r3, [r3, #3]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	441a      	add	r2, r3
 8001a52:	b209      	sxth	r1, r1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3264      	adds	r2, #100	; 0x64
 8001a58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+1] = (rxbuf_get_ctrl[7]);
 8001a5c:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a5e:	79d9      	ldrb	r1, [r3, #7]
 8001a60:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a62:	78db      	ldrb	r3, [r3, #3]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	b209      	sxth	r1, r1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+1] = (rxbuf_get_ctrl[8]);
 8001a76:	4b40      	ldr	r3, [pc, #256]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a78:	7a19      	ldrb	r1, [r3, #8]
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	b209      	sxth	r1, r1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3264      	adds	r2, #100	; 0x64
 8001a8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+2] = (rxbuf_get_ctrl[9]);
 8001a92:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a94:	7a59      	ldrb	r1, [r3, #9]
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001a98:	78db      	ldrb	r3, [r3, #3]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	1c9a      	adds	r2, r3, #2
 8001aa4:	b209      	sxth	r1, r1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+2] = (rxbuf_get_ctrl[10]);
 8001aac:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001aae:	7a99      	ldrb	r1, [r3, #10]
 8001ab0:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001ab2:	78db      	ldrb	r3, [r3, #3]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	1c9a      	adds	r2, r3, #2
 8001abe:	b209      	sxth	r1, r1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3264      	adds	r2, #100	; 0x64
 8001ac4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+3] = (rxbuf_get_ctrl[11]);
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001aca:	7ad9      	ldrb	r1, [r3, #11]
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001ace:	78db      	ldrb	r3, [r3, #3]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	b209      	sxth	r1, r1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+3] = (rxbuf_get_ctrl[12]);
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001ae4:	7b19      	ldrb	r1, [r3, #12]
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001ae8:	78db      	ldrb	r3, [r3, #3]
 8001aea:	461a      	mov	r2, r3
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	1cda      	adds	r2, r3, #3
 8001af4:	b209      	sxth	r1, r1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3264      	adds	r2, #100	; 0x64
 8001afa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_x[rxbuf_get_ctrl[3]*5+4] = (rxbuf_get_ctrl[13]);
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001b00:	7b59      	ldrb	r1, [r3, #13]
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001b04:	78db      	ldrb	r3, [r3, #3]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	b209      	sxth	r1, r1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_coordinate_y[rxbuf_get_ctrl[3]*5+4] = (rxbuf_get_ctrl[14]);
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001b1a:	7b99      	ldrb	r1, [r3, #14]
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001b1e:	78db      	ldrb	r3, [r3, #3]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	1d1a      	adds	r2, r3, #4
 8001b2a:	b209      	sxth	r1, r1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3264      	adds	r2, #100	; 0x64
 8001b30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				get->astar_total_length = (rxbuf_get_ctrl[15] << 8) | rxbuf_get_ctrl[16];
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001b36:	7bdb      	ldrb	r3, [r3, #15]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001b3e:	7c1b      	ldrb	r3, [r3, #16]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
				get->astar_msg_id = rxbuf_get_ctrl[17];
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001b50:	7c5a      	ldrb	r2, [r3, #17]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
				get->cmd = MOVE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
				}

			}

		}
	HAL_UART_Receive_DMA(huart_ctrl, rxbuf_get_ctrl, 19);
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <rx_ctrl_get+0x7f8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2213      	movs	r2, #19
 8001b66:	4904      	ldr	r1, [pc, #16]	; (8001b78 <rx_ctrl_get+0x7f4>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 fb92 	bl	8006292 <HAL_UART_Receive_DMA>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000158 	.word	0x20000158
 8001b7c:	20000154 	.word	0x20000154

08001b80 <komunikasi_pc_init>:
//**************************************************** COMMUNICATION TO JETSON NANO *******************************************//

void komunikasi_pc_init(UART_HandleTypeDef* uart_handler){
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	huart_pc = uart_handler;
 8001b88:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <komunikasi_pc_init+0x1c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000013c 	.word	0x2000013c

08001ba0 <checksum_pc_generator>:

uint8_t checksum_pc_generator(uint8_t* arr, uint8_t size){
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
	uint8_t chksm = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < size; i++) chksm += arr[i];
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73bb      	strb	r3, [r7, #14]
 8001bb4:	e009      	b.n	8001bca <checksum_pc_generator+0x2a>
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	73bb      	strb	r3, [r7, #14]
 8001bca:	7bba      	ldrb	r2, [r7, #14]
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d3f1      	bcc.n	8001bb6 <checksum_pc_generator+0x16>
	return (chksm & 0xFF);
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <tx_pc_send_BNO08X>:
	if(HAL_UART_Transmit(huart_pc, ping, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

//---------------------------------------------------- Send Roll Pitch & Yaw from BNO08X Sensor -------------------------------------------------------------------------//
bool tx_pc_send_BNO08X(BNO08X_Typedef BNO08x){
 8001be0:	b084      	sub	sp, #16
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	f107 0c20 	add.w	ip, r7, #32
 8001bec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t BNO[] = {0xA5, 0x5A, 0x02, ((BNO08x.yaw >> 8) & 0XFF), ((BNO08x.yaw) & 0XFF), ((BNO08x.pitch >> 8) & 0XFF), ((BNO08x.pitch) & 0XFF), ((BNO08x.roll >> 8) & 0XFF), ((BNO08x.roll) & 0XFF), ((BNO08x.x_acceleration >> 8) & 0XFF), ((BNO08x.x_acceleration) & 0XFF), ((BNO08x.y_acceleration >> 8) & 0XFF), ((BNO08x.y_acceleration) & 0XFF), ((BNO08x.z_acceleration >> 8) & 0XFF), ((BNO08x.z_acceleration) & 0XFF), 0x00, 0x00, 0x00, 0x00};
 8001bf0:	23a5      	movs	r3, #165	; 0xa5
 8001bf2:	713b      	strb	r3, [r7, #4]
 8001bf4:	235a      	movs	r3, #90	; 0x5a
 8001bf6:	717b      	strb	r3, [r7, #5]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	71bb      	strb	r3, [r7, #6]
 8001bfc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c00:	121b      	asrs	r3, r3, #8
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	723b      	strb	r3, [r7, #8]
 8001c10:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001c14:	121b      	asrs	r3, r3, #8
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	727b      	strb	r3, [r7, #9]
 8001c1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	72bb      	strb	r3, [r7, #10]
 8001c24:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c28:	121b      	asrs	r3, r3, #8
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	72fb      	strb	r3, [r7, #11]
 8001c30:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	733b      	strb	r3, [r7, #12]
 8001c38:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c3c:	121b      	asrs	r3, r3, #8
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	737b      	strb	r3, [r7, #13]
 8001c44:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	73bb      	strb	r3, [r7, #14]
 8001c4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c50:	121b      	asrs	r3, r3, #8
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	743b      	strb	r3, [r7, #16]
 8001c60:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001c64:	121b      	asrs	r3, r3, #8
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	747b      	strb	r3, [r7, #17]
 8001c6c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	74bb      	strb	r3, [r7, #18]
 8001c74:	2300      	movs	r3, #0
 8001c76:	74fb      	strb	r3, [r7, #19]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	753b      	strb	r3, [r7, #20]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	757b      	strb	r3, [r7, #21]
 8001c80:	2300      	movs	r3, #0
 8001c82:	75bb      	strb	r3, [r7, #22]
	BNO[18] = checksum_pc_generator(BNO, 19);
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2113      	movs	r1, #19
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff89 	bl	8001ba0 <checksum_pc_generator>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	75bb      	strb	r3, [r7, #22]

	if(HAL_UART_Transmit(huart_pc, BNO, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <tx_pc_send_BNO08X+0xdc>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	1d39      	adds	r1, r7, #4
 8001c98:	2364      	movs	r3, #100	; 0x64
 8001c9a:	2213      	movs	r2, #19
 8001c9c:	f004 fa6e 	bl	800617c <HAL_UART_Transmit>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <tx_pc_send_BNO08X+0xca>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <tx_pc_send_BNO08X+0xcc>
	else return false;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cb6:	b004      	add	sp, #16
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	2000013c 	.word	0x2000013c

08001cc0 <tx_pc_send_Sensor>:
	if(HAL_UART_Transmit(huart_pc, task_done, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}

//---------------------------------------------------- Send Package Sensor Data -----------------------------------------------------------------------------------------//
bool tx_pc_send_Sensor(sensor_package_t Sensor){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t sensor[] = {0xA5, 0x5A, 0x04, ((Sensor.temperature >> 8) & 0XFF), ((Sensor.temperature) & 0XFF), ((Sensor.humidity >> 8) & 0XFF), ((Sensor.humidity) & 0XFF), ((Sensor.current >> 8) & 0XFF), ((Sensor.current) & 0XFF), ((Sensor.voltage >> 8) & 0XFF), ((Sensor.voltage) & 0XFF), ((Sensor.loadcell >> 8) & 0XFF), ((Sensor.loadcell) & 0XFF), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001ccc:	23a5      	movs	r3, #165	; 0xa5
 8001cce:	753b      	strb	r3, [r7, #20]
 8001cd0:	235a      	movs	r3, #90	; 0x5a
 8001cd2:	757b      	strb	r3, [r7, #21]
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	75bb      	strb	r3, [r7, #22]
 8001cd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cdc:	121b      	asrs	r3, r3, #8
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	75fb      	strb	r3, [r7, #23]
 8001ce4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	763b      	strb	r3, [r7, #24]
 8001cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf0:	121b      	asrs	r3, r3, #8
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	767b      	strb	r3, [r7, #25]
 8001cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	76bb      	strb	r3, [r7, #26]
 8001d00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d04:	121b      	asrs	r3, r3, #8
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	76fb      	strb	r3, [r7, #27]
 8001d0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	773b      	strb	r3, [r7, #28]
 8001d14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d18:	121b      	asrs	r3, r3, #8
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	777b      	strb	r3, [r7, #29]
 8001d20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	77bb      	strb	r3, [r7, #30]
 8001d28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d2c:	121b      	asrs	r3, r3, #8
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	77fb      	strb	r3, [r7, #31]
 8001d34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f887 3020 	strb.w	r3, [r7, #32]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	sensor[18] = checksum_pc_generator(sensor, 19);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2113      	movs	r1, #19
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff19 	bl	8001ba0 <checksum_pc_generator>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	if(HAL_UART_Transmit(huart_pc, sensor, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <tx_pc_send_Sensor+0xd8>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f107 0114 	add.w	r1, r7, #20
 8001d7c:	2364      	movs	r3, #100	; 0x64
 8001d7e:	2213      	movs	r2, #19
 8001d80:	f004 f9fc 	bl	800617c <HAL_UART_Transmit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <tx_pc_send_Sensor+0xce>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <tx_pc_send_Sensor+0xd0>
	else return false;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000013c 	.word	0x2000013c

08001d9c <tx_pc_send_Odometry>:
	encoder_data[18] = checksum_pc_generator(encoder_data, 19);

	if(HAL_UART_Transmit(huart_pc, encoder_data, 19, TIMEOUT_SEND) == HAL_OK) return true;
	else return false;
}
bool tx_pc_send_Odometry(int16_t Sx, int16_t Sy, int16_t St, int16_t Vx, int16_t Vy, int16_t Vt){
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t odometry[] = {0xA5, 0x5A, 0x15, ((Sx >> 8) & 0XFF), ((Sx) & 0XFF), ((Sy >> 8) & 0XFF), ((Sy) & 0XFF), ((St >> 8) & 0XFF), ((St) & 0XFF), ((Vx >> 8) & 0XFF), ((Vx) & 0XFF), ((Vy >> 8) & 0XFF), ((Vy) & 0XFF), ((Vt >> 8) & 0XFF), ((Vt) & 0XFF), 0x00, 0x00, 0x00, 0x00};
 8001dba:	23a5      	movs	r3, #165	; 0xa5
 8001dbc:	733b      	strb	r3, [r7, #12]
 8001dbe:	235a      	movs	r3, #90	; 0x5a
 8001dc0:	737b      	strb	r3, [r7, #13]
 8001dc2:	2315      	movs	r3, #21
 8001dc4:	73bb      	strb	r3, [r7, #14]
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	121b      	asrs	r3, r3, #8
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	743b      	strb	r3, [r7, #16]
 8001dd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ddc:	121b      	asrs	r3, r3, #8
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	747b      	strb	r3, [r7, #17]
 8001de4:	88bb      	ldrh	r3, [r7, #4]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	74bb      	strb	r3, [r7, #18]
 8001dea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001dee:	121b      	asrs	r3, r3, #8
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	74fb      	strb	r3, [r7, #19]
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	753b      	strb	r3, [r7, #20]
 8001dfc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e00:	121b      	asrs	r3, r3, #8
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	757b      	strb	r3, [r7, #21]
 8001e08:	883b      	ldrh	r3, [r7, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	75bb      	strb	r3, [r7, #22]
 8001e0e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001e12:	121b      	asrs	r3, r3, #8
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	75fb      	strb	r3, [r7, #23]
 8001e1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	763b      	strb	r3, [r7, #24]
 8001e20:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001e24:	121b      	asrs	r3, r3, #8
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	767b      	strb	r3, [r7, #25]
 8001e2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	76bb      	strb	r3, [r7, #26]
 8001e32:	2300      	movs	r3, #0
 8001e34:	76fb      	strb	r3, [r7, #27]
 8001e36:	2300      	movs	r3, #0
 8001e38:	773b      	strb	r3, [r7, #28]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	777b      	strb	r3, [r7, #29]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	77bb      	strb	r3, [r7, #30]
	odometry[18] = checksum_pc_generator(odometry, 19);
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	2113      	movs	r1, #19
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fea9 	bl	8001ba0 <checksum_pc_generator>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	77bb      	strb	r3, [r7, #30]

	if(HAL_UART_Transmit(huart_pc, odometry, 19, TIMEOUT_SEND) == HAL_OK) return true;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <tx_pc_send_Odometry+0xdc>)
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	f107 010c 	add.w	r1, r7, #12
 8001e5a:	2364      	movs	r3, #100	; 0x64
 8001e5c:	2213      	movs	r2, #19
 8001e5e:	f004 f98d 	bl	800617c <HAL_UART_Transmit>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <tx_pc_send_Odometry+0xd0>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <tx_pc_send_Odometry+0xd2>
	else return false;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000013c 	.word	0x2000013c

08001e7c <rx_pc_start_get>:

void rx_pc_start_get(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart_pc,rxbuf_get_pc, 19);
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <rx_pc_start_get+0x18>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2213      	movs	r2, #19
 8001e86:	4904      	ldr	r1, [pc, #16]	; (8001e98 <rx_pc_start_get+0x1c>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f004 fa02 	bl	8006292 <HAL_UART_Receive_DMA>
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000013c 	.word	0x2000013c
 8001e98:	20000140 	.word	0x20000140

08001e9c <rx_pc_get>:

void rx_pc_get(com_pc_get_t* get){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 19; i++){
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	f000 bc68 	b.w	800277c <rx_pc_get+0x8e0>
		if((rxbuf_get_pc[i] == 0xA5) && (rxbuf_get_pc[i+1] == 0x5A)){
 8001eac:	4a89      	ldr	r2, [pc, #548]	; (80020d4 <rx_pc_get+0x238>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2ba5      	cmp	r3, #165	; 0xa5
 8001eb6:	f040 845e 	bne.w	8002776 <rx_pc_get+0x8da>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a85      	ldr	r2, [pc, #532]	; (80020d4 <rx_pc_get+0x238>)
 8001ec0:	5cd3      	ldrb	r3, [r2, r3]
 8001ec2:	2b5a      	cmp	r3, #90	; 0x5a
 8001ec4:	f040 8457 	bne.w	8002776 <rx_pc_get+0x8da>

			// Check for ping
			if(rxbuf_get_pc[2] == 0x01){
 8001ec8:	4b82      	ldr	r3, [pc, #520]	; (80020d4 <rx_pc_get+0x238>)
 8001eca:	789b      	ldrb	r3, [r3, #2]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d103      	bne.n	8001ed8 <rx_pc_get+0x3c>
				get->cmd = PING;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
			}

			// Check for Task Done
			if(rxbuf_get_pc[2] == 0x03){
 8001ed8:	4b7e      	ldr	r3, [pc, #504]	; (80020d4 <rx_pc_get+0x238>)
 8001eda:	789b      	ldrb	r3, [r3, #2]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d12d      	bne.n	8001f3c <rx_pc_get+0xa0>
				if((rxbuf_get_pc[i+3] & 0x80)) get->step = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	3303      	adds	r3, #3
 8001ee4:	4a7b      	ldr	r2, [pc, #492]	; (80020d4 <rx_pc_get+0x238>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da10      	bge.n	8001f10 <rx_pc_get+0x74>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	4a78      	ldr	r2, [pc, #480]	; (80020d4 <rx_pc_get+0x238>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3304      	adds	r3, #4
 8001efe:	4975      	ldr	r1, [pc, #468]	; (80020d4 <rx_pc_get+0x238>)
 8001f00:	5ccb      	ldrb	r3, [r1, r3]
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 8001f0e:	e00f      	b.n	8001f30 <rx_pc_get+0x94>
				else get->step = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3303      	adds	r3, #3
 8001f14:	4a6f      	ldr	r2, [pc, #444]	; (80020d4 <rx_pc_get+0x238>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	496c      	ldr	r1, [pc, #432]	; (80020d4 <rx_pc_get+0x238>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
				get->cmd = DATA;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2205      	movs	r2, #5
 8001f34:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8001f38:	f000 bc1d 	b.w	8002776 <rx_pc_get+0x8da>
			}

			// Check for Kinematic
			else if(rxbuf_get_pc[i+2] == 0x05){
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3302      	adds	r3, #2
 8001f40:	4a64      	ldr	r2, [pc, #400]	; (80020d4 <rx_pc_get+0x238>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	f040 80a5 	bne.w	8002094 <rx_pc_get+0x1f8>

				if((rxbuf_get_pc[i+3] & 0x80)) get->Sx = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	4a61      	ldr	r2, [pc, #388]	; (80020d4 <rx_pc_get+0x238>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	b25b      	sxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da10      	bge.n	8001f7a <rx_pc_get+0xde>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3303      	adds	r3, #3
 8001f5c:	4a5d      	ldr	r2, [pc, #372]	; (80020d4 <rx_pc_get+0x238>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3304      	adds	r3, #4
 8001f68:	495a      	ldr	r1, [pc, #360]	; (80020d4 <rx_pc_get+0x238>)
 8001f6a:	5ccb      	ldrb	r3, [r1, r3]
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
 8001f78:	e00f      	b.n	8001f9a <rx_pc_get+0xfe>
				else get->Sx = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3303      	adds	r3, #3
 8001f7e:	4a55      	ldr	r2, [pc, #340]	; (80020d4 <rx_pc_get+0x238>)
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	4952      	ldr	r1, [pc, #328]	; (80020d4 <rx_pc_get+0x238>)
 8001f8c:	5ccb      	ldrb	r3, [r1, r3]
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be

				if((rxbuf_get_pc[i+5] & 0x80)) get->Sy = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3305      	adds	r3, #5
 8001f9e:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <rx_pc_get+0x238>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	b25b      	sxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	da10      	bge.n	8001fca <rx_pc_get+0x12e>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3305      	adds	r3, #5
 8001fac:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <rx_pc_get+0x238>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3306      	adds	r3, #6
 8001fb8:	4946      	ldr	r1, [pc, #280]	; (80020d4 <rx_pc_get+0x238>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
 8001fc8:	e00f      	b.n	8001fea <rx_pc_get+0x14e>
				else get->Sy = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3305      	adds	r3, #5
 8001fce:	4a41      	ldr	r2, [pc, #260]	; (80020d4 <rx_pc_get+0x238>)
 8001fd0:	5cd3      	ldrb	r3, [r2, r3]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3306      	adds	r3, #6
 8001fda:	493e      	ldr	r1, [pc, #248]	; (80020d4 <rx_pc_get+0x238>)
 8001fdc:	5ccb      	ldrb	r3, [r1, r3]
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

				if((rxbuf_get_pc[i+7] & 0x80)) get->St = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3307      	adds	r3, #7
 8001fee:	4a39      	ldr	r2, [pc, #228]	; (80020d4 <rx_pc_get+0x238>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da10      	bge.n	800201a <rx_pc_get+0x17e>
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3307      	adds	r3, #7
 8001ffc:	4a35      	ldr	r2, [pc, #212]	; (80020d4 <rx_pc_get+0x238>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b21a      	sxth	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3308      	adds	r3, #8
 8002008:	4932      	ldr	r1, [pc, #200]	; (80020d4 <rx_pc_get+0x238>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21a      	sxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
 8002018:	e00f      	b.n	800203a <rx_pc_get+0x19e>
				else get->St = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3307      	adds	r3, #7
 800201e:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <rx_pc_get+0x238>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b21a      	sxth	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3308      	adds	r3, #8
 800202a:	492a      	ldr	r1, [pc, #168]	; (80020d4 <rx_pc_get+0x238>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	b21b      	sxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b21a      	sxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2

				if((rxbuf_get_pc[i+9] & 0x80)) get->T = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3309      	adds	r3, #9
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <rx_pc_get+0x238>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	b25b      	sxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	da10      	bge.n	800206a <rx_pc_get+0x1ce>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3309      	adds	r3, #9
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <rx_pc_get+0x238>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	b21a      	sxth	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	330a      	adds	r3, #10
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <rx_pc_get+0x238>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	b21b      	sxth	r3, r3
 800205e:	4313      	orrs	r3, r2
 8002060:	b21a      	sxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
 8002068:	e00f      	b.n	800208a <rx_pc_get+0x1ee>
				else get->T = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3309      	adds	r3, #9
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <rx_pc_get+0x238>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	b21a      	sxth	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	330a      	adds	r3, #10
 800207a:	4916      	ldr	r1, [pc, #88]	; (80020d4 <rx_pc_get+0x238>)
 800207c:	5ccb      	ldrb	r3, [r1, r3]
 800207e:	b21b      	sxth	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b21a      	sxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4

				get->cmd = DATA;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2205      	movs	r2, #5
 800208e:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8002092:	e370      	b.n	8002776 <rx_pc_get+0x8da>

			}

			// Check for Encoder
			else if(rxbuf_get_pc[i+2] == 0x06){
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3302      	adds	r3, #2
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <rx_pc_get+0x238>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	2b06      	cmp	r3, #6
 800209e:	f040 80a8 	bne.w	80021f2 <rx_pc_get+0x356>

				if((rxbuf_get_pc[i+3] & 0x80)) get->S3 = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3303      	adds	r3, #3
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <rx_pc_get+0x238>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da13      	bge.n	80020d8 <rx_pc_get+0x23c>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3303      	adds	r3, #3
 80020b4:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <rx_pc_get+0x238>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3304      	adds	r3, #4
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <rx_pc_get+0x238>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
 80020d0:	e012      	b.n	80020f8 <rx_pc_get+0x25c>
 80020d2:	bf00      	nop
 80020d4:	20000140 	.word	0x20000140
				else get->S3 = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3303      	adds	r3, #3
 80020dc:	4a90      	ldr	r2, [pc, #576]	; (8002320 <rx_pc_get+0x484>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3304      	adds	r3, #4
 80020e8:	498d      	ldr	r1, [pc, #564]	; (8002320 <rx_pc_get+0x484>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2

				if((rxbuf_get_pc[i+5] & 0x80)) get->S4 = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3305      	adds	r3, #5
 80020fc:	4a88      	ldr	r2, [pc, #544]	; (8002320 <rx_pc_get+0x484>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	da10      	bge.n	8002128 <rx_pc_get+0x28c>
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3305      	adds	r3, #5
 800210a:	4a85      	ldr	r2, [pc, #532]	; (8002320 <rx_pc_get+0x484>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	b21a      	sxth	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3306      	adds	r3, #6
 8002116:	4982      	ldr	r1, [pc, #520]	; (8002320 <rx_pc_get+0x484>)
 8002118:	5ccb      	ldrb	r3, [r1, r3]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21a      	sxth	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 8002126:	e00f      	b.n	8002148 <rx_pc_get+0x2ac>
				else get->S4 = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3305      	adds	r3, #5
 800212c:	4a7c      	ldr	r2, [pc, #496]	; (8002320 <rx_pc_get+0x484>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21a      	sxth	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3306      	adds	r3, #6
 8002138:	4979      	ldr	r1, [pc, #484]	; (8002320 <rx_pc_get+0x484>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4

				if((rxbuf_get_pc[i+7] & 0x80)) get->V3 = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3307      	adds	r3, #7
 800214c:	4a74      	ldr	r2, [pc, #464]	; (8002320 <rx_pc_get+0x484>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	b25b      	sxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	da10      	bge.n	8002178 <rx_pc_get+0x2dc>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3307      	adds	r3, #7
 800215a:	4a71      	ldr	r2, [pc, #452]	; (8002320 <rx_pc_get+0x484>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b21a      	sxth	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3308      	adds	r3, #8
 8002166:	496e      	ldr	r1, [pc, #440]	; (8002320 <rx_pc_get+0x484>)
 8002168:	5ccb      	ldrb	r3, [r1, r3]
 800216a:	b21b      	sxth	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	b21a      	sxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
 8002176:	e00f      	b.n	8002198 <rx_pc_get+0x2fc>
				else get->V3 = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3307      	adds	r3, #7
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <rx_pc_get+0x484>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3308      	adds	r3, #8
 8002188:	4965      	ldr	r1, [pc, #404]	; (8002320 <rx_pc_get+0x484>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba

				if((rxbuf_get_pc[i+9] & 0x80)) get->V4 = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3309      	adds	r3, #9
 800219c:	4a60      	ldr	r2, [pc, #384]	; (8002320 <rx_pc_get+0x484>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da10      	bge.n	80021c8 <rx_pc_get+0x32c>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3309      	adds	r3, #9
 80021aa:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <rx_pc_get+0x484>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	330a      	adds	r3, #10
 80021b6:	495a      	ldr	r1, [pc, #360]	; (8002320 <rx_pc_get+0x484>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	b21a      	sxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
 80021c6:	e00f      	b.n	80021e8 <rx_pc_get+0x34c>
				else get->V4 = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3309      	adds	r3, #9
 80021cc:	4a54      	ldr	r2, [pc, #336]	; (8002320 <rx_pc_get+0x484>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	330a      	adds	r3, #10
 80021d8:	4951      	ldr	r1, [pc, #324]	; (8002320 <rx_pc_get+0x484>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc

				get->cmd = DATA;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2205      	movs	r2, #5
 80021ec:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 80021f0:	e2c1      	b.n	8002776 <rx_pc_get+0x8da>
			}

			// Check for Data Odometry
			else if(rxbuf_get_pc[i+2] == 0x15){
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3302      	adds	r3, #2
 80021f6:	4a4a      	ldr	r2, [pc, #296]	; (8002320 <rx_pc_get+0x484>)
 80021f8:	5cd3      	ldrb	r3, [r2, r3]
 80021fa:	2b15      	cmp	r3, #21
 80021fc:	f040 80f7 	bne.w	80023ee <rx_pc_get+0x552>

				if((rxbuf_get_pc[i+3] & 0x80)) get->x_pos = ((rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4])-(65536);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3303      	adds	r3, #3
 8002204:	4a46      	ldr	r2, [pc, #280]	; (8002320 <rx_pc_get+0x484>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	da10      	bge.n	8002230 <rx_pc_get+0x394>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3303      	adds	r3, #3
 8002212:	4a43      	ldr	r2, [pc, #268]	; (8002320 <rx_pc_get+0x484>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	b21a      	sxth	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3304      	adds	r3, #4
 800221e:	4940      	ldr	r1, [pc, #256]	; (8002320 <rx_pc_get+0x484>)
 8002220:	5ccb      	ldrb	r3, [r1, r3]
 8002222:	b21b      	sxth	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b21a      	sxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
 800222e:	e00f      	b.n	8002250 <rx_pc_get+0x3b4>
				else get->x_pos = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3303      	adds	r3, #3
 8002234:	4a3a      	ldr	r2, [pc, #232]	; (8002320 <rx_pc_get+0x484>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3304      	adds	r3, #4
 8002240:	4937      	ldr	r1, [pc, #220]	; (8002320 <rx_pc_get+0x484>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	b21b      	sxth	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b21a      	sxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

				if((rxbuf_get_pc[i+5] & 0x80)) get->y_pos = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3305      	adds	r3, #5
 8002254:	4a32      	ldr	r2, [pc, #200]	; (8002320 <rx_pc_get+0x484>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	b25b      	sxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	da10      	bge.n	8002280 <rx_pc_get+0x3e4>
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	3305      	adds	r3, #5
 8002262:	4a2f      	ldr	r2, [pc, #188]	; (8002320 <rx_pc_get+0x484>)
 8002264:	5cd3      	ldrb	r3, [r2, r3]
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	b21a      	sxth	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3306      	adds	r3, #6
 800226e:	492c      	ldr	r1, [pc, #176]	; (8002320 <rx_pc_get+0x484>)
 8002270:	5ccb      	ldrb	r3, [r1, r3]
 8002272:	b21b      	sxth	r3, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	b21a      	sxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
 800227e:	e00f      	b.n	80022a0 <rx_pc_get+0x404>
				else get->y_pos = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3305      	adds	r3, #5
 8002284:	4a26      	ldr	r2, [pc, #152]	; (8002320 <rx_pc_get+0x484>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3306      	adds	r3, #6
 8002290:	4923      	ldr	r1, [pc, #140]	; (8002320 <rx_pc_get+0x484>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21a      	sxth	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

				if((rxbuf_get_pc[i+7] & 0x80)) get->t_pos = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3307      	adds	r3, #7
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <rx_pc_get+0x484>)
 80022a6:	5cd3      	ldrb	r3, [r2, r3]
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da10      	bge.n	80022d0 <rx_pc_get+0x434>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3307      	adds	r3, #7
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <rx_pc_get+0x484>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3308      	adds	r3, #8
 80022be:	4918      	ldr	r1, [pc, #96]	; (8002320 <rx_pc_get+0x484>)
 80022c0:	5ccb      	ldrb	r3, [r1, r3]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 80022ce:	e00f      	b.n	80022f0 <rx_pc_get+0x454>
				else get->t_pos = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3307      	adds	r3, #7
 80022d4:	4a12      	ldr	r2, [pc, #72]	; (8002320 <rx_pc_get+0x484>)
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3308      	adds	r3, #8
 80022e0:	490f      	ldr	r1, [pc, #60]	; (8002320 <rx_pc_get+0x484>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4

				if((rxbuf_get_pc[i+9] & 0x80)) get->x_vel = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3309      	adds	r3, #9
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <rx_pc_get+0x484>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da12      	bge.n	8002324 <rx_pc_get+0x488>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3309      	adds	r3, #9
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <rx_pc_get+0x484>)
 8002304:	5cd3      	ldrb	r3, [r2, r3]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	b21a      	sxth	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	330a      	adds	r3, #10
 800230e:	4904      	ldr	r1, [pc, #16]	; (8002320 <rx_pc_get+0x484>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	b21b      	sxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	b21a      	sxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
 800231e:	e011      	b.n	8002344 <rx_pc_get+0x4a8>
 8002320:	20000140 	.word	0x20000140
				else get->x_vel = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3309      	adds	r3, #9
 8002328:	4a92      	ldr	r2, [pc, #584]	; (8002574 <rx_pc_get+0x6d8>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b21a      	sxth	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	330a      	adds	r3, #10
 8002334:	498f      	ldr	r1, [pc, #572]	; (8002574 <rx_pc_get+0x6d8>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	b21b      	sxth	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b21a      	sxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

				if((rxbuf_get_pc[i+11] & 0x80)) get->y_vel = ((rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12])-(65536);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	330b      	adds	r3, #11
 8002348:	4a8a      	ldr	r2, [pc, #552]	; (8002574 <rx_pc_get+0x6d8>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	b25b      	sxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	da10      	bge.n	8002374 <rx_pc_get+0x4d8>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	330b      	adds	r3, #11
 8002356:	4a87      	ldr	r2, [pc, #540]	; (8002574 <rx_pc_get+0x6d8>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b21a      	sxth	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	330c      	adds	r3, #12
 8002362:	4984      	ldr	r1, [pc, #528]	; (8002574 <rx_pc_get+0x6d8>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	b21b      	sxth	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b21a      	sxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
 8002372:	e00f      	b.n	8002394 <rx_pc_get+0x4f8>
				else get->y_vel = (rxbuf_get_pc[i+11] << 8) | rxbuf_get_pc[i+12];
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	330b      	adds	r3, #11
 8002378:	4a7e      	ldr	r2, [pc, #504]	; (8002574 <rx_pc_get+0x6d8>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21a      	sxth	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	330c      	adds	r3, #12
 8002384:	497b      	ldr	r1, [pc, #492]	; (8002574 <rx_pc_get+0x6d8>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	b21a      	sxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8

				if((rxbuf_get_pc[i+13] & 0x80)) get->t_vel = ((rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14])-(65536);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	330d      	adds	r3, #13
 8002398:	4a76      	ldr	r2, [pc, #472]	; (8002574 <rx_pc_get+0x6d8>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	b25b      	sxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	da10      	bge.n	80023c4 <rx_pc_get+0x528>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	330d      	adds	r3, #13
 80023a6:	4a73      	ldr	r2, [pc, #460]	; (8002574 <rx_pc_get+0x6d8>)
 80023a8:	5cd3      	ldrb	r3, [r2, r3]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	b21a      	sxth	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	330e      	adds	r3, #14
 80023b2:	4970      	ldr	r1, [pc, #448]	; (8002574 <rx_pc_get+0x6d8>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	4313      	orrs	r3, r2
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
 80023c2:	e00f      	b.n	80023e4 <rx_pc_get+0x548>
				else get->t_vel = (rxbuf_get_pc[i+13] << 8) | rxbuf_get_pc[i+14];
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	330d      	adds	r3, #13
 80023c8:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <rx_pc_get+0x6d8>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	330e      	adds	r3, #14
 80023d4:	4967      	ldr	r1, [pc, #412]	; (8002574 <rx_pc_get+0x6d8>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b21a      	sxth	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
//					rx_buf_holder[j] = rxbuf_get_pc[i+j];
//				}
//				HAL_UART_Transmit(huart_ctrl, rx_buf_holder, 19, 500);
//				#endif

				get->cmd = DATA;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2205      	movs	r2, #5
 80023e8:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 80023ec:	e1c3      	b.n	8002776 <rx_pc_get+0x8da>

			}

			// Check for "Move" Instruction Given from Jetson Nano
			else if(rxbuf_get_pc[i+2] == 0x12){
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3302      	adds	r3, #2
 80023f2:	4a60      	ldr	r2, [pc, #384]	; (8002574 <rx_pc_get+0x6d8>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	2b12      	cmp	r3, #18
 80023f8:	f040 80a7 	bne.w	800254a <rx_pc_get+0x6ae>
				for(int j=0; j<19; j++){
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e00b      	b.n	800241a <rx_pc_get+0x57e>
					rx_buf_command[j] = rxbuf_get_pc[j];
 8002402:	4a5c      	ldr	r2, [pc, #368]	; (8002574 <rx_pc_get+0x6d8>)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	7819      	ldrb	r1, [r3, #0]
 800240a:	4a5b      	ldr	r2, [pc, #364]	; (8002578 <rx_pc_get+0x6dc>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	460a      	mov	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
				for(int j=0; j<19; j++){
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	3301      	adds	r3, #1
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b12      	cmp	r3, #18
 800241e:	ddf0      	ble.n	8002402 <rx_pc_get+0x566>
				}

				get->id_data = (rxbuf_get_pc[i+3] << 8) | rxbuf_get_pc[i+4];
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3303      	adds	r3, #3
 8002424:	4a53      	ldr	r2, [pc, #332]	; (8002574 <rx_pc_get+0x6d8>)
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	b21a      	sxth	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3304      	adds	r3, #4
 8002430:	4950      	ldr	r1, [pc, #320]	; (8002574 <rx_pc_get+0x6d8>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	b21b      	sxth	r3, r3
 8002436:	4313      	orrs	r3, r2
 8002438:	b21b      	sxth	r3, r3
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196

				if((rxbuf_get_pc[i+5] & 0x80)) get->x_data = ((rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6])-(65536);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3305      	adds	r3, #5
 8002446:	4a4b      	ldr	r2, [pc, #300]	; (8002574 <rx_pc_get+0x6d8>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	b25b      	sxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	da10      	bge.n	8002472 <rx_pc_get+0x5d6>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3305      	adds	r3, #5
 8002454:	4a47      	ldr	r2, [pc, #284]	; (8002574 <rx_pc_get+0x6d8>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	b21a      	sxth	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3306      	adds	r3, #6
 8002460:	4944      	ldr	r1, [pc, #272]	; (8002574 <rx_pc_get+0x6d8>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21a      	sxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
 8002470:	e00f      	b.n	8002492 <rx_pc_get+0x5f6>
				else get->x_data = (rxbuf_get_pc[i+5] << 8) | rxbuf_get_pc[i+6];
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3305      	adds	r3, #5
 8002476:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <rx_pc_get+0x6d8>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	b21a      	sxth	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3306      	adds	r3, #6
 8002482:	493c      	ldr	r1, [pc, #240]	; (8002574 <rx_pc_get+0x6d8>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21a      	sxth	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198

				if((rxbuf_get_pc[i+7] & 0x80)) get->y_data = ((rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8])-(65536);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	3307      	adds	r3, #7
 8002496:	4a37      	ldr	r2, [pc, #220]	; (8002574 <rx_pc_get+0x6d8>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
 800249a:	b25b      	sxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	da10      	bge.n	80024c2 <rx_pc_get+0x626>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3307      	adds	r3, #7
 80024a4:	4a33      	ldr	r2, [pc, #204]	; (8002574 <rx_pc_get+0x6d8>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3308      	adds	r3, #8
 80024b0:	4930      	ldr	r1, [pc, #192]	; (8002574 <rx_pc_get+0x6d8>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
 80024c0:	e00f      	b.n	80024e2 <rx_pc_get+0x646>
				else get->y_data = (rxbuf_get_pc[i+7] << 8) | rxbuf_get_pc[i+8];
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3307      	adds	r3, #7
 80024c6:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <rx_pc_get+0x6d8>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	b21a      	sxth	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3308      	adds	r3, #8
 80024d2:	4928      	ldr	r1, [pc, #160]	; (8002574 <rx_pc_get+0x6d8>)
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	b21a      	sxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

				if((rxbuf_get_pc[i+9] & 0x80)) get->t_data = ((rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10])-(65536);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3309      	adds	r3, #9
 80024e6:	4a23      	ldr	r2, [pc, #140]	; (8002574 <rx_pc_get+0x6d8>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da10      	bge.n	8002512 <rx_pc_get+0x676>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3309      	adds	r3, #9
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <rx_pc_get+0x6d8>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b21a      	sxth	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	330a      	adds	r3, #10
 8002500:	491c      	ldr	r1, [pc, #112]	; (8002574 <rx_pc_get+0x6d8>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	b21b      	sxth	r3, r3
 8002506:	4313      	orrs	r3, r2
 8002508:	b21a      	sxth	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
 8002510:	e00f      	b.n	8002532 <rx_pc_get+0x696>
				else get->t_data = (rxbuf_get_pc[i+9] << 8) | rxbuf_get_pc[i+10];
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3309      	adds	r3, #9
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <rx_pc_get+0x6d8>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	b21a      	sxth	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	330a      	adds	r3, #10
 8002522:	4914      	ldr	r1, [pc, #80]	; (8002574 <rx_pc_get+0x6d8>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	b21b      	sxth	r3, r3
 8002528:	4313      	orrs	r3, r2
 800252a:	b21a      	sxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c

				get->aktuator = rxbuf_get_pc[i+11];
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	330b      	adds	r3, #11
 8002536:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <rx_pc_get+0x6d8>)
 8002538:	5cd2      	ldrb	r2, [r2, r3]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e

				get->cmd = MOVE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2203      	movs	r2, #3
 8002544:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 8002548:	e115      	b.n	8002776 <rx_pc_get+0x8da>

			}

			// Check for Astar Sequence Given from Jetson Nano
			else if(rxbuf_get_pc[2] == 0x13){
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <rx_pc_get+0x6d8>)
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	2b13      	cmp	r3, #19
 8002550:	f040 8111 	bne.w	8002776 <rx_pc_get+0x8da>
				uint8_t chk = checksum_pc_generator(rxbuf_get_pc,18);
 8002554:	2112      	movs	r1, #18
 8002556:	4807      	ldr	r0, [pc, #28]	; (8002574 <rx_pc_get+0x6d8>)
 8002558:	f7ff fb22 	bl	8001ba0 <checksum_pc_generator>
 800255c:	4603      	mov	r3, r0
 800255e:	72fb      	strb	r3, [r7, #11]
				if(chk == rxbuf_get_pc[18]){
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <rx_pc_get+0x6d8>)
 8002562:	7c9b      	ldrb	r3, [r3, #18]
 8002564:	7afa      	ldrb	r2, [r7, #11]
 8002566:	429a      	cmp	r2, r3
 8002568:	f040 8105 	bne.w	8002776 <rx_pc_get+0x8da>
					// Save message to holder
					for(int j=0; j<19; j++){
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e019      	b.n	80025a6 <rx_pc_get+0x70a>
 8002572:	bf00      	nop
 8002574:	20000140 	.word	0x20000140
 8002578:	2000016c 	.word	0x2000016c
						rx_buf_holder[((rxbuf_get_pc[i+3])*19)+j] = rxbuf_get_pc[j];
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3303      	adds	r3, #3
 8002580:	4a86      	ldr	r2, [pc, #536]	; (800279c <rx_pc_get+0x900>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	461a      	mov	r2, r3
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	441a      	add	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	4981      	ldr	r1, [pc, #516]	; (800279c <rx_pc_get+0x900>)
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	440a      	add	r2, r1
 800259a:	7811      	ldrb	r1, [r2, #0]
 800259c:	4a80      	ldr	r2, [pc, #512]	; (80027a0 <rx_pc_get+0x904>)
 800259e:	54d1      	strb	r1, [r2, r3]
					for(int j=0; j<19; j++){
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b12      	cmp	r3, #18
 80025aa:	dde7      	ble.n	800257c <rx_pc_get+0x6e0>
					}
					// get id holder
					if(rxbuf_get_pc[i+3]>id_holder){
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3303      	adds	r3, #3
 80025b0:	4a7a      	ldr	r2, [pc, #488]	; (800279c <rx_pc_get+0x900>)
 80025b2:	5cd2      	ldrb	r2, [r2, r3]
 80025b4:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <rx_pc_get+0x908>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d905      	bls.n	80025c8 <rx_pc_get+0x72c>
						id_holder = rxbuf_get_pc[i+3];
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3303      	adds	r3, #3
 80025c0:	4a76      	ldr	r2, [pc, #472]	; (800279c <rx_pc_get+0x900>)
 80025c2:	5cd2      	ldrb	r2, [r2, r3]
 80025c4:	4b77      	ldr	r3, [pc, #476]	; (80027a4 <rx_pc_get+0x908>)
 80025c6:	701a      	strb	r2, [r3, #0]
					}
					get->astar_id = (rxbuf_get_pc[i+3]);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3303      	adds	r3, #3
 80025cc:	4a73      	ldr	r2, [pc, #460]	; (800279c <rx_pc_get+0x900>)
 80025ce:	5cd2      	ldrb	r2, [r2, r3]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
					get->astar_length = (rxbuf_get_pc[i+4]);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3304      	adds	r3, #4
 80025da:	4a70      	ldr	r2, [pc, #448]	; (800279c <rx_pc_get+0x900>)
 80025dc:	5cd2      	ldrb	r2, [r2, r3]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+0] = (rxbuf_get_pc[i+5]);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3305      	adds	r3, #5
 80025e8:	4a6c      	ldr	r2, [pc, #432]	; (800279c <rx_pc_get+0x900>)
 80025ea:	5cd1      	ldrb	r1, [r2, r3]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3303      	adds	r3, #3
 80025f0:	4a6a      	ldr	r2, [pc, #424]	; (800279c <rx_pc_get+0x900>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	441a      	add	r2, r3
 80025fc:	b209      	sxth	r1, r1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+0] = (rxbuf_get_pc[i+6]);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3306      	adds	r3, #6
 8002608:	4a64      	ldr	r2, [pc, #400]	; (800279c <rx_pc_get+0x900>)
 800260a:	5cd1      	ldrb	r1, [r2, r3]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3303      	adds	r3, #3
 8002610:	4a62      	ldr	r2, [pc, #392]	; (800279c <rx_pc_get+0x900>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	461a      	mov	r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	441a      	add	r2, r3
 800261c:	b209      	sxth	r1, r1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3264      	adds	r2, #100	; 0x64
 8002622:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+1] = (rxbuf_get_pc[i+7]);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3307      	adds	r3, #7
 800262a:	4a5c      	ldr	r2, [pc, #368]	; (800279c <rx_pc_get+0x900>)
 800262c:	5cd1      	ldrb	r1, [r2, r3]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3303      	adds	r3, #3
 8002632:	4a5a      	ldr	r2, [pc, #360]	; (800279c <rx_pc_get+0x900>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	461a      	mov	r2, r3
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	b209      	sxth	r1, r1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+1] = (rxbuf_get_pc[i+8]);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3308      	adds	r3, #8
 800264c:	4a53      	ldr	r2, [pc, #332]	; (800279c <rx_pc_get+0x900>)
 800264e:	5cd1      	ldrb	r1, [r2, r3]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3303      	adds	r3, #3
 8002654:	4a51      	ldr	r2, [pc, #324]	; (800279c <rx_pc_get+0x900>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	461a      	mov	r2, r3
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	b209      	sxth	r1, r1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3264      	adds	r2, #100	; 0x64
 8002668:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+2] = (rxbuf_get_pc[i+9]);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3309      	adds	r3, #9
 8002670:	4a4a      	ldr	r2, [pc, #296]	; (800279c <rx_pc_get+0x900>)
 8002672:	5cd1      	ldrb	r1, [r2, r3]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3303      	adds	r3, #3
 8002678:	4a48      	ldr	r2, [pc, #288]	; (800279c <rx_pc_get+0x900>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	461a      	mov	r2, r3
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	1c9a      	adds	r2, r3, #2
 8002686:	b209      	sxth	r1, r1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+2] = (rxbuf_get_pc[i+10]);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	330a      	adds	r3, #10
 8002692:	4a42      	ldr	r2, [pc, #264]	; (800279c <rx_pc_get+0x900>)
 8002694:	5cd1      	ldrb	r1, [r2, r3]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3303      	adds	r3, #3
 800269a:	4a40      	ldr	r2, [pc, #256]	; (800279c <rx_pc_get+0x900>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	461a      	mov	r2, r3
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	1c9a      	adds	r2, r3, #2
 80026a8:	b209      	sxth	r1, r1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3264      	adds	r2, #100	; 0x64
 80026ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+3] = (rxbuf_get_pc[i+11]);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	330b      	adds	r3, #11
 80026b6:	4a39      	ldr	r2, [pc, #228]	; (800279c <rx_pc_get+0x900>)
 80026b8:	5cd1      	ldrb	r1, [r2, r3]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3303      	adds	r3, #3
 80026be:	4a37      	ldr	r2, [pc, #220]	; (800279c <rx_pc_get+0x900>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	1cda      	adds	r2, r3, #3
 80026cc:	b209      	sxth	r1, r1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+3] = (rxbuf_get_pc[i+12]);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	330c      	adds	r3, #12
 80026d8:	4a30      	ldr	r2, [pc, #192]	; (800279c <rx_pc_get+0x900>)
 80026da:	5cd1      	ldrb	r1, [r2, r3]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3303      	adds	r3, #3
 80026e0:	4a2e      	ldr	r2, [pc, #184]	; (800279c <rx_pc_get+0x900>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	1cda      	adds	r2, r3, #3
 80026ee:	b209      	sxth	r1, r1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3264      	adds	r2, #100	; 0x64
 80026f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_x[rxbuf_get_pc[i+3]*5+4] = (rxbuf_get_pc[i+13]);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	330d      	adds	r3, #13
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <rx_pc_get+0x900>)
 80026fe:	5cd1      	ldrb	r1, [r2, r3]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3303      	adds	r3, #3
 8002704:	4a25      	ldr	r2, [pc, #148]	; (800279c <rx_pc_get+0x900>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	461a      	mov	r2, r3
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	1d1a      	adds	r2, r3, #4
 8002712:	b209      	sxth	r1, r1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_coordinate_y[rxbuf_get_pc[i+3]*5+4] = (rxbuf_get_pc[i+14]);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	330e      	adds	r3, #14
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <rx_pc_get+0x900>)
 8002720:	5cd1      	ldrb	r1, [r2, r3]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3303      	adds	r3, #3
 8002726:	4a1d      	ldr	r2, [pc, #116]	; (800279c <rx_pc_get+0x900>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	461a      	mov	r2, r3
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	1d1a      	adds	r2, r3, #4
 8002734:	b209      	sxth	r1, r1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3264      	adds	r2, #100	; 0x64
 800273a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					get->astar_total_length = (rxbuf_get_pc[i+15] << 8) | rxbuf_get_pc[i+16];
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	330f      	adds	r3, #15
 8002742:	4a16      	ldr	r2, [pc, #88]	; (800279c <rx_pc_get+0x900>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	b21a      	sxth	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3310      	adds	r3, #16
 800274e:	4913      	ldr	r1, [pc, #76]	; (800279c <rx_pc_get+0x900>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	b21b      	sxth	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b21b      	sxth	r3, r3
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
					get->astar_msg_id = rxbuf_get_pc[i+17];
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3311      	adds	r3, #17
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <rx_pc_get+0x900>)
 8002766:	5cd2      	ldrb	r2, [r2, r3]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
					get->cmd = MOVE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2203      	movs	r2, #3
 8002772:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	for(int i = 0; i < 19; i++){
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b12      	cmp	r3, #18
 8002780:	f77f ab94 	ble.w	8001eac <rx_pc_get+0x10>
				}
			}

		}
	}
	HAL_UART_Receive_DMA(huart_pc, rxbuf_get_pc, 19);
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <rx_pc_get+0x90c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2213      	movs	r2, #19
 800278a:	4904      	ldr	r1, [pc, #16]	; (800279c <rx_pc_get+0x900>)
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fd80 	bl	8006292 <HAL_UART_Receive_DMA>
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000140 	.word	0x20000140
 80027a0:	20000180 	.word	0x20000180
 80027a4:	200001e4 	.word	0x200001e4
 80027a8:	2000013c 	.word	0x2000013c

080027ac <HAL_UART_RxCpltCallback>:
bool is_calibrated = false;
uint16_t id_astar= 0;
////////////////////////////////////// COMMUNICATION CALLBACK ////////////////////////////////////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_UART_RxCpltCallback+0x84>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d125      	bne.n	8002808 <HAL_UART_RxCpltCallback+0x5c>

		// Callback for BNO08X Data
		#ifdef USE_BNO08X
	    BNO08X_GetData(&BNO08x_Data);
 80027bc:	481d      	ldr	r0, [pc, #116]	; (8002834 <HAL_UART_RxCpltCallback+0x88>)
 80027be:	f7fe faa7 	bl	8000d10 <BNO08X_GetData>
	    // Handling Calibration
	    if(!is_calibrated && BNO08x_Data.yaw != 0){
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_UART_RxCpltCallback+0x8c>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02a      	beq.n	8002826 <HAL_UART_RxCpltCallback+0x7a>
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_UART_RxCpltCallback+0x88>)
 80027d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d025      	beq.n	8002826 <HAL_UART_RxCpltCallback+0x7a>
	    	if(sample_yaw >= 4){
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_UART_RxCpltCallback+0x90>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d902      	bls.n	80027e8 <HAL_UART_RxCpltCallback+0x3c>
//	    		sum_yaw = diff_data_yaw[4] - diff_data_yaw[0];

	    		// Decision making
//	    		if(diff_data_yaw[0] <= 100 && diff_data_yaw[0] >= 100){
	    		if(true){
	    			is_calibrated = true;
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_UART_RxCpltCallback+0x8c>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
	    		else{
	    			// RESET STM
	    			HAL_NVIC_SystemReset();
	    		}
	    	}
	    	diff_data_yaw[sample_yaw] = BNO08x_Data.yaw;
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_UART_RxCpltCallback+0x90>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_UART_RxCpltCallback+0x88>)
 80027f0:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_UART_RxCpltCallback+0x94>)
 80027f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	    	sample_yaw++;
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_UART_RxCpltCallback+0x90>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_UART_RxCpltCallback+0x90>)
 8002804:	701a      	strb	r2, [r3, #0]
		#ifdef USE_COM_CONTROL
		rx_ctrl_get(&message_from_ctrl);

		#endif
	}
}
 8002806:	e00e      	b.n	8002826 <HAL_UART_RxCpltCallback+0x7a>
	} else if (huart == &huart1) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_UART_RxCpltCallback+0x98>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d103      	bne.n	8002818 <HAL_UART_RxCpltCallback+0x6c>
		rx_pc_get(&message_from_pc);
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <HAL_UART_RxCpltCallback+0x9c>)
 8002812:	f7ff fb43 	bl	8001e9c <rx_pc_get>
}
 8002816:	e006      	b.n	8002826 <HAL_UART_RxCpltCallback+0x7a>
	} else if(huart == &huart6){
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_UART_RxCpltCallback+0xa0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d102      	bne.n	8002826 <HAL_UART_RxCpltCallback+0x7a>
		rx_ctrl_get(&message_from_ctrl);
 8002820:	480b      	ldr	r0, [pc, #44]	; (8002850 <HAL_UART_RxCpltCallback+0xa4>)
 8002822:	f7fe fdaf 	bl	8001384 <rx_ctrl_get>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200006c8 	.word	0x200006c8
 8002834:	200001e8 	.word	0x200001e8
 8002838:	2000088b 	.word	0x2000088b
 800283c:	2000088a 	.word	0x2000088a
 8002840:	20000880 	.word	0x20000880
 8002844:	20000680 	.word	0x20000680
 8002848:	20000238 	.word	0x20000238
 800284c:	20000710 	.word	0x20000710
 8002850:	20000414 	.word	0x20000414

08002854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800285a:	f000 fe11 	bl	8003480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800285e:	f000 f8d5 	bl	8002a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002862:	f000 fabb 	bl	8002ddc <MX_GPIO_Init>
  MX_DMA_Init();
 8002866:	f000 fa7b 	bl	8002d60 <MX_DMA_Init>
  MX_ADC1_Init();
 800286a:	f000 f939 	bl	8002ae0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800286e:	f000 f9f9 	bl	8002c64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002872:	f000 fa21 	bl	8002cb8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002876:	f000 fa49 	bl	8002d0c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800287a:	f000 f9a3 	bl	8002bc4 <MX_TIM1_Init>
  MX_SPI1_Init();
 800287e:	f000 f969 	bl	8002b54 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////// SENSOR INITIALIZATION ////////////////////////////////////

    // BNO08X initialization
    #ifdef USE_BNO08X
    BNO08X_Init(&huart2);
 8002882:	4851      	ldr	r0, [pc, #324]	; (80029c8 <main+0x174>)
 8002884:	f7fe fab6 	bl	8000df4 <BNO08X_Init>
    DHT_Start();
    #endif

    // Volt & Current Initialization
    #ifdef USE_VOLT_CURRENT
    VoltCurrent_Init(&hadc1);
 8002888:	4850      	ldr	r0, [pc, #320]	; (80029cc <main+0x178>)
 800288a:	f7fe fb6f 	bl	8000f6c <VoltCurrent_Init>
    #endif

    // Load cell Initialization
    #ifdef USE_LOADCELL
//    hx711_calibration(&Loadcell_Data, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1);
    hx711_init(&Loadcell_Data, GPIOB, GPIO_PIN_0, GPIOB, GPIO_PIN_1);
 800288e:	2302      	movs	r3, #2
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <main+0x17c>)
 8002894:	2201      	movs	r2, #1
 8002896:	494e      	ldr	r1, [pc, #312]	; (80029d0 <main+0x17c>)
 8002898:	484e      	ldr	r0, [pc, #312]	; (80029d4 <main+0x180>)
 800289a:	f7fe fac5 	bl	8000e28 <hx711_init>
    set_scale(&Loadcell_Data, 115.598, 72.818);
 800289e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80029d8 <main+0x184>
 80028a2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80029dc <main+0x188>
 80028a6:	484b      	ldr	r0, [pc, #300]	; (80029d4 <main+0x180>)
 80028a8:	f7fe fafa 	bl	8000ea0 <set_scale>
    #endif

    // Initialize Communication to Control
    #ifdef USE_COM_CONTROL
    komunikasi_ctrl_init(&huart6);
 80028ac:	484c      	ldr	r0, [pc, #304]	; (80029e0 <main+0x18c>)
 80028ae:	f7fe fc69 	bl	8001184 <komunikasi_ctrl_init>
    rx_ctrl_start_get();
 80028b2:	f7fe fd57 	bl	8001364 <rx_ctrl_start_get>
    #endif

    // Initialize Communication to PC
    #ifdef USE_COM_PC
    komunikasi_pc_init(&huart1);
 80028b6:	484b      	ldr	r0, [pc, #300]	; (80029e4 <main+0x190>)
 80028b8:	f7ff f962 	bl	8001b80 <komunikasi_pc_init>
    rx_pc_start_get();
 80028bc:	f7ff fade 	bl	8001e7c <rx_pc_start_get>
    HAL_Delay(1000);
    fillScreen(BLACK);
    setRotation(135);
    #endif

    HAL_Delay(1000);
 80028c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c4:	f000 fe4e 	bl	8003564 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80028c8:	2201      	movs	r2, #1
 80028ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028ce:	4846      	ldr	r0, [pc, #280]	; (80029e8 <main+0x194>)
 80028d0:	f002 f854 	bl	800497c <HAL_GPIO_WritePin>
//	  }
//	  data_loadA = get_weight(&Loadcell_Data, 10, CHANNEL_A);
//	  data_loadB = get_weight(&Loadcell_Data, 10, CHANNEL_B);
	  	  ////////////////////////////////////// ASYNCHRONOUS READING & SENDING ///////////////////////////////////////////

	  CurrentTick = HAL_GetTick();
 80028d4:	f000 fe3a 	bl	800354c <HAL_GetTick>
 80028d8:	4603      	mov	r3, r0
 80028da:	4a44      	ldr	r2, [pc, #272]	; (80029ec <main+0x198>)
 80028dc:	6013      	str	r3, [r2, #0]

	  if(CurrentTick-SensorTick > SENSOR_INTERVAL){
 80028de:	4b43      	ldr	r3, [pc, #268]	; (80029ec <main+0x198>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <main+0x19c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ec:	d95c      	bls.n	80029a8 <main+0x154>

		  // Reading Data in MX7655 Sensor
		  Sensor_Data.temperature = (Max6675_Read_Temp()*100);
 80028ee:	f7fe faeb 	bl	8000ec8 <Max6675_Read_Temp>
 80028f2:	eef0 7a40 	vmov.f32	s15, s0
 80028f6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80029f4 <main+0x1a0>
 80028fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002902:	ee17 3a90 	vmov	r3, s15
 8002906:	b21a      	sxth	r2, r3
 8002908:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <main+0x1a4>)
 800290a:	801a      	strh	r2, [r3, #0]

		  // Reading Data in Voltage Sensor
		  Get_Voltage_Measurement(&Volt_Current_Data);
 800290c:	483b      	ldr	r0, [pc, #236]	; (80029fc <main+0x1a8>)
 800290e:	f7fe fb7d 	bl	800100c <Get_Voltage_Measurement>
		  Sensor_Data.voltage = (Volt_Current_Data.voltage*100);
 8002912:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <main+0x1a8>)
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80029f4 <main+0x1a0>
 800291c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002924:	ee17 3a90 	vmov	r3, s15
 8002928:	b21a      	sxth	r2, r3
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <main+0x1a4>)
 800292c:	80da      	strh	r2, [r3, #6]

		  // Reading Data in Current Sensor
		  Get_Current_Measurement(&Volt_Current_Data);
 800292e:	4833      	ldr	r0, [pc, #204]	; (80029fc <main+0x1a8>)
 8002930:	f7fe fb9e 	bl	8001070 <Get_Current_Measurement>
		  Sensor_Data.current = (Volt_Current_Data.current*100);
 8002934:	4b31      	ldr	r3, [pc, #196]	; (80029fc <main+0x1a8>)
 8002936:	edd3 7a01 	vldr	s15, [r3, #4]
 800293a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80029f4 <main+0x1a0>
 800293e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002946:	ee17 3a90 	vmov	r3, s15
 800294a:	b21a      	sxth	r2, r3
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <main+0x1a4>)
 800294e:	809a      	strh	r2, [r3, #4]

		  // Sending Sensor Data
		  tx_pc_send_Sensor(Sensor_Data);
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <main+0x1a4>)
 8002952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002956:	f7ff f9b3 	bl	8001cc0 <tx_pc_send_Sensor>

		  // Sending Odometry Data
		  tx_pc_send_Odometry(message_from_ctrl.x_pos,message_from_ctrl.y_pos,message_from_ctrl.t_pos,message_from_ctrl.x_vel,message_from_ctrl.y_vel,message_from_ctrl.t_vel);
 800295a:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <main+0x1ac>)
 800295c:	f9b3 01a0 	ldrsh.w	r0, [r3, #416]	; 0x1a0
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <main+0x1ac>)
 8002962:	f9b3 11a2 	ldrsh.w	r1, [r3, #418]	; 0x1a2
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <main+0x1ac>)
 8002968:	f9b3 41a4 	ldrsh.w	r4, [r3, #420]	; 0x1a4
 800296c:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <main+0x1ac>)
 800296e:	f9b3 51a6 	ldrsh.w	r5, [r3, #422]	; 0x1a6
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <main+0x1ac>)
 8002974:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 8002978:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <main+0x1ac>)
 800297a:	f9b2 21aa 	ldrsh.w	r2, [r2, #426]	; 0x1aa
 800297e:	9201      	str	r2, [sp, #4]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	462b      	mov	r3, r5
 8002984:	4622      	mov	r2, r4
 8002986:	f7ff fa09 	bl	8001d9c <tx_pc_send_Odometry>


		  // Sending BNO08X Data
		  if(is_calibrated) tx_pc_send_BNO08X(BNO08x_Data);
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <main+0x1b0>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <main+0x14c>
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <main+0x1b4>)
 8002994:	8a1a      	ldrh	r2, [r3, #16]
 8002996:	f8ad 2000 	strh.w	r2, [sp]
 800299a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800299c:	f7ff f920 	bl	8001be0 <tx_pc_send_BNO08X>

		  SensorTick = CurrentTick;
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <main+0x198>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <main+0x19c>)
 80029a6:	6013      	str	r3, [r2, #0]


	  ////////////////////////////////////// SENDING DATA TO CONTROL ///////////////////////////

	  // Sending BNO08X Data
	  tx_ctrl_send_Astar();
 80029a8:	f7fe fc8c 	bl	80012c4 <tx_ctrl_send_Astar>
	  tx_ctrl_send_Command();
 80029ac:	f7fe fcc4 	bl	8001338 <tx_ctrl_send_Command>
	  //	  tx_ctrl_ping();
	  if(is_calibrated) tx_ctrl_send_BNO08X(BNO08x_Data);
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <main+0x1b0>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d08d      	beq.n	80028d4 <main+0x80>
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <main+0x1b4>)
 80029ba:	8a1a      	ldrh	r2, [r3, #16]
 80029bc:	f8ad 2000 	strh.w	r2, [sp]
 80029c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c2:	f7fe fc0f 	bl	80011e4 <tx_ctrl_send_BNO08X>
	  CurrentTick = HAL_GetTick();
 80029c6:	e785      	b.n	80028d4 <main+0x80>
 80029c8:	200006c8 	.word	0x200006c8
 80029cc:	200005f0 	.word	0x200005f0
 80029d0:	40020400 	.word	0x40020400
 80029d4:	20000208 	.word	0x20000208
 80029d8:	4291a2d1 	.word	0x4291a2d1
 80029dc:	42e7322d 	.word	0x42e7322d
 80029e0:	20000710 	.word	0x20000710
 80029e4:	20000680 	.word	0x20000680
 80029e8:	40020800 	.word	0x40020800
 80029ec:	20000878 	.word	0x20000878
 80029f0:	2000087c 	.word	0x2000087c
 80029f4:	42c80000 	.word	0x42c80000
 80029f8:	2000022c 	.word	0x2000022c
 80029fc:	200001fc 	.word	0x200001fc
 8002a00:	20000414 	.word	0x20000414
 8002a04:	2000088b 	.word	0x2000088b
 8002a08:	200001e8 	.word	0x200001e8

08002a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b094      	sub	sp, #80	; 0x50
 8002a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a12:	f107 0320 	add.w	r3, r7, #32
 8002a16:	2230      	movs	r2, #48	; 0x30
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 f970 	bl	8006d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <SystemClock_Config+0xcc>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <SystemClock_Config+0xcc>)
 8002a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <SystemClock_Config+0xcc>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <SystemClock_Config+0xd0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a58:	4a20      	ldr	r2, [pc, #128]	; (8002adc <SystemClock_Config+0xd0>)
 8002a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <SystemClock_Config+0xd0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a70:	2301      	movs	r3, #1
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a74:	2310      	movs	r3, #16
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a80:	2308      	movs	r3, #8
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002a84:	2354      	movs	r3, #84	; 0x54
 8002a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a90:	f107 0320 	add.w	r3, r7, #32
 8002a94:	4618      	mov	r0, r3
 8002a96:	f001 ff8b 	bl	80049b0 <HAL_RCC_OscConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002aa0:	f000 fa44 	bl	8002f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aa4:	230f      	movs	r3, #15
 8002aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 f9ed 	bl	8004ea0 <HAL_RCC_ClockConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002acc:	f000 fa2e 	bl	8002f2c <Error_Handler>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3750      	adds	r7, #80	; 0x50
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40007000 	.word	0x40007000

08002ae0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002ae6:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <MX_ADC1_Init+0x6c>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002aea:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002aec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002af0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <MX_ADC1_Init+0x70>)
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_ADC1_Init+0x68>)
 8002b34:	f000 fd3a 	bl	80035ac <HAL_ADC_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8002b3e:	f000 f9f5 	bl	8002f2c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200005f0 	.word	0x200005f0
 8002b4c:	40012000 	.word	0x40012000
 8002b50:	0f000001 	.word	0x0f000001

08002b54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b5a:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <MX_SPI1_Init+0x6c>)
 8002b5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b8c:	2238      	movs	r2, #56	; 0x38
 8002b8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002ba4:	220a      	movs	r2, #10
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ba8:	4804      	ldr	r0, [pc, #16]	; (8002bbc <MX_SPI1_Init+0x68>)
 8002baa:	f002 fb59 	bl	8005260 <HAL_SPI_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002bb4:	f000 f9ba 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000008c 	.word	0x2000008c
 8002bc0:	40013000 	.word	0x40013000

08002bc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd8:	463b      	mov	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002be0:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002be2:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <MX_TIM1_Init+0x9c>)
 8002be4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002be8:	2253      	movs	r2, #83	; 0x53
 8002bea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c0c:	4813      	ldr	r0, [pc, #76]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002c0e:	f002 ffbb 	bl	8005b88 <HAL_TIM_Base_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002c18:	f000 f988 	bl	8002f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	4619      	mov	r1, r3
 8002c28:	480c      	ldr	r0, [pc, #48]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002c2a:	f002 fffc 	bl	8005c26 <HAL_TIM_ConfigClockSource>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002c34:	f000 f97a 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c40:	463b      	mov	r3, r7
 8002c42:	4619      	mov	r1, r3
 8002c44:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_TIM1_Init+0x98>)
 8002c46:	f003 f9db 	bl	8006000 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c50:	f000 f96c 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c54:	bf00      	nop
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000638 	.word	0x20000638
 8002c60:	40010000 	.word	0x40010000

08002c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <MX_USART1_UART_Init+0x50>)
 8002c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9a:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c9c:	f003 fa1e 	bl	80060dc <HAL_UART_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ca6:	f000 f941 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000680 	.word	0x20000680
 8002cb4:	40011000 	.word	0x40011000

08002cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <MX_USART2_UART_Init+0x50>)
 8002cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cde:	220c      	movs	r2, #12
 8002ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_USART2_UART_Init+0x4c>)
 8002cf0:	f003 f9f4 	bl	80060dc <HAL_UART_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cfa:	f000 f917 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200006c8 	.word	0x200006c8
 8002d08:	40004400 	.word	0x40004400

08002d0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <MX_USART6_UART_Init+0x50>)
 8002d14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d32:	220c      	movs	r2, #12
 8002d34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_USART6_UART_Init+0x4c>)
 8002d44:	f003 f9ca 	bl	80060dc <HAL_UART_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002d4e:	f000 f8ed 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000710 	.word	0x20000710
 8002d5c:	40011400 	.word	0x40011400

08002d60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <MX_DMA_Init+0x78>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <MX_DMA_Init+0x78>)
 8002d70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <MX_DMA_Init+0x78>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <MX_DMA_Init+0x78>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <MX_DMA_Init+0x78>)
 8002d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <MX_DMA_Init+0x78>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	2010      	movs	r0, #16
 8002da4:	f001 f8bf 	bl	8003f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002da8:	2010      	movs	r0, #16
 8002daa:	f001 f8d8 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	2039      	movs	r0, #57	; 0x39
 8002db4:	f001 f8b7 	bl	8003f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002db8:	2039      	movs	r0, #57	; 0x39
 8002dba:	f001 f8d0 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	203a      	movs	r0, #58	; 0x3a
 8002dc4:	f001 f8af 	bl	8003f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002dc8:	203a      	movs	r0, #58	; 0x3a
 8002dca:	f001 f8c8 	bl	8003f5e <HAL_NVIC_EnableIRQ>

}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800

08002ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a48      	ldr	r2, [pc, #288]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	4b42      	ldr	r3, [pc, #264]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a41      	ldr	r2, [pc, #260]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a3a      	ldr	r2, [pc, #232]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a33      	ldr	r2, [pc, #204]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <MX_GPIO_Init+0x140>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8002e62:	2200      	movs	r2, #0
 8002e64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e68:	482d      	ldr	r0, [pc, #180]	; (8002f20 <MX_GPIO_Init+0x144>)
 8002e6a:	f001 fd87 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MX7665_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f24e 51f8 	movw	r1, #58872	; 0xe5f8
 8002e74:	482b      	ldr	r0, [pc, #172]	; (8002f24 <MX_GPIO_Init+0x148>)
 8002e76:	f001 fd81 	bl	800497c <HAL_GPIO_WritePin>
                          |MUL_SCK_Pin|MUL_Latch_Pin|MUL_MOSI_Pin|LCD_CS_Pin
                          |LCD_RS_Pin|LCD_WR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e80:	4829      	ldr	r0, [pc, #164]	; (8002f28 <MX_GPIO_Init+0x14c>)
 8002e82:	f001 fd7b 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8002e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2300      	movs	r3, #0
 8002e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4820      	ldr	r0, [pc, #128]	; (8002f20 <MX_GPIO_Init+0x144>)
 8002ea0:	f001 fbe8 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481c      	ldr	r0, [pc, #112]	; (8002f28 <MX_GPIO_Init+0x14c>)
 8002eb8:	f001 fbdc 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pins : MX7665_Pin LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin
                           MUL_SCK_Pin MUL_Latch_Pin MUL_MOSI_Pin LCD_CS_Pin
                           LCD_RS_Pin LCD_WR_Pin */
  GPIO_InitStruct.Pin = MX7665_Pin|LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin
 8002ebc:	f24e 53f8 	movw	r3, #58872	; 0xe5f8
 8002ec0:	617b      	str	r3, [r7, #20]
                          |MUL_SCK_Pin|MUL_Latch_Pin|MUL_MOSI_Pin|LCD_CS_Pin
                          |LCD_RS_Pin|LCD_WR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4813      	ldr	r0, [pc, #76]	; (8002f24 <MX_GPIO_Init+0x148>)
 8002ed6:	f001 fbcd 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	480d      	ldr	r0, [pc, #52]	; (8002f28 <MX_GPIO_Init+0x14c>)
 8002ef4:	f001 fbbe 	bl	8004674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RD_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin;
 8002ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RD_GPIO_Port, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_GPIO_Init+0x148>)
 8002f0e:	f001 fbb1 	bl	8004674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f12:	bf00      	nop
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020000 	.word	0x40020000

08002f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	4a0f      	ldr	r2, [pc, #60]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_MspInit+0x4c>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800

08002f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a17      	ldr	r2, [pc, #92]	; (8003004 <HAL_ADC_MspInit+0x7c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d127      	bne.n	8002ffa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_ADC_MspInit+0x80>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	4a15      	ldr	r2, [pc, #84]	; (8003008 <HAL_ADC_MspInit+0x80>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_ADC_MspInit+0x80>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_ADC_MspInit+0x80>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <HAL_ADC_MspInit+0x80>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <HAL_ADC_MspInit+0x80>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8002fe2:	2312      	movs	r3, #18
 8002fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4805      	ldr	r0, [pc, #20]	; (800300c <HAL_ADC_MspInit+0x84>)
 8002ff6:	f001 fb3d 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ffa:	bf00      	nop
 8002ffc:	3728      	adds	r7, #40	; 0x28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40012000 	.word	0x40012000
 8003008:	40023800 	.word	0x40023800
 800300c:	40020000 	.word	0x40020000

08003010 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	; 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <HAL_SPI_MspInit+0x84>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d12b      	bne.n	800308a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_SPI_MspInit+0x88>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4a17      	ldr	r2, [pc, #92]	; (8003098 <HAL_SPI_MspInit+0x88>)
 800303c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003040:	6453      	str	r3, [r2, #68]	; 0x44
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_SPI_MspInit+0x88>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_SPI_MspInit+0x88>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <HAL_SPI_MspInit+0x88>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_SPI_MspInit+0x88>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800306a:	2360      	movs	r3, #96	; 0x60
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003076:	2303      	movs	r3, #3
 8003078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800307a:	2305      	movs	r3, #5
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4619      	mov	r1, r3
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <HAL_SPI_MspInit+0x8c>)
 8003086:	f001 faf5 	bl	8004674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800308a:	bf00      	nop
 800308c:	3728      	adds	r7, #40	; 0x28
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40013000 	.word	0x40013000
 8003098:	40023800 	.word	0x40023800
 800309c:	40020000 	.word	0x40020000

080030a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <HAL_TIM_Base_MspInit+0x3c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10d      	bne.n	80030ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_TIM_Base_MspInit+0x40>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_TIM_Base_MspInit+0x40>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_TIM_Base_MspInit+0x40>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40023800 	.word	0x40023800

080030e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a92      	ldr	r2, [pc, #584]	; (800334c <HAL_UART_MspInit+0x268>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d15c      	bne.n	80031c0 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
 800310a:	4b91      	ldr	r3, [pc, #580]	; (8003350 <HAL_UART_MspInit+0x26c>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	4a90      	ldr	r2, [pc, #576]	; (8003350 <HAL_UART_MspInit+0x26c>)
 8003110:	f043 0310 	orr.w	r3, r3, #16
 8003114:	6453      	str	r3, [r2, #68]	; 0x44
 8003116:	4b8e      	ldr	r3, [pc, #568]	; (8003350 <HAL_UART_MspInit+0x26c>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	4b8a      	ldr	r3, [pc, #552]	; (8003350 <HAL_UART_MspInit+0x26c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a89      	ldr	r2, [pc, #548]	; (8003350 <HAL_UART_MspInit+0x26c>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b87      	ldr	r3, [pc, #540]	; (8003350 <HAL_UART_MspInit+0x26c>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800313e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314c:	2303      	movs	r3, #3
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003150:	2307      	movs	r3, #7
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003158:	4619      	mov	r1, r3
 800315a:	487e      	ldr	r0, [pc, #504]	; (8003354 <HAL_UART_MspInit+0x270>)
 800315c:	f001 fa8a 	bl	8004674 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003160:	4b7d      	ldr	r3, [pc, #500]	; (8003358 <HAL_UART_MspInit+0x274>)
 8003162:	4a7e      	ldr	r2, [pc, #504]	; (800335c <HAL_UART_MspInit+0x278>)
 8003164:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003166:	4b7c      	ldr	r3, [pc, #496]	; (8003358 <HAL_UART_MspInit+0x274>)
 8003168:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800316c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800316e:	4b7a      	ldr	r3, [pc, #488]	; (8003358 <HAL_UART_MspInit+0x274>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003174:	4b78      	ldr	r3, [pc, #480]	; (8003358 <HAL_UART_MspInit+0x274>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800317a:	4b77      	ldr	r3, [pc, #476]	; (8003358 <HAL_UART_MspInit+0x274>)
 800317c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003180:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003182:	4b75      	ldr	r3, [pc, #468]	; (8003358 <HAL_UART_MspInit+0x274>)
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003188:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_UART_MspInit+0x274>)
 800318a:	2200      	movs	r2, #0
 800318c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800318e:	4b72      	ldr	r3, [pc, #456]	; (8003358 <HAL_UART_MspInit+0x274>)
 8003190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003194:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003196:	4b70      	ldr	r3, [pc, #448]	; (8003358 <HAL_UART_MspInit+0x274>)
 8003198:	2200      	movs	r2, #0
 800319a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800319c:	4b6e      	ldr	r3, [pc, #440]	; (8003358 <HAL_UART_MspInit+0x274>)
 800319e:	2200      	movs	r2, #0
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031a2:	486d      	ldr	r0, [pc, #436]	; (8003358 <HAL_UART_MspInit+0x274>)
 80031a4:	f000 fef6 	bl	8003f94 <HAL_DMA_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80031ae:	f7ff febd 	bl	8002f2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a68      	ldr	r2, [pc, #416]	; (8003358 <HAL_UART_MspInit+0x274>)
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80031b8:	4a67      	ldr	r2, [pc, #412]	; (8003358 <HAL_UART_MspInit+0x274>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80031be:	e0c1      	b.n	8003344 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a66      	ldr	r2, [pc, #408]	; (8003360 <HAL_UART_MspInit+0x27c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d15b      	bne.n	8003282 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	4b60      	ldr	r3, [pc, #384]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4a5f      	ldr	r2, [pc, #380]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
 80031da:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b56      	ldr	r3, [pc, #344]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003202:	230c      	movs	r3, #12
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003206:	2302      	movs	r3, #2
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003212:	2307      	movs	r3, #7
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800321a:	4619      	mov	r1, r3
 800321c:	484d      	ldr	r0, [pc, #308]	; (8003354 <HAL_UART_MspInit+0x270>)
 800321e:	f001 fa29 	bl	8004674 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003222:	4b50      	ldr	r3, [pc, #320]	; (8003364 <HAL_UART_MspInit+0x280>)
 8003224:	4a50      	ldr	r2, [pc, #320]	; (8003368 <HAL_UART_MspInit+0x284>)
 8003226:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003228:	4b4e      	ldr	r3, [pc, #312]	; (8003364 <HAL_UART_MspInit+0x280>)
 800322a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800322e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <HAL_UART_MspInit+0x280>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003236:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <HAL_UART_MspInit+0x280>)
 8003238:	2200      	movs	r2, #0
 800323a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800323c:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_UART_MspInit+0x280>)
 800323e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003242:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003244:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_UART_MspInit+0x280>)
 8003246:	2200      	movs	r2, #0
 8003248:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800324a:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_UART_MspInit+0x280>)
 800324c:	2200      	movs	r2, #0
 800324e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003250:	4b44      	ldr	r3, [pc, #272]	; (8003364 <HAL_UART_MspInit+0x280>)
 8003252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003256:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003258:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_UART_MspInit+0x280>)
 800325a:	2200      	movs	r2, #0
 800325c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_UART_MspInit+0x280>)
 8003260:	2200      	movs	r2, #0
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003264:	483f      	ldr	r0, [pc, #252]	; (8003364 <HAL_UART_MspInit+0x280>)
 8003266:	f000 fe95 	bl	8003f94 <HAL_DMA_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8003270:	f7ff fe5c 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3b      	ldr	r2, [pc, #236]	; (8003364 <HAL_UART_MspInit+0x280>)
 8003278:	63da      	str	r2, [r3, #60]	; 0x3c
 800327a:	4a3a      	ldr	r2, [pc, #232]	; (8003364 <HAL_UART_MspInit+0x280>)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003280:	e060      	b.n	8003344 <HAL_UART_MspInit+0x260>
  else if(huart->Instance==USART6)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a39      	ldr	r2, [pc, #228]	; (800336c <HAL_UART_MspInit+0x288>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d15b      	bne.n	8003344 <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART6_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <HAL_UART_MspInit+0x26c>)
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <HAL_UART_MspInit+0x26c>)
 8003296:	f043 0320 	orr.w	r3, r3, #32
 800329a:	6453      	str	r3, [r2, #68]	; 0x44
 800329c:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <HAL_UART_MspInit+0x26c>)
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	4a27      	ldr	r2, [pc, #156]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6313      	str	r3, [r2, #48]	; 0x30
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_UART_MspInit+0x26c>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d2:	2303      	movs	r3, #3
 80032d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80032d6:	2308      	movs	r3, #8
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032de:	4619      	mov	r1, r3
 80032e0:	481c      	ldr	r0, [pc, #112]	; (8003354 <HAL_UART_MspInit+0x270>)
 80032e2:	f001 f9c7 	bl	8004674 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80032e6:	4b22      	ldr	r3, [pc, #136]	; (8003370 <HAL_UART_MspInit+0x28c>)
 80032e8:	4a22      	ldr	r2, [pc, #136]	; (8003374 <HAL_UART_MspInit+0x290>)
 80032ea:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80032ec:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_UART_MspInit+0x28c>)
 80032ee:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80032f2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_UART_MspInit+0x28c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_UART_MspInit+0x28c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_UART_MspInit+0x28c>)
 8003302:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003306:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_UART_MspInit+0x28c>)
 800330a:	2200      	movs	r2, #0
 800330c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_UART_MspInit+0x28c>)
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_UART_MspInit+0x28c>)
 8003316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800331a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_UART_MspInit+0x28c>)
 800331e:	2200      	movs	r2, #0
 8003320:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003322:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_UART_MspInit+0x28c>)
 8003324:	2200      	movs	r2, #0
 8003326:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003328:	4811      	ldr	r0, [pc, #68]	; (8003370 <HAL_UART_MspInit+0x28c>)
 800332a:	f000 fe33 	bl	8003f94 <HAL_DMA_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_UART_MspInit+0x254>
      Error_Handler();
 8003334:	f7ff fdfa 	bl	8002f2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <HAL_UART_MspInit+0x28c>)
 800333c:	63da      	str	r2, [r3, #60]	; 0x3c
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <HAL_UART_MspInit+0x28c>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003344:	bf00      	nop
 8003346:	3738      	adds	r7, #56	; 0x38
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40011000 	.word	0x40011000
 8003350:	40023800 	.word	0x40023800
 8003354:	40020000 	.word	0x40020000
 8003358:	20000758 	.word	0x20000758
 800335c:	40026440 	.word	0x40026440
 8003360:	40004400 	.word	0x40004400
 8003364:	200007b8 	.word	0x200007b8
 8003368:	40026088 	.word	0x40026088
 800336c:	40011400 	.word	0x40011400
 8003370:	20000818 	.word	0x20000818
 8003374:	40026428 	.word	0x40026428

08003378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800337c:	e7fe      	b.n	800337c <NMI_Handler+0x4>

0800337e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003382:	e7fe      	b.n	8003382 <HardFault_Handler+0x4>

08003384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003388:	e7fe      	b.n	8003388 <MemManage_Handler+0x4>

0800338a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <BusFault_Handler+0x4>

08003390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <UsageFault_Handler+0x4>

08003396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c4:	f000 f8ae 	bl	8003524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}

080033cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <DMA1_Stream5_IRQHandler+0x10>)
 80033d2:	f000 fee5 	bl	80041a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200007b8 	.word	0x200007b8

080033e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <DMA2_Stream1_IRQHandler+0x10>)
 80033e6:	f000 fedb 	bl	80041a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000818 	.word	0x20000818

080033f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <DMA2_Stream2_IRQHandler+0x10>)
 80033fa:	f000 fed1 	bl	80041a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000758 	.word	0x20000758

08003408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <SystemInit+0x20>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <SystemInit+0x20>)
 8003414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800342c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003464 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003430:	f7ff ffea 	bl	8003408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003436:	490d      	ldr	r1, [pc, #52]	; (800346c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003438:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800343a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800343c:	e002      	b.n	8003444 <LoopCopyDataInit>

0800343e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003442:	3304      	adds	r3, #4

08003444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003448:	d3f9      	bcc.n	800343e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344a:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800344c:	4c0a      	ldr	r4, [pc, #40]	; (8003478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003450:	e001      	b.n	8003456 <LoopFillZerobss>

08003452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003454:	3204      	adds	r2, #4

08003456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003458:	d3fb      	bcc.n	8003452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800345a:	f003 fc59 	bl	8006d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800345e:	f7ff f9f9 	bl	8002854 <main>
  bx  lr    
 8003462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003464:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800346c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003470:	08006dbc 	.word	0x08006dbc
  ldr r2, =_sbss
 8003474:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003478:	20000890 	.word	0x20000890

0800347c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800347c:	e7fe      	b.n	800347c <ADC_IRQHandler>
	...

08003480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_Init+0x40>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_Init+0x40>)
 800348a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800348e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_Init+0x40>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <HAL_Init+0x40>)
 8003496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800349a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_Init+0x40>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <HAL_Init+0x40>)
 80034a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a8:	2003      	movs	r0, #3
 80034aa:	f000 fd31 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ae:	200f      	movs	r0, #15
 80034b0:	f000 f808 	bl	80034c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b4:	f7ff fd40 	bl	8002f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023c00 	.word	0x40023c00

080034c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_InitTick+0x54>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_InitTick+0x58>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034da:	fbb3 f3f1 	udiv	r3, r3, r1
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fd49 	bl	8003f7a <HAL_SYSTICK_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00e      	b.n	8003510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d80a      	bhi.n	800350e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f8:	2200      	movs	r2, #0
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003500:	f000 fd11 	bl	8003f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <HAL_InitTick+0x5c>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000008 	.word	0x20000008
 800351c:	20000010 	.word	0x20000010
 8003520:	2000000c 	.word	0x2000000c

08003524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_IncTick+0x20>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_IncTick+0x24>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_IncTick+0x24>)
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000010 	.word	0x20000010
 8003548:	2000088c 	.word	0x2000088c

0800354c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	2000088c 	.word	0x2000088c

08003564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff ffee 	bl	800354c <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357c:	d005      	beq.n	800358a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_Delay+0x44>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800358a:	bf00      	nop
 800358c:	f7ff ffde 	bl	800354c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d8f7      	bhi.n	800358c <HAL_Delay+0x28>
  {
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000010 	.word	0x20000010

080035ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e033      	b.n	800362a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fcdc 	bl	8002f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d118      	bne.n	800361c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035f2:	f023 0302 	bic.w	r3, r3, #2
 80035f6:	f043 0202 	orr.w	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 faba 	bl	8003b78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f023 0303 	bic.w	r3, r3, #3
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
 800361a:	e001      	b.n	8003620 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_ADC_Start+0x1a>
 800364a:	2302      	movs	r3, #2
 800364c:	e097      	b.n	800377e <HAL_ADC_Start+0x14a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d018      	beq.n	8003696 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003674:	4b45      	ldr	r3, [pc, #276]	; (800378c <HAL_ADC_Start+0x158>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a45      	ldr	r2, [pc, #276]	; (8003790 <HAL_ADC_Start+0x15c>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0c9a      	lsrs	r2, r3, #18
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003688:	e002      	b.n	8003690 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3b01      	subs	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f9      	bne.n	800368a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d15f      	bne.n	8003764 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	d106      	bne.n	80036f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f023 0206 	bic.w	r2, r3, #6
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
 80036f0:	e002      	b.n	80036f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_ADC_Start+0x160>)
 8003702:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800370c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10f      	bne.n	800373a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d129      	bne.n	800377c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	e020      	b.n	800377c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a16      	ldr	r2, [pc, #88]	; (8003798 <HAL_ADC_Start+0x164>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d11b      	bne.n	800377c <HAL_ADC_Start+0x148>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d114      	bne.n	800377c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	e00b      	b.n	800377c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f043 0210 	orr.w	r2, r3, #16
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000008 	.word	0x20000008
 8003790:	431bde83 	.word	0x431bde83
 8003794:	40012300 	.word	0x40012300
 8003798:	40012000 	.word	0x40012000

0800379c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_Stop+0x16>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e021      	b.n	80037f6 <HAL_ADC_Stop+0x5a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381e:	d113      	bne.n	8003848 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382e:	d10b      	bne.n	8003848 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e063      	b.n	8003910 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003848:	f7ff fe80 	bl	800354c <HAL_GetTick>
 800384c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800384e:	e021      	b.n	8003894 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003856:	d01d      	beq.n	8003894 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_ADC_PollForConversion+0x6c>
 800385e:	f7ff fe75 	bl	800354c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d212      	bcs.n	8003894 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b02      	cmp	r3, #2
 800387a:	d00b      	beq.n	8003894 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0204 	orr.w	r2, r3, #4
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e03d      	b.n	8003910 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d1d6      	bne.n	8003850 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0212 	mvn.w	r2, #18
 80038aa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d123      	bne.n	800390e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11f      	bne.n	800390e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d006      	beq.n	80038ea <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d111      	bne.n	800390e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x1c>
 800394c:	2302      	movs	r3, #2
 800394e:	e105      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x228>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b09      	cmp	r3, #9
 800395e:	d925      	bls.n	80039ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68d9      	ldr	r1, [r3, #12]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	4613      	mov	r3, r2
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	3b1e      	subs	r3, #30
 8003976:	2207      	movs	r2, #7
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43da      	mvns	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	400a      	ands	r2, r1
 8003984:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68d9      	ldr	r1, [r3, #12]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	4603      	mov	r3, r0
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4403      	add	r3, r0
 800399e:	3b1e      	subs	r3, #30
 80039a0:	409a      	lsls	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	e022      	b.n	80039f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6919      	ldr	r1, [r3, #16]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	2207      	movs	r2, #7
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43da      	mvns	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	400a      	ands	r2, r1
 80039ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6919      	ldr	r1, [r3, #16]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4403      	add	r3, r0
 80039e8:	409a      	lsls	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d824      	bhi.n	8003a44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	3b05      	subs	r3, #5
 8003a0c:	221f      	movs	r2, #31
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	400a      	ands	r2, r1
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	4618      	mov	r0, r3
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	3b05      	subs	r3, #5
 8003a36:	fa00 f203 	lsl.w	r2, r0, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34
 8003a42:	e04c      	b.n	8003ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b0c      	cmp	r3, #12
 8003a4a:	d824      	bhi.n	8003a96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3b23      	subs	r3, #35	; 0x23
 8003a5e:	221f      	movs	r2, #31
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43da      	mvns	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	3b23      	subs	r3, #35	; 0x23
 8003a88:	fa00 f203 	lsl.w	r2, r0, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
 8003a94:	e023      	b.n	8003ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3b41      	subs	r3, #65	; 0x41
 8003aa8:	221f      	movs	r2, #31
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	400a      	ands	r2, r1
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	3b41      	subs	r3, #65	; 0x41
 8003ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <HAL_ADC_ConfigChannel+0x234>)
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <HAL_ADC_ConfigChannel+0x238>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d109      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x1cc>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b12      	cmp	r3, #18
 8003af2:	d105      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <HAL_ADC_ConfigChannel+0x238>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d123      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x21e>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d003      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0x1e6>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b11      	cmp	r3, #17
 8003b18:	d11b      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d111      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_ADC_ConfigChannel+0x23c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_ADC_ConfigChannel+0x240>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	0c9a      	lsrs	r2, r3, #18
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b44:	e002      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f9      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40012300 	.word	0x40012300
 8003b6c:	40012000 	.word	0x40012000
 8003b70:	20000008 	.word	0x20000008
 8003b74:	431bde83 	.word	0x431bde83

08003b78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b80:	4b79      	ldr	r3, [pc, #484]	; (8003d68 <ADC_Init+0x1f0>)
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	021a      	lsls	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <ADC_Init+0x1f4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6899      	ldr	r1, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6899      	ldr	r1, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	e00f      	b.n	8003c76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c74:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0202 	bic.w	r2, r2, #2
 8003c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6899      	ldr	r1, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7e1b      	ldrb	r3, [r3, #24]
 8003c90:	005a      	lsls	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	035a      	lsls	r2, r3, #13
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	e007      	b.n	8003cec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	051a      	lsls	r2, r3, #20
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6899      	ldr	r1, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d2e:	025a      	lsls	r2, r3, #9
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	029a      	lsls	r2, r3, #10
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	609a      	str	r2, [r3, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40012300 	.word	0x40012300
 8003d6c:	0f000001 	.word	0x0f000001

08003d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003da2:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <__NVIC_SetPriorityGrouping+0x44>)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	60d3      	str	r3, [r2, #12]
}
 8003da8:	bf00      	nop
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	f003 0307 	and.w	r3, r3, #7
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	db0b      	blt.n	8003dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	4907      	ldr	r1, [pc, #28]	; (8003e0c <__NVIC_EnableIRQ+0x38>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	095b      	lsrs	r3, r3, #5
 8003df4:	2001      	movs	r0, #1
 8003df6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000e100 	.word	0xe000e100

08003e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	6039      	str	r1, [r7, #0]
 8003e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	db0a      	blt.n	8003e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	490c      	ldr	r1, [pc, #48]	; (8003e5c <__NVIC_SetPriority+0x4c>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	0112      	lsls	r2, r2, #4
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	440b      	add	r3, r1
 8003e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e38:	e00a      	b.n	8003e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4908      	ldr	r1, [pc, #32]	; (8003e60 <__NVIC_SetPriority+0x50>)
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	3b04      	subs	r3, #4
 8003e48:	0112      	lsls	r2, r2, #4
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	761a      	strb	r2, [r3, #24]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	e000e100 	.word	0xe000e100
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b089      	sub	sp, #36	; 0x24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f1c3 0307 	rsb	r3, r3, #7
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	bf28      	it	cs
 8003e82:	2304      	movcs	r3, #4
 8003e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d902      	bls.n	8003e94 <NVIC_EncodePriority+0x30>
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3b03      	subs	r3, #3
 8003e92:	e000      	b.n	8003e96 <NVIC_EncodePriority+0x32>
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb6:	43d9      	mvns	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	4313      	orrs	r3, r2
         );
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3724      	adds	r7, #36	; 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003edc:	d301      	bcc.n	8003ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e00f      	b.n	8003f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <SysTick_Config+0x40>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eea:	210f      	movs	r1, #15
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef0:	f7ff ff8e 	bl	8003e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <SysTick_Config+0x40>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <SysTick_Config+0x40>)
 8003efc:	2207      	movs	r2, #7
 8003efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	e000e010 	.word	0xe000e010

08003f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff29 	bl	8003d70 <__NVIC_SetPriorityGrouping>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f38:	f7ff ff3e 	bl	8003db8 <__NVIC_GetPriorityGrouping>
 8003f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f7ff ff8e 	bl	8003e64 <NVIC_EncodePriority>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff5d 	bl	8003e10 <__NVIC_SetPriority>
}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff31 	bl	8003dd4 <__NVIC_EnableIRQ>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ffa2 	bl	8003ecc <SysTick_Config>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7ff fad4 	bl	800354c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e099      	b.n	80040e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fd0:	e00f      	b.n	8003ff2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fd2:	f7ff fabb 	bl	800354c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d908      	bls.n	8003ff2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e078      	b.n	80040e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e8      	bne.n	8003fd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4b38      	ldr	r3, [pc, #224]	; (80040ec <HAL_DMA_Init+0x158>)
 800400c:	4013      	ands	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800401e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	2b04      	cmp	r3, #4
 800404a:	d107      	bne.n	800405c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	4313      	orrs	r3, r2
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0307 	bic.w	r3, r3, #7
 8004072:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b04      	cmp	r3, #4
 8004084:	d117      	bne.n	80040b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00e      	beq.n	80040b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fa6f 	bl	800457c <DMA_CheckFifoParam>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2240      	movs	r2, #64	; 0x40
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040b2:	2301      	movs	r3, #1
 80040b4:	e016      	b.n	80040e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa26 	bl	8004510 <DMA_CalcBaseAndBitshift>
 80040c4:	4603      	mov	r3, r0
 80040c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	223f      	movs	r2, #63	; 0x3f
 80040ce:	409a      	lsls	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	f010803f 	.word	0xf010803f

080040f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_DMA_Start_IT+0x26>
 8004112:	2302      	movs	r3, #2
 8004114:	e040      	b.n	8004198 <HAL_DMA_Start_IT+0xa8>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d12f      	bne.n	800418a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2202      	movs	r2, #2
 800412e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f9b8 	bl	80044b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004148:	223f      	movs	r2, #63	; 0x3f
 800414a:	409a      	lsls	r2, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0216 	orr.w	r2, r2, #22
 800415e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0208 	orr.w	r2, r2, #8
 8004176:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e005      	b.n	8004196 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004192:	2302      	movs	r3, #2
 8004194:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041ac:	4b8e      	ldr	r3, [pc, #568]	; (80043e8 <HAL_DMA_IRQHandler+0x248>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a8e      	ldr	r2, [pc, #568]	; (80043ec <HAL_DMA_IRQHandler+0x24c>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0a9b      	lsrs	r3, r3, #10
 80041b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	2208      	movs	r2, #8
 80041cc:	409a      	lsls	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01a      	beq.n	800420c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d013      	beq.n	800420c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0204 	bic.w	r2, r2, #4
 80041f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	2208      	movs	r2, #8
 80041fa:	409a      	lsls	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d012      	beq.n	8004242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2201      	movs	r2, #1
 8004230:	409a      	lsls	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	2204      	movs	r2, #4
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	2204      	movs	r2, #4
 8004266:	409a      	lsls	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f043 0204 	orr.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	2210      	movs	r2, #16
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d043      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d03c      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	2210      	movs	r2, #16
 800429c:	409a      	lsls	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d018      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d108      	bne.n	80042d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d024      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
 80042ce:	e01f      	b.n	8004310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4798      	blx	r3
 80042e0:	e016      	b.n	8004310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0208 	bic.w	r2, r2, #8
 80042fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	2220      	movs	r2, #32
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 808f 	beq.w	8004440 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8087 	beq.w	8004440 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	2220      	movs	r2, #32
 8004338:	409a      	lsls	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b05      	cmp	r3, #5
 8004348:	d136      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0216 	bic.w	r2, r2, #22
 8004358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_DMA_IRQHandler+0x1da>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0208 	bic.w	r2, r2, #8
 8004388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	223f      	movs	r2, #63	; 0x3f
 8004390:	409a      	lsls	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d07e      	beq.n	80044ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
        }
        return;
 80043b6:	e079      	b.n	80044ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d031      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4798      	blx	r3
 80043e4:	e02c      	b.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
 80043e6:	bf00      	nop
 80043e8:	20000008 	.word	0x20000008
 80043ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d023      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e01e      	b.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0210 	bic.w	r2, r2, #16
 800441e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	d032      	beq.n	80044ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d022      	beq.n	800449a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2205      	movs	r2, #5
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	3301      	adds	r3, #1
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	429a      	cmp	r2, r3
 8004476:	d307      	bcc.n	8004488 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f2      	bne.n	800446c <HAL_DMA_IRQHandler+0x2cc>
 8004486:	e000      	b.n	800448a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004488:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
 80044aa:	e000      	b.n	80044ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80044ac:	bf00      	nop
    }
  }
}
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d108      	bne.n	80044f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044f2:	e007      	b.n	8004504 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	3b10      	subs	r3, #16
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <DMA_CalcBaseAndBitshift+0x64>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <DMA_CalcBaseAndBitshift+0x68>)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d909      	bls.n	8004552 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	1d1a      	adds	r2, r3, #4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	659a      	str	r2, [r3, #88]	; 0x58
 8004550:	e007      	b.n	8004562 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	aaaaaaab 	.word	0xaaaaaaab
 8004578:	08006da4 	.word	0x08006da4

0800457c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11f      	bne.n	80045d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d856      	bhi.n	800464a <DMA_CheckFifoParam+0xce>
 800459c:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <DMA_CheckFifoParam+0x28>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045c7 	.word	0x080045c7
 80045ac:	080045b5 	.word	0x080045b5
 80045b0:	0800464b 	.word	0x0800464b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d046      	beq.n	800464e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c4:	e043      	b.n	800464e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ce:	d140      	bne.n	8004652 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d4:	e03d      	b.n	8004652 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045de:	d121      	bne.n	8004624 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d837      	bhi.n	8004656 <DMA_CheckFifoParam+0xda>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <DMA_CheckFifoParam+0x70>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	08004603 	.word	0x08004603
 80045f4:	080045fd 	.word	0x080045fd
 80045f8:	08004615 	.word	0x08004615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	e030      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d025      	beq.n	800465a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004612:	e022      	b.n	800465a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800461c:	d11f      	bne.n	800465e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004622:	e01c      	b.n	800465e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d903      	bls.n	8004632 <DMA_CheckFifoParam+0xb6>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d003      	beq.n	8004638 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004630:	e018      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      break;
 8004636:	e015      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00e      	beq.n	8004662 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	e00b      	b.n	8004662 <DMA_CheckFifoParam+0xe6>
      break;
 800464a:	bf00      	nop
 800464c:	e00a      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
 8004650:	e008      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e006      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e004      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;   
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <DMA_CheckFifoParam+0xe8>
      break;
 8004662:	bf00      	nop
    }
  } 
  
  return status; 
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop

08004674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	; 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	e159      	b.n	8004944 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004690:	2201      	movs	r2, #1
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4013      	ands	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	f040 8148 	bne.w	800493e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d005      	beq.n	80046c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d130      	bne.n	8004728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	2203      	movs	r2, #3
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4013      	ands	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046fc:	2201      	movs	r2, #1
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 0201 	and.w	r2, r3, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b03      	cmp	r3, #3
 8004732:	d017      	beq.n	8004764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	2203      	movs	r2, #3
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d123      	bne.n	80047b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	08da      	lsrs	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3208      	adds	r2, #8
 8004778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	220f      	movs	r2, #15
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	08da      	lsrs	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3208      	adds	r2, #8
 80047b2:	69b9      	ldr	r1, [r7, #24]
 80047b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	2203      	movs	r2, #3
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0203 	and.w	r2, r3, #3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a2 	beq.w	800493e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	4b57      	ldr	r3, [pc, #348]	; (800495c <HAL_GPIO_Init+0x2e8>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	4a56      	ldr	r2, [pc, #344]	; (800495c <HAL_GPIO_Init+0x2e8>)
 8004804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004808:	6453      	str	r3, [r2, #68]	; 0x44
 800480a:	4b54      	ldr	r3, [pc, #336]	; (800495c <HAL_GPIO_Init+0x2e8>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004816:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_GPIO_Init+0x2ec>)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	3302      	adds	r3, #2
 800481e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	220f      	movs	r2, #15
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4013      	ands	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a49      	ldr	r2, [pc, #292]	; (8004964 <HAL_GPIO_Init+0x2f0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d019      	beq.n	8004876 <HAL_GPIO_Init+0x202>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a48      	ldr	r2, [pc, #288]	; (8004968 <HAL_GPIO_Init+0x2f4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_GPIO_Init+0x1fe>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a47      	ldr	r2, [pc, #284]	; (800496c <HAL_GPIO_Init+0x2f8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00d      	beq.n	800486e <HAL_GPIO_Init+0x1fa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a46      	ldr	r2, [pc, #280]	; (8004970 <HAL_GPIO_Init+0x2fc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <HAL_GPIO_Init+0x1f6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a45      	ldr	r2, [pc, #276]	; (8004974 <HAL_GPIO_Init+0x300>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_GPIO_Init+0x1f2>
 8004862:	2304      	movs	r3, #4
 8004864:	e008      	b.n	8004878 <HAL_GPIO_Init+0x204>
 8004866:	2307      	movs	r3, #7
 8004868:	e006      	b.n	8004878 <HAL_GPIO_Init+0x204>
 800486a:	2303      	movs	r3, #3
 800486c:	e004      	b.n	8004878 <HAL_GPIO_Init+0x204>
 800486e:	2302      	movs	r3, #2
 8004870:	e002      	b.n	8004878 <HAL_GPIO_Init+0x204>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <HAL_GPIO_Init+0x204>
 8004876:	2300      	movs	r3, #0
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	f002 0203 	and.w	r2, r2, #3
 800487e:	0092      	lsls	r2, r2, #2
 8004880:	4093      	lsls	r3, r2
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004888:	4935      	ldr	r1, [pc, #212]	; (8004960 <HAL_GPIO_Init+0x2ec>)
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	3302      	adds	r3, #2
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004896:	4b38      	ldr	r3, [pc, #224]	; (8004978 <HAL_GPIO_Init+0x304>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	43db      	mvns	r3, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4013      	ands	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ba:	4a2f      	ldr	r2, [pc, #188]	; (8004978 <HAL_GPIO_Init+0x304>)
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <HAL_GPIO_Init+0x304>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048e4:	4a24      	ldr	r2, [pc, #144]	; (8004978 <HAL_GPIO_Init+0x304>)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ea:	4b23      	ldr	r3, [pc, #140]	; (8004978 <HAL_GPIO_Init+0x304>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800490e:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <HAL_GPIO_Init+0x304>)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004914:	4b18      	ldr	r3, [pc, #96]	; (8004978 <HAL_GPIO_Init+0x304>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004938:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <HAL_GPIO_Init+0x304>)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3301      	adds	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b0f      	cmp	r3, #15
 8004948:	f67f aea2 	bls.w	8004690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800494c:	bf00      	nop
 800494e:	bf00      	nop
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	40013800 	.word	0x40013800
 8004964:	40020000 	.word	0x40020000
 8004968:	40020400 	.word	0x40020400
 800496c:	40020800 	.word	0x40020800
 8004970:	40020c00 	.word	0x40020c00
 8004974:	40021000 	.word	0x40021000
 8004978:	40013c00 	.word	0x40013c00

0800497c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
 8004988:	4613      	mov	r3, r2
 800498a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800498c:	787b      	ldrb	r3, [r7, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004998:	e003      	b.n	80049a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800499a:	887b      	ldrh	r3, [r7, #2]
 800499c:	041a      	lsls	r2, r3, #16
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	619a      	str	r2, [r3, #24]
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e267      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d075      	beq.n	8004aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ce:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d00c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049da:	4b85      	ldr	r3, [pc, #532]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d112      	bne.n	8004a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e6:	4b82      	ldr	r3, [pc, #520]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f2:	d10b      	bne.n	8004a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	4b7e      	ldr	r3, [pc, #504]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05b      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x108>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d157      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e242      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d106      	bne.n	8004a24 <HAL_RCC_OscConfig+0x74>
 8004a16:	4b76      	ldr	r3, [pc, #472]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a75      	ldr	r2, [pc, #468]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e01d      	b.n	8004a60 <HAL_RCC_OscConfig+0xb0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x98>
 8004a2e:	4b70      	ldr	r3, [pc, #448]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a6f      	ldr	r2, [pc, #444]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	4b6d      	ldr	r3, [pc, #436]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a6c      	ldr	r2, [pc, #432]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e00b      	b.n	8004a60 <HAL_RCC_OscConfig+0xb0>
 8004a48:	4b69      	ldr	r3, [pc, #420]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a68      	ldr	r2, [pc, #416]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b66      	ldr	r3, [pc, #408]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a65      	ldr	r2, [pc, #404]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d013      	beq.n	8004a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fe fd70 	bl	800354c <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fe fd6c 	bl	800354c <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e207      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a82:	4b5b      	ldr	r3, [pc, #364]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0xc0>
 8004a8e:	e014      	b.n	8004aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fe fd5c 	bl	800354c <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a98:	f7fe fd58 	bl	800354c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e1f3      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aaa:	4b51      	ldr	r3, [pc, #324]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0xe8>
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d063      	beq.n	8004b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac6:	4b4a      	ldr	r3, [pc, #296]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d11c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ade:	4b44      	ldr	r3, [pc, #272]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d116      	bne.n	8004b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_RCC_OscConfig+0x152>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d001      	beq.n	8004b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e1c7      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b02:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4937      	ldr	r1, [pc, #220]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b16:	e03a      	b.n	8004b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d020      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b20:	4b34      	ldr	r3, [pc, #208]	; (8004bf4 <HAL_RCC_OscConfig+0x244>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b26:	f7fe fd11 	bl	800354c <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2e:	f7fe fd0d 	bl	800354c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e1a8      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b40:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4925      	ldr	r1, [pc, #148]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]
 8004b60:	e015      	b.n	8004b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCC_OscConfig+0x244>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fe fcf0 	bl	800354c <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b70:	f7fe fcec 	bl	800354c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e187      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b82:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d036      	beq.n	8004c08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d016      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <HAL_RCC_OscConfig+0x248>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fe fcd0 	bl	800354c <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb0:	f7fe fccc 	bl	800354c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e167      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x200>
 8004bce:	e01b      	b.n	8004c08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_RCC_OscConfig+0x248>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd6:	f7fe fcb9 	bl	800354c <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	e00e      	b.n	8004bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bde:	f7fe fcb5 	bl	800354c <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d907      	bls.n	8004bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e150      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	42470000 	.word	0x42470000
 8004bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bfc:	4b88      	ldr	r3, [pc, #544]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1ea      	bne.n	8004bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8097 	beq.w	8004d44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c16:	2300      	movs	r3, #0
 8004c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1a:	4b81      	ldr	r3, [pc, #516]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c26:	2300      	movs	r3, #0
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	4b7d      	ldr	r3, [pc, #500]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	4a7c      	ldr	r2, [pc, #496]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c34:	6413      	str	r3, [r2, #64]	; 0x40
 8004c36:	4b7a      	ldr	r3, [pc, #488]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c42:	2301      	movs	r3, #1
 8004c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c46:	4b77      	ldr	r3, [pc, #476]	; (8004e24 <HAL_RCC_OscConfig+0x474>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d118      	bne.n	8004c84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c52:	4b74      	ldr	r3, [pc, #464]	; (8004e24 <HAL_RCC_OscConfig+0x474>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a73      	ldr	r2, [pc, #460]	; (8004e24 <HAL_RCC_OscConfig+0x474>)
 8004c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5e:	f7fe fc75 	bl	800354c <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c66:	f7fe fc71 	bl	800354c <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e10c      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c78:	4b6a      	ldr	r3, [pc, #424]	; (8004e24 <HAL_RCC_OscConfig+0x474>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d106      	bne.n	8004c9a <HAL_RCC_OscConfig+0x2ea>
 8004c8c:	4b64      	ldr	r3, [pc, #400]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	4a63      	ldr	r2, [pc, #396]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6713      	str	r3, [r2, #112]	; 0x70
 8004c98:	e01c      	b.n	8004cd4 <HAL_RCC_OscConfig+0x324>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCC_OscConfig+0x30c>
 8004ca2:	4b5f      	ldr	r3, [pc, #380]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4a5e      	ldr	r2, [pc, #376]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	f043 0304 	orr.w	r3, r3, #4
 8004cac:	6713      	str	r3, [r2, #112]	; 0x70
 8004cae:	4b5c      	ldr	r3, [pc, #368]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	4a5b      	ldr	r2, [pc, #364]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cba:	e00b      	b.n	8004cd4 <HAL_RCC_OscConfig+0x324>
 8004cbc:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a57      	ldr	r2, [pc, #348]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc8:	4b55      	ldr	r3, [pc, #340]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a54      	ldr	r2, [pc, #336]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004cce:	f023 0304 	bic.w	r3, r3, #4
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d015      	beq.n	8004d08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fe fc36 	bl	800354c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fe fc32 	bl	800354c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0cb      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	4b49      	ldr	r3, [pc, #292]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0ee      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x334>
 8004d06:	e014      	b.n	8004d32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d08:	f7fe fc20 	bl	800354c <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d10:	f7fe fc1c 	bl	800354c <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e0b5      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d26:	4b3e      	ldr	r3, [pc, #248]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ee      	bne.n	8004d10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d38:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	4a38      	ldr	r2, [pc, #224]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80a1 	beq.w	8004e90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d4e:	4b34      	ldr	r3, [pc, #208]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d05c      	beq.n	8004e14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d141      	bne.n	8004de6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d62:	4b31      	ldr	r3, [pc, #196]	; (8004e28 <HAL_RCC_OscConfig+0x478>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fe fbf0 	bl	800354c <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fe fbec 	bl	800354c <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e087      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d82:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69da      	ldr	r2, [r3, #28]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	019b      	lsls	r3, r3, #6
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	3b01      	subs	r3, #1
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	061b      	lsls	r3, r3, #24
 8004db2:	491b      	ldr	r1, [pc, #108]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <HAL_RCC_OscConfig+0x478>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbe:	f7fe fbc5 	bl	800354c <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fe fbc1 	bl	800354c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e05c      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd8:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x416>
 8004de4:	e054      	b.n	8004e90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <HAL_RCC_OscConfig+0x478>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fe fbae 	bl	800354c <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fe fbaa 	bl	800354c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e045      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e06:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_RCC_OscConfig+0x470>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x444>
 8004e12:	e03d      	b.n	8004e90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e038      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40007000 	.word	0x40007000
 8004e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x4ec>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d028      	beq.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d121      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d11a      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d111      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	3b01      	subs	r3, #1
 8004e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800

08004ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0cc      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b68      	ldr	r3, [pc, #416]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d90c      	bls.n	8004edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b65      	ldr	r3, [pc, #404]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b63      	ldr	r3, [pc, #396]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0b8      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d020      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef4:	4b59      	ldr	r3, [pc, #356]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a58      	ldr	r2, [pc, #352]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f0c:	4b53      	ldr	r3, [pc, #332]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a52      	ldr	r2, [pc, #328]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f18:	4b50      	ldr	r3, [pc, #320]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	494d      	ldr	r1, [pc, #308]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d044      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d119      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e07f      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d003      	beq.n	8004f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d107      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5e:	4b3f      	ldr	r3, [pc, #252]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d109      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e06f      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6e:	4b3b      	ldr	r3, [pc, #236]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e067      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f7e:	4b37      	ldr	r3, [pc, #220]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f023 0203 	bic.w	r2, r3, #3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4934      	ldr	r1, [pc, #208]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f90:	f7fe fadc 	bl	800354c <HAL_GetTick>
 8004f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	e00a      	b.n	8004fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f98:	f7fe fad8 	bl	800354c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e04f      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fae:	4b2b      	ldr	r3, [pc, #172]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 020c 	and.w	r2, r3, #12
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d1eb      	bne.n	8004f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d20c      	bcs.n	8004fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b22      	ldr	r3, [pc, #136]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e032      	b.n	800504e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4916      	ldr	r1, [pc, #88]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	490e      	ldr	r1, [pc, #56]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	4313      	orrs	r3, r2
 8005024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005026:	f000 f821 	bl	800506c <HAL_RCC_GetSysClockFreq>
 800502a:	4602      	mov	r2, r0
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	091b      	lsrs	r3, r3, #4
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	490a      	ldr	r1, [pc, #40]	; (8005060 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	5ccb      	ldrb	r3, [r1, r3]
 800503a:	fa22 f303 	lsr.w	r3, r2, r3
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005042:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe fa3c 	bl	80034c4 <HAL_InitTick>

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40023c00 	.word	0x40023c00
 800505c:	40023800 	.word	0x40023800
 8005060:	08006d8c 	.word	0x08006d8c
 8005064:	20000008 	.word	0x20000008
 8005068:	2000000c 	.word	0x2000000c

0800506c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800506c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005070:	b090      	sub	sp, #64	; 0x40
 8005072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
 8005078:	2300      	movs	r3, #0
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507c:	2300      	movs	r3, #0
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005084:	4b59      	ldr	r3, [pc, #356]	; (80051ec <HAL_RCC_GetSysClockFreq+0x180>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 030c 	and.w	r3, r3, #12
 800508c:	2b08      	cmp	r3, #8
 800508e:	d00d      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x40>
 8005090:	2b08      	cmp	r3, #8
 8005092:	f200 80a1 	bhi.w	80051d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_RCC_GetSysClockFreq+0x34>
 800509a:	2b04      	cmp	r3, #4
 800509c:	d003      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800509e:	e09b      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a0:	4b53      	ldr	r3, [pc, #332]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80050a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80050a4:	e09b      	b.n	80051de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050a6:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050aa:	e098      	b.n	80051de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050ac:	4b4f      	ldr	r3, [pc, #316]	; (80051ec <HAL_RCC_GetSysClockFreq+0x180>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050b6:	4b4d      	ldr	r3, [pc, #308]	; (80051ec <HAL_RCC_GetSysClockFreq+0x180>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d028      	beq.n	8005114 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c2:	4b4a      	ldr	r3, [pc, #296]	; (80051ec <HAL_RCC_GetSysClockFreq+0x180>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	2200      	movs	r2, #0
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	627a      	str	r2, [r7, #36]	; 0x24
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050d4:	2100      	movs	r1, #0
 80050d6:	4b47      	ldr	r3, [pc, #284]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050d8:	fb03 f201 	mul.w	r2, r3, r1
 80050dc:	2300      	movs	r3, #0
 80050de:	fb00 f303 	mul.w	r3, r0, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	4a43      	ldr	r2, [pc, #268]	; (80051f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80050e6:	fba0 1202 	umull	r1, r2, r0, r2
 80050ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ec:	460a      	mov	r2, r1
 80050ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80050f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f2:	4413      	add	r3, r2
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f8:	2200      	movs	r2, #0
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	61fa      	str	r2, [r7, #28]
 80050fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005102:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005106:	f7fb fc85 	bl	8000a14 <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4613      	mov	r3, r2
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005112:	e053      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005114:	4b35      	ldr	r3, [pc, #212]	; (80051ec <HAL_RCC_GetSysClockFreq+0x180>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	099b      	lsrs	r3, r3, #6
 800511a:	2200      	movs	r2, #0
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	617a      	str	r2, [r7, #20]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005126:	f04f 0b00 	mov.w	fp, #0
 800512a:	4652      	mov	r2, sl
 800512c:	465b      	mov	r3, fp
 800512e:	f04f 0000 	mov.w	r0, #0
 8005132:	f04f 0100 	mov.w	r1, #0
 8005136:	0159      	lsls	r1, r3, #5
 8005138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800513c:	0150      	lsls	r0, r2, #5
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	ebb2 080a 	subs.w	r8, r2, sl
 8005146:	eb63 090b 	sbc.w	r9, r3, fp
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005156:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800515a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800515e:	ebb2 0408 	subs.w	r4, r2, r8
 8005162:	eb63 0509 	sbc.w	r5, r3, r9
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	00eb      	lsls	r3, r5, #3
 8005170:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005174:	00e2      	lsls	r2, r4, #3
 8005176:	4614      	mov	r4, r2
 8005178:	461d      	mov	r5, r3
 800517a:	eb14 030a 	adds.w	r3, r4, sl
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	eb45 030b 	adc.w	r3, r5, fp
 8005184:	607b      	str	r3, [r7, #4]
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005192:	4629      	mov	r1, r5
 8005194:	028b      	lsls	r3, r1, #10
 8005196:	4621      	mov	r1, r4
 8005198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800519c:	4621      	mov	r1, r4
 800519e:	028a      	lsls	r2, r1, #10
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a6:	2200      	movs	r2, #0
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	60fa      	str	r2, [r7, #12]
 80051ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051b0:	f7fb fc30 	bl	8000a14 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4613      	mov	r3, r2
 80051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <HAL_RCC_GetSysClockFreq+0x180>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	3301      	adds	r3, #1
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80051cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051d6:	e002      	b.n	80051de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80051da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3740      	adds	r7, #64	; 0x40
 80051e4:	46bd      	mov	sp, r7
 80051e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800
 80051f0:	00f42400 	.word	0x00f42400
 80051f4:	017d7840 	.word	0x017d7840

080051f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051fc:	4b03      	ldr	r3, [pc, #12]	; (800520c <HAL_RCC_GetHCLKFreq+0x14>)
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000008 	.word	0x20000008

08005210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005214:	f7ff fff0 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	0a9b      	lsrs	r3, r3, #10
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	4903      	ldr	r1, [pc, #12]	; (8005234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40023800 	.word	0x40023800
 8005234:	08006d9c 	.word	0x08006d9c

08005238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800523c:	f7ff ffdc 	bl	80051f8 <HAL_RCC_GetHCLKFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	0b5b      	lsrs	r3, r3, #13
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	4903      	ldr	r1, [pc, #12]	; (800525c <HAL_RCC_GetPCLK2Freq+0x24>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40023800 	.word	0x40023800
 800525c:	08006d9c 	.word	0x08006d9c

08005260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07b      	b.n	800536a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005282:	d009      	beq.n	8005298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]
 800528a:	e005      	b.n	8005298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fd feac 	bl	8003010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	ea42 0103 	orr.w	r1, r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0104 	and.w	r1, r3, #4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0210 	and.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af02      	add	r7, sp, #8
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005396:	e0fb      	b.n	8005590 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a0:	d112      	bne.n	80053c8 <HAL_SPI_Receive+0x56>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10e      	bne.n	80053c8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2204      	movs	r2, #4
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f8ef 	bl	80055a2 <HAL_SPI_TransmitReceive>
 80053c4:	4603      	mov	r3, r0
 80053c6:	e0e8      	b.n	800559a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_SPI_Receive+0x64>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0e1      	b.n	800559a <HAL_SPI_Receive+0x228>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053de:	f7fe f8b5 	bl	800354c <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_Receive+0x7e>
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053f4:	e0cc      	b.n	8005590 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2204      	movs	r2, #4
 80053fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543c:	d10f      	bne.n	800545e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d007      	beq.n	800547c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d16a      	bne.n	800555a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005484:	e032      	b.n	80054ec <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d115      	bne.n	80054c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f103 020c 	add.w	r2, r3, #12
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054be:	e015      	b.n	80054ec <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054c0:	f7fe f844 	bl	800354c <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d803      	bhi.n	80054d8 <HAL_SPI_Receive+0x166>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d6:	d102      	bne.n	80054de <HAL_SPI_Receive+0x16c>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80054ea:	e051      	b.n	8005590 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1c7      	bne.n	8005486 <HAL_SPI_Receive+0x114>
 80054f6:	e035      	b.n	8005564 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d113      	bne.n	800552e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	b292      	uxth	r2, r2
 8005512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	1c9a      	adds	r2, r3, #2
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800552c:	e015      	b.n	800555a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800552e:	f7fe f80d 	bl	800354c <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d803      	bhi.n	8005546 <HAL_SPI_Receive+0x1d4>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005544:	d102      	bne.n	800554c <HAL_SPI_Receive+0x1da>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005558:	e01a      	b.n	8005590 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1c9      	bne.n	80054f8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fa53 	bl	8005a14 <SPI_EndRxTransaction>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
 8005586:	e003      	b.n	8005590 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b08c      	sub	sp, #48	; 0x30
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055b0:	2301      	movs	r3, #1
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x26>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e198      	b.n	80058fa <HAL_SPI_TransmitReceive+0x358>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d0:	f7fd ffbc 	bl	800354c <HAL_GetTick>
 80055d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055e6:	887b      	ldrh	r3, [r7, #2]
 80055e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d00f      	beq.n	8005612 <HAL_SPI_TransmitReceive+0x70>
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f8:	d107      	bne.n	800560a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <HAL_SPI_TransmitReceive+0x68>
 8005602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005606:	2b04      	cmp	r3, #4
 8005608:	d003      	beq.n	8005612 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800560a:	2302      	movs	r3, #2
 800560c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005610:	e16d      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x82>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x82>
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d103      	bne.n	800562c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800562a:	e160      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b04      	cmp	r3, #4
 8005636:	d003      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2205      	movs	r2, #5
 800563c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	887a      	ldrh	r2, [r7, #2]
 8005650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	887a      	ldrh	r2, [r7, #2]
 8005656:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	887a      	ldrh	r2, [r7, #2]
 8005662:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	887a      	ldrh	r2, [r7, #2]
 8005668:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d007      	beq.n	8005694 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569c:	d17c      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x10a>
 80056a6:	8b7b      	ldrh	r3, [r7, #26]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d16a      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d0:	e057      	b.n	8005782 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d11b      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x176>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x176>
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d113      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	1c9a      	adds	r2, r3, #2
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d119      	bne.n	800575a <HAL_SPI_TransmitReceive+0x1b8>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d014      	beq.n	800575a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	b292      	uxth	r2, r2
 800573c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	1c9a      	adds	r2, r3, #2
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005756:	2301      	movs	r3, #1
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800575a:	f7fd fef7 	bl	800354c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005766:	429a      	cmp	r2, r3
 8005768:	d80b      	bhi.n	8005782 <HAL_SPI_TransmitReceive+0x1e0>
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005770:	d007      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005780:	e0b5      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1a2      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x130>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d19d      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x130>
 8005796:	e080      	b.n	800589a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x204>
 80057a0:	8b7b      	ldrh	r3, [r7, #26]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d16f      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	7812      	ldrb	r2, [r2, #0]
 80057b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057cc:	e05b      	b.n	8005886 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d11c      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x274>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d017      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x274>
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d114      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	7812      	ldrb	r2, [r2, #0]
 80057f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d119      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x2b6>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d014      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005854:	2301      	movs	r3, #1
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005858:	f7fd fe78 	bl	800354c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005864:	429a      	cmp	r2, r3
 8005866:	d803      	bhi.n	8005870 <HAL_SPI_TransmitReceive+0x2ce>
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800586e:	d102      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x2d4>
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005884:	e033      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d19e      	bne.n	80057ce <HAL_SPI_TransmitReceive+0x22c>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d199      	bne.n	80057ce <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f91e 	bl	8005ae0 <SPI_EndRxTxTransaction>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d006      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058b6:	e01a      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e4:	e003      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3730      	adds	r7, #48	; 0x30
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005914:	f7fd fe1a 	bl	800354c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	4413      	add	r3, r2
 8005922:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005924:	f7fd fe12 	bl	800354c <HAL_GetTick>
 8005928:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800592a:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	015b      	lsls	r3, r3, #5
 8005930:	0d1b      	lsrs	r3, r3, #20
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593a:	e054      	b.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005942:	d050      	beq.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005944:	f7fd fe02 	bl	800354c <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	d902      	bls.n	800595a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d13d      	bne.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005968:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005972:	d111      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597c:	d004      	beq.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005986:	d107      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a0:	d10f      	bne.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e017      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d19b      	bne.n	800593c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000008 	.word	0x20000008

08005a14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a28:	d111      	bne.n	8005a4e <SPI_EndRxTransaction+0x3a>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	d004      	beq.n	8005a3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d107      	bne.n	8005a4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a56:	d12a      	bne.n	8005aae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a60:	d012      	beq.n	8005a88 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff ff49 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d02d      	beq.n	8005ad4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e026      	b.n	8005ad6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2101      	movs	r1, #1
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff ff36 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01a      	beq.n	8005ad4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e013      	b.n	8005ad6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff ff23 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e000      	b.n	8005ad6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2201      	movs	r2, #1
 8005af4:	2102      	movs	r1, #2
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ff04 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e032      	b.n	8005b78 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b12:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <SPI_EndRxTxTransaction+0xa0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <SPI_EndRxTxTransaction+0xa4>)
 8005b18:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1c:	0d5b      	lsrs	r3, r3, #21
 8005b1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b30:	d112      	bne.n	8005b58 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fee1 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d016      	beq.n	8005b76 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e00f      	b.n	8005b78 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	d0f2      	beq.n	8005b58 <SPI_EndRxTxTransaction+0x78>
 8005b72:	e000      	b.n	8005b76 <SPI_EndRxTxTransaction+0x96>
        break;
 8005b74:	bf00      	nop
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000008 	.word	0x20000008
 8005b84:	165e9f81 	.word	0x165e9f81

08005b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e041      	b.n	8005c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fd fa76 	bl	80030a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f000 f8f4 	bl	8005db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_ConfigClockSource+0x1c>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e0b4      	b.n	8005dac <HAL_TIM_ConfigClockSource+0x186>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7a:	d03e      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0xd4>
 8005c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c80:	f200 8087 	bhi.w	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	f000 8086 	beq.w	8005d98 <HAL_TIM_ConfigClockSource+0x172>
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d87f      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
 8005c92:	2b70      	cmp	r3, #112	; 0x70
 8005c94:	d01a      	beq.n	8005ccc <HAL_TIM_ConfigClockSource+0xa6>
 8005c96:	2b70      	cmp	r3, #112	; 0x70
 8005c98:	d87b      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9a:	2b60      	cmp	r3, #96	; 0x60
 8005c9c:	d050      	beq.n	8005d40 <HAL_TIM_ConfigClockSource+0x11a>
 8005c9e:	2b60      	cmp	r3, #96	; 0x60
 8005ca0:	d877      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca2:	2b50      	cmp	r3, #80	; 0x50
 8005ca4:	d03c      	beq.n	8005d20 <HAL_TIM_ConfigClockSource+0xfa>
 8005ca6:	2b50      	cmp	r3, #80	; 0x50
 8005ca8:	d873      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d058      	beq.n	8005d60 <HAL_TIM_ConfigClockSource+0x13a>
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d86f      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb2:	2b30      	cmp	r3, #48	; 0x30
 8005cb4:	d064      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb6:	2b30      	cmp	r3, #48	; 0x30
 8005cb8:	d86b      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d060      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0x15a>
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d867      	bhi.n	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d05c      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0x15a>
 8005cc6:	2b10      	cmp	r3, #16
 8005cc8:	d05a      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0x15a>
 8005cca:	e062      	b.n	8005d92 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cdc:	f000 f970 	bl	8005fc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]
      break;
 8005cf8:	e04f      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d0a:	f000 f959 	bl	8005fc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d1c:	609a      	str	r2, [r3, #8]
      break;
 8005d1e:	e03c      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f000 f8cd 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2150      	movs	r1, #80	; 0x50
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f926 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005d3e:	e02c      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f000 f8ec 	bl	8005f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2160      	movs	r1, #96	; 0x60
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f916 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005d5e:	e01c      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f000 f8ad 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2140      	movs	r1, #64	; 0x40
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 f906 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005d7e:	e00c      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f000 f8fd 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005d90:	e003      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
      break;
 8005d96:	e000      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a3a      	ldr	r2, [pc, #232]	; (8005eb0 <TIM_Base_SetConfig+0xfc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00f      	beq.n	8005dec <TIM_Base_SetConfig+0x38>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd2:	d00b      	beq.n	8005dec <TIM_Base_SetConfig+0x38>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a37      	ldr	r2, [pc, #220]	; (8005eb4 <TIM_Base_SetConfig+0x100>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d007      	beq.n	8005dec <TIM_Base_SetConfig+0x38>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a36      	ldr	r2, [pc, #216]	; (8005eb8 <TIM_Base_SetConfig+0x104>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_Base_SetConfig+0x38>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a35      	ldr	r2, [pc, #212]	; (8005ebc <TIM_Base_SetConfig+0x108>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d108      	bne.n	8005dfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2b      	ldr	r2, [pc, #172]	; (8005eb0 <TIM_Base_SetConfig+0xfc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d01b      	beq.n	8005e3e <TIM_Base_SetConfig+0x8a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0c:	d017      	beq.n	8005e3e <TIM_Base_SetConfig+0x8a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <TIM_Base_SetConfig+0x100>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <TIM_Base_SetConfig+0x8a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a27      	ldr	r2, [pc, #156]	; (8005eb8 <TIM_Base_SetConfig+0x104>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_Base_SetConfig+0x8a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <TIM_Base_SetConfig+0x108>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_Base_SetConfig+0x8a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <TIM_Base_SetConfig+0x10c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_Base_SetConfig+0x8a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a24      	ldr	r2, [pc, #144]	; (8005ec4 <TIM_Base_SetConfig+0x110>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0x8a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a23      	ldr	r2, [pc, #140]	; (8005ec8 <TIM_Base_SetConfig+0x114>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a0e      	ldr	r2, [pc, #56]	; (8005eb0 <TIM_Base_SetConfig+0xfc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d103      	bne.n	8005e84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d105      	bne.n	8005ea2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	611a      	str	r2, [r3, #16]
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 0307 	orr.w	r3, r3, #7
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006014:	2302      	movs	r3, #2
 8006016:	e050      	b.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d018      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d013      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a18      	ldr	r2, [pc, #96]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00e      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d009      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d004      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d10c      	bne.n	80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4313      	orrs	r3, r2
 800609e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40014000 	.word	0x40014000

080060dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e042      	b.n	8006174 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fc ffee 	bl	80030e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2224      	movs	r2, #36	; 0x24
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800611e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fb79 	bl	8006818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	695a      	ldr	r2, [r3, #20]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	; 0x28
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b20      	cmp	r3, #32
 800619a:	d175      	bne.n	8006288 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d002      	beq.n	80061a8 <HAL_UART_Transmit+0x2c>
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e06e      	b.n	800628a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2221      	movs	r2, #33	; 0x21
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061ba:	f7fd f9c7 	bl	800354c <HAL_GetTick>
 80061be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d4:	d108      	bne.n	80061e8 <HAL_UART_Transmit+0x6c>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e003      	b.n	80061f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061f0:	e02e      	b.n	8006250 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2200      	movs	r2, #0
 80061fa:	2180      	movs	r1, #128	; 0x80
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f98b 	bl	8006518 <UART_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e03a      	b.n	800628a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006228:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	3302      	adds	r3, #2
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e007      	b.n	8006242 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	3301      	adds	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1cb      	bne.n	80061f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	2140      	movs	r1, #64	; 0x40
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f957 	bl	8006518 <UART_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e006      	b.n	800628a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006288:	2302      	movs	r3, #2
  }
}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	4613      	mov	r3, r2
 800629e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d112      	bne.n	80062d2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_UART_Receive_DMA+0x26>
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e00b      	b.n	80062d4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	461a      	mov	r2, r3
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f97f 	bl	80065cc <UART_Start_Receive_DMA>
 80062ce:	4603      	mov	r3, r0
 80062d0:	e000      	b.n	80062d4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
  }
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b09c      	sub	sp, #112	; 0x70
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d172      	bne.n	800641e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633a:	2200      	movs	r2, #0
 800633c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800633e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	330c      	adds	r3, #12
 8006344:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800634e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006354:	66bb      	str	r3, [r7, #104]	; 0x68
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	330c      	adds	r3, #12
 800635c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800635e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006360:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800636c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3314      	adds	r3, #20
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	667b      	str	r3, [r7, #100]	; 0x64
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006392:	647a      	str	r2, [r7, #68]	; 0x44
 8006394:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	623b      	str	r3, [r7, #32]
   return(result);
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063bc:	663b      	str	r3, [r7, #96]	; 0x60
 80063be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3314      	adds	r3, #20
 80063c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063c6:	633a      	str	r2, [r7, #48]	; 0x30
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e5      	bne.n	80063a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d119      	bne.n	800641e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f023 0310 	bic.w	r3, r3, #16
 8006400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800640a:	61fa      	str	r2, [r7, #28]
 800640c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	69b9      	ldr	r1, [r7, #24]
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	617b      	str	r3, [r7, #20]
   return(result);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e5      	bne.n	80063ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006420:	2200      	movs	r2, #0
 8006422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	2b01      	cmp	r3, #1
 800642a:	d106      	bne.n	800643a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800642c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006430:	4619      	mov	r1, r3
 8006432:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006434:	f7ff ff66 	bl	8006304 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006438:	e002      	b.n	8006440 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800643a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800643c:	f7fc f9b6 	bl	80027ac <HAL_UART_RxCpltCallback>
}
 8006440:	bf00      	nop
 8006442:	3770      	adds	r7, #112	; 0x70
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	2b01      	cmp	r3, #1
 8006462:	d108      	bne.n	8006476 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	4619      	mov	r1, r3
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff ff48 	bl	8006304 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006474:	e002      	b.n	800647c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff ff30 	bl	80062dc <HAL_UART_RxHalfCpltCallback>
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a0:	2b80      	cmp	r3, #128	; 0x80
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b21      	cmp	r3, #33	; 0x21
 80064b6:	d108      	bne.n	80064ca <UART_DMAError+0x46>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2200      	movs	r2, #0
 80064c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80064c4:	68b8      	ldr	r0, [r7, #8]
 80064c6:	f000 f91b 	bl	8006700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b22      	cmp	r3, #34	; 0x22
 80064ea:	d108      	bne.n	80064fe <UART_DMAError+0x7a>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80064f8:	68b8      	ldr	r0, [r7, #8]
 80064fa:	f000 f929 	bl	8006750 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	f043 0210 	orr.w	r2, r3, #16
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800650a:	68b8      	ldr	r0, [r7, #8]
 800650c:	f7ff fef0 	bl	80062f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006528:	e03b      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006530:	d037      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fd f80b 	bl	800354c <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	6a3a      	ldr	r2, [r7, #32]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <UART_WaitOnFlagUntilTimeout+0x30>
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e03a      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d023      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b80      	cmp	r3, #128	; 0x80
 800655e:	d020      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d01d      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b08      	cmp	r3, #8
 8006572:	d116      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f8e0 	bl	8006750 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2208      	movs	r2, #8
 8006594:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e00f      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4013      	ands	r3, r2
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	bf0c      	ite	eq
 80065b2:	2301      	moveq	r3, #1
 80065b4:	2300      	movne	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d0b4      	beq.n	800652a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b098      	sub	sp, #96	; 0x60
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2222      	movs	r2, #34	; 0x22
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f8:	4a3e      	ldr	r2, [pc, #248]	; (80066f4 <UART_Start_Receive_DMA+0x128>)
 80065fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	4a3d      	ldr	r2, [pc, #244]	; (80066f8 <UART_Start_Receive_DMA+0x12c>)
 8006602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006608:	4a3c      	ldr	r2, [pc, #240]	; (80066fc <UART_Start_Receive_DMA+0x130>)
 800660a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006610:	2200      	movs	r2, #0
 8006612:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006614:	f107 0308 	add.w	r3, r7, #8
 8006618:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	f7fd fd60 	bl	80040f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006630:	2300      	movs	r3, #0
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	613b      	str	r3, [r7, #16]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d019      	beq.n	8006682 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	330c      	adds	r3, #12
 8006654:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800665e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006664:	65bb      	str	r3, [r7, #88]	; 0x58
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800666e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006670:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800667c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	f043 0301 	orr.w	r3, r3, #1
 8006698:	657b      	str	r3, [r7, #84]	; 0x54
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e5      	bne.n	8006682 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3314      	adds	r3, #20
 80066bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	617b      	str	r3, [r7, #20]
   return(result);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066cc:	653b      	str	r3, [r7, #80]	; 0x50
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3314      	adds	r3, #20
 80066d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066d6:	627a      	str	r2, [r7, #36]	; 0x24
 80066d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6a39      	ldr	r1, [r7, #32]
 80066dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e5      	bne.n	80066b6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3760      	adds	r7, #96	; 0x60
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	0800631d 	.word	0x0800631d
 80066f8:	08006449 	.word	0x08006449
 80066fc:	08006485 	.word	0x08006485

08006700 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b089      	sub	sp, #36	; 0x24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	60bb      	str	r3, [r7, #8]
   return(result);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	61ba      	str	r2, [r7, #24]
 800672a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6979      	ldr	r1, [r7, #20]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	613b      	str	r3, [r7, #16]
   return(result);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e5      	bne.n	8006708 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006744:	bf00      	nop
 8006746:	3724      	adds	r7, #36	; 0x24
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006750:	b480      	push	{r7}
 8006752:	b095      	sub	sp, #84	; 0x54
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800676e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006778:	643a      	str	r2, [r7, #64]	; 0x40
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800677e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e5      	bne.n	8006758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3314      	adds	r3, #20
 8006792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	61fb      	str	r3, [r7, #28]
   return(result);
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3314      	adds	r3, #20
 80067aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e5      	bne.n	800678c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d119      	bne.n	80067fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	647b      	str	r3, [r7, #68]	; 0x44
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067e8:	61ba      	str	r2, [r7, #24]
 80067ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	6979      	ldr	r1, [r7, #20]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	613b      	str	r3, [r7, #16]
   return(result);
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e5      	bne.n	80067c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
}
 800680a:	bf00      	nop
 800680c:	3754      	adds	r7, #84	; 0x54
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800681c:	b0c0      	sub	sp, #256	; 0x100
 800681e:	af00      	add	r7, sp, #0
 8006820:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	68d9      	ldr	r1, [r3, #12]
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	ea40 0301 	orr.w	r3, r0, r1
 8006840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	431a      	orrs	r2, r3
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	431a      	orrs	r2, r3
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006870:	f021 010c 	bic.w	r1, r1, #12
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800687e:	430b      	orrs	r3, r1
 8006880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	6999      	ldr	r1, [r3, #24]
 8006894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	ea40 0301 	orr.w	r3, r0, r1
 800689e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b8f      	ldr	r3, [pc, #572]	; (8006ae4 <UART_SetConfig+0x2cc>)
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d005      	beq.n	80068b8 <UART_SetConfig+0xa0>
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b8d      	ldr	r3, [pc, #564]	; (8006ae8 <UART_SetConfig+0x2d0>)
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d104      	bne.n	80068c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068b8:	f7fe fcbe 	bl	8005238 <HAL_RCC_GetPCLK2Freq>
 80068bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068c0:	e003      	b.n	80068ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068c2:	f7fe fca5 	bl	8005210 <HAL_RCC_GetPCLK1Freq>
 80068c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d4:	f040 810c 	bne.w	8006af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068ea:	4622      	mov	r2, r4
 80068ec:	462b      	mov	r3, r5
 80068ee:	1891      	adds	r1, r2, r2
 80068f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80068f2:	415b      	adcs	r3, r3
 80068f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068fa:	4621      	mov	r1, r4
 80068fc:	eb12 0801 	adds.w	r8, r2, r1
 8006900:	4629      	mov	r1, r5
 8006902:	eb43 0901 	adc.w	r9, r3, r1
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800691a:	4690      	mov	r8, r2
 800691c:	4699      	mov	r9, r3
 800691e:	4623      	mov	r3, r4
 8006920:	eb18 0303 	adds.w	r3, r8, r3
 8006924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006928:	462b      	mov	r3, r5
 800692a:	eb49 0303 	adc.w	r3, r9, r3
 800692e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800693e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006946:	460b      	mov	r3, r1
 8006948:	18db      	adds	r3, r3, r3
 800694a:	653b      	str	r3, [r7, #80]	; 0x50
 800694c:	4613      	mov	r3, r2
 800694e:	eb42 0303 	adc.w	r3, r2, r3
 8006952:	657b      	str	r3, [r7, #84]	; 0x54
 8006954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800695c:	f7fa f85a 	bl	8000a14 <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4b61      	ldr	r3, [pc, #388]	; (8006aec <UART_SetConfig+0x2d4>)
 8006966:	fba3 2302 	umull	r2, r3, r3, r2
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	011c      	lsls	r4, r3, #4
 800696e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006972:	2200      	movs	r2, #0
 8006974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006978:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800697c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	1891      	adds	r1, r2, r2
 8006986:	64b9      	str	r1, [r7, #72]	; 0x48
 8006988:	415b      	adcs	r3, r3
 800698a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800698c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006990:	4641      	mov	r1, r8
 8006992:	eb12 0a01 	adds.w	sl, r2, r1
 8006996:	4649      	mov	r1, r9
 8006998:	eb43 0b01 	adc.w	fp, r3, r1
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069b0:	4692      	mov	sl, r2
 80069b2:	469b      	mov	fp, r3
 80069b4:	4643      	mov	r3, r8
 80069b6:	eb1a 0303 	adds.w	r3, sl, r3
 80069ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069be:	464b      	mov	r3, r9
 80069c0:	eb4b 0303 	adc.w	r3, fp, r3
 80069c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069dc:	460b      	mov	r3, r1
 80069de:	18db      	adds	r3, r3, r3
 80069e0:	643b      	str	r3, [r7, #64]	; 0x40
 80069e2:	4613      	mov	r3, r2
 80069e4:	eb42 0303 	adc.w	r3, r2, r3
 80069e8:	647b      	str	r3, [r7, #68]	; 0x44
 80069ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069f2:	f7fa f80f 	bl	8000a14 <__aeabi_uldivmod>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4611      	mov	r1, r2
 80069fc:	4b3b      	ldr	r3, [pc, #236]	; (8006aec <UART_SetConfig+0x2d4>)
 80069fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	2264      	movs	r2, #100	; 0x64
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	1acb      	subs	r3, r1, r3
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a12:	4b36      	ldr	r3, [pc, #216]	; (8006aec <UART_SetConfig+0x2d4>)
 8006a14:	fba3 2302 	umull	r2, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a20:	441c      	add	r4, r3
 8006a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a34:	4642      	mov	r2, r8
 8006a36:	464b      	mov	r3, r9
 8006a38:	1891      	adds	r1, r2, r2
 8006a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a3c:	415b      	adcs	r3, r3
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a44:	4641      	mov	r1, r8
 8006a46:	1851      	adds	r1, r2, r1
 8006a48:	6339      	str	r1, [r7, #48]	; 0x30
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	414b      	adcs	r3, r1
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	00cb      	lsls	r3, r1, #3
 8006a60:	4651      	mov	r1, sl
 8006a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a66:	4651      	mov	r1, sl
 8006a68:	00ca      	lsls	r2, r1, #3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4642      	mov	r2, r8
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a78:	464b      	mov	r3, r9
 8006a7a:	460a      	mov	r2, r1
 8006a7c:	eb42 0303 	adc.w	r3, r2, r3
 8006a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a98:	460b      	mov	r3, r1
 8006a9a:	18db      	adds	r3, r3, r3
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006aae:	f7f9 ffb1 	bl	8000a14 <__aeabi_uldivmod>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <UART_SetConfig+0x2d4>)
 8006ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	2164      	movs	r1, #100	; 0x64
 8006ac0:	fb01 f303 	mul.w	r3, r1, r3
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	3332      	adds	r3, #50	; 0x32
 8006aca:	4a08      	ldr	r2, [pc, #32]	; (8006aec <UART_SetConfig+0x2d4>)
 8006acc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad0:	095b      	lsrs	r3, r3, #5
 8006ad2:	f003 0207 	and.w	r2, r3, #7
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4422      	add	r2, r4
 8006ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ae0:	e106      	b.n	8006cf0 <UART_SetConfig+0x4d8>
 8006ae2:	bf00      	nop
 8006ae4:	40011000 	.word	0x40011000
 8006ae8:	40011400 	.word	0x40011400
 8006aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006afa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	1891      	adds	r1, r2, r2
 8006b08:	6239      	str	r1, [r7, #32]
 8006b0a:	415b      	adcs	r3, r3
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b12:	4641      	mov	r1, r8
 8006b14:	1854      	adds	r4, r2, r1
 8006b16:	4649      	mov	r1, r9
 8006b18:	eb43 0501 	adc.w	r5, r3, r1
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	00eb      	lsls	r3, r5, #3
 8006b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b2a:	00e2      	lsls	r2, r4, #3
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	461d      	mov	r5, r3
 8006b30:	4643      	mov	r3, r8
 8006b32:	18e3      	adds	r3, r4, r3
 8006b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b38:	464b      	mov	r3, r9
 8006b3a:	eb45 0303 	adc.w	r3, r5, r3
 8006b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	f04f 0300 	mov.w	r3, #0
 8006b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b5e:	4629      	mov	r1, r5
 8006b60:	008b      	lsls	r3, r1, #2
 8006b62:	4621      	mov	r1, r4
 8006b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b68:	4621      	mov	r1, r4
 8006b6a:	008a      	lsls	r2, r1, #2
 8006b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b70:	f7f9 ff50 	bl	8000a14 <__aeabi_uldivmod>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4b60      	ldr	r3, [pc, #384]	; (8006cfc <UART_SetConfig+0x4e4>)
 8006b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	011c      	lsls	r4, r3, #4
 8006b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b94:	4642      	mov	r2, r8
 8006b96:	464b      	mov	r3, r9
 8006b98:	1891      	adds	r1, r2, r2
 8006b9a:	61b9      	str	r1, [r7, #24]
 8006b9c:	415b      	adcs	r3, r3
 8006b9e:	61fb      	str	r3, [r7, #28]
 8006ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ba4:	4641      	mov	r1, r8
 8006ba6:	1851      	adds	r1, r2, r1
 8006ba8:	6139      	str	r1, [r7, #16]
 8006baa:	4649      	mov	r1, r9
 8006bac:	414b      	adcs	r3, r1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	00cb      	lsls	r3, r1, #3
 8006bc0:	4651      	mov	r1, sl
 8006bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bc6:	4651      	mov	r1, sl
 8006bc8:	00ca      	lsls	r2, r1, #3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4642      	mov	r2, r8
 8006bd2:	189b      	adds	r3, r3, r2
 8006bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bd8:	464b      	mov	r3, r9
 8006bda:	460a      	mov	r2, r1
 8006bdc:	eb42 0303 	adc.w	r3, r2, r3
 8006be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	008b      	lsls	r3, r1, #2
 8006c00:	4641      	mov	r1, r8
 8006c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c06:	4641      	mov	r1, r8
 8006c08:	008a      	lsls	r2, r1, #2
 8006c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c0e:	f7f9 ff01 	bl	8000a14 <__aeabi_uldivmod>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4611      	mov	r1, r2
 8006c18:	4b38      	ldr	r3, [pc, #224]	; (8006cfc <UART_SetConfig+0x4e4>)
 8006c1a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	2264      	movs	r2, #100	; 0x64
 8006c22:	fb02 f303 	mul.w	r3, r2, r3
 8006c26:	1acb      	subs	r3, r1, r3
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	3332      	adds	r3, #50	; 0x32
 8006c2c:	4a33      	ldr	r2, [pc, #204]	; (8006cfc <UART_SetConfig+0x4e4>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c38:	441c      	add	r4, r3
 8006c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c3e:	2200      	movs	r2, #0
 8006c40:	673b      	str	r3, [r7, #112]	; 0x70
 8006c42:	677a      	str	r2, [r7, #116]	; 0x74
 8006c44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c48:	4642      	mov	r2, r8
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	1891      	adds	r1, r2, r2
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	415b      	adcs	r3, r3
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c58:	4641      	mov	r1, r8
 8006c5a:	1851      	adds	r1, r2, r1
 8006c5c:	6039      	str	r1, [r7, #0]
 8006c5e:	4649      	mov	r1, r9
 8006c60:	414b      	adcs	r3, r1
 8006c62:	607b      	str	r3, [r7, #4]
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c70:	4659      	mov	r1, fp
 8006c72:	00cb      	lsls	r3, r1, #3
 8006c74:	4651      	mov	r1, sl
 8006c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c7a:	4651      	mov	r1, sl
 8006c7c:	00ca      	lsls	r2, r1, #3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	4619      	mov	r1, r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	4642      	mov	r2, r8
 8006c86:	189b      	adds	r3, r3, r2
 8006c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	460a      	mov	r2, r1
 8006c8e:	eb42 0303 	adc.w	r3, r2, r3
 8006c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c9e:	667a      	str	r2, [r7, #100]	; 0x64
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006cac:	4649      	mov	r1, r9
 8006cae:	008b      	lsls	r3, r1, #2
 8006cb0:	4641      	mov	r1, r8
 8006cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cb6:	4641      	mov	r1, r8
 8006cb8:	008a      	lsls	r2, r1, #2
 8006cba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cbe:	f7f9 fea9 	bl	8000a14 <__aeabi_uldivmod>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <UART_SetConfig+0x4e4>)
 8006cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	2164      	movs	r1, #100	; 0x64
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	3332      	adds	r3, #50	; 0x32
 8006cda:	4a08      	ldr	r2, [pc, #32]	; (8006cfc <UART_SetConfig+0x4e4>)
 8006cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	f003 020f 	and.w	r2, r3, #15
 8006ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4422      	add	r2, r4
 8006cee:	609a      	str	r2, [r3, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cfc:	51eb851f 	.word	0x51eb851f

08006d00 <memset>:
 8006d00:	4402      	add	r2, r0
 8006d02:	4603      	mov	r3, r0
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d100      	bne.n	8006d0a <memset+0xa>
 8006d08:	4770      	bx	lr
 8006d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0e:	e7f9      	b.n	8006d04 <memset+0x4>

08006d10 <__libc_init_array>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4d0d      	ldr	r5, [pc, #52]	; (8006d48 <__libc_init_array+0x38>)
 8006d14:	4c0d      	ldr	r4, [pc, #52]	; (8006d4c <__libc_init_array+0x3c>)
 8006d16:	1b64      	subs	r4, r4, r5
 8006d18:	10a4      	asrs	r4, r4, #2
 8006d1a:	2600      	movs	r6, #0
 8006d1c:	42a6      	cmp	r6, r4
 8006d1e:	d109      	bne.n	8006d34 <__libc_init_array+0x24>
 8006d20:	4d0b      	ldr	r5, [pc, #44]	; (8006d50 <__libc_init_array+0x40>)
 8006d22:	4c0c      	ldr	r4, [pc, #48]	; (8006d54 <__libc_init_array+0x44>)
 8006d24:	f000 f826 	bl	8006d74 <_init>
 8006d28:	1b64      	subs	r4, r4, r5
 8006d2a:	10a4      	asrs	r4, r4, #2
 8006d2c:	2600      	movs	r6, #0
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	d105      	bne.n	8006d3e <__libc_init_array+0x2e>
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d38:	4798      	blx	r3
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	e7ee      	b.n	8006d1c <__libc_init_array+0xc>
 8006d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d42:	4798      	blx	r3
 8006d44:	3601      	adds	r6, #1
 8006d46:	e7f2      	b.n	8006d2e <__libc_init_array+0x1e>
 8006d48:	08006db4 	.word	0x08006db4
 8006d4c:	08006db4 	.word	0x08006db4
 8006d50:	08006db4 	.word	0x08006db4
 8006d54:	08006db8 	.word	0x08006db8

08006d58 <memcpy>:
 8006d58:	440a      	add	r2, r1
 8006d5a:	4291      	cmp	r1, r2
 8006d5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d60:	d100      	bne.n	8006d64 <memcpy+0xc>
 8006d62:	4770      	bx	lr
 8006d64:	b510      	push	{r4, lr}
 8006d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d6e:	4291      	cmp	r1, r2
 8006d70:	d1f9      	bne.n	8006d66 <memcpy+0xe>
 8006d72:	bd10      	pop	{r4, pc}

08006d74 <_init>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr

08006d80 <_fini>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr
